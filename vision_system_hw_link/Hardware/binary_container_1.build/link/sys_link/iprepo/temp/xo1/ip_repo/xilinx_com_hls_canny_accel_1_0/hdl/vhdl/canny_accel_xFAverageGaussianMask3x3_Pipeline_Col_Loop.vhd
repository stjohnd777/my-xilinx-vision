-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity canny_accel_xFAverageGaussianMask3x3_Pipeline_Col_Loop is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    in_mat_data1_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    in_mat_data1_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    in_mat_data1_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    in_mat_data1_empty_n : IN STD_LOGIC;
    in_mat_data1_read : OUT STD_LOGIC;
    gaussian_mat_data1_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    gaussian_mat_data1_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    gaussian_mat_data1_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    gaussian_mat_data1_full_n : IN STD_LOGIC;
    gaussian_mat_data1_write : OUT STD_LOGIC;
    img_width : IN STD_LOGIC_VECTOR (15 downto 0);
    buf_V_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    buf_V_ce0 : OUT STD_LOGIC;
    buf_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buf_V_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
    buf_V_ce1 : OUT STD_LOGIC;
    buf_V_we1 : OUT STD_LOGIC;
    buf_V_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    buf_V_5_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    buf_V_5_ce0 : OUT STD_LOGIC;
    buf_V_5_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buf_V_5_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
    buf_V_5_ce1 : OUT STD_LOGIC;
    buf_V_5_we1 : OUT STD_LOGIC;
    buf_V_5_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    buf_V_6_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    buf_V_6_ce0 : OUT STD_LOGIC;
    buf_V_6_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buf_V_6_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
    buf_V_6_ce1 : OUT STD_LOGIC;
    buf_V_6_we1 : OUT STD_LOGIC;
    buf_V_6_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    tp_V : IN STD_LOGIC_VECTOR (1 downto 0);
    mid_V : IN STD_LOGIC_VECTOR (1 downto 0);
    bottom_V : IN STD_LOGIC_VECTOR (1 downto 0);
    cmp_i_i422_i : IN STD_LOGIC_VECTOR (0 downto 0);
    b1_V_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    b1_V_out_ap_vld : OUT STD_LOGIC;
    b0_V_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    b0_V_out_ap_vld : OUT STD_LOGIC;
    m1_V_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    m1_V_out_ap_vld : OUT STD_LOGIC;
    m0_V_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    m0_V_out_ap_vld : OUT STD_LOGIC;
    t1_V_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    t1_V_out_ap_vld : OUT STD_LOGIC;
    t0_V_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    t0_V_out_ap_vld : OUT STD_LOGIC );
end;


architecture behav of canny_accel_xFAverageGaussianMask3x3_Pipeline_Col_Loop is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv13_1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal icmp_ln1027_reg_733 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp_i_i422_i_read_reg_706 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_predicate_op56_read_state2 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal icmp_ln1019_7_reg_752 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1019_7_reg_752_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln1027_fu_377_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal in_mat_data1_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal gaussian_mat_data1_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal bottom_V_read_reg_710 : STD_LOGIC_VECTOR (1 downto 0);
    signal col_V_9_reg_725 : STD_LOGIC_VECTOR (12 downto 0);
    signal col_V_9_reg_725_pp0_iter1_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal icmp_ln1027_reg_733_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1027_reg_733_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1019_7_fu_412_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal g_x_V_reg_756 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_condition_exit_pp0_iter3_stage0 : STD_LOGIC;
    signal src_buf1_V_xfExtractPixels_1_1_0_1_fu_320_ap_ready : STD_LOGIC;
    signal src_buf1_V_xfExtractPixels_1_1_0_1_fu_320_ap_return : STD_LOGIC_VECTOR (7 downto 0);
    signal src_buf2_V_xfExtractPixels_1_1_0_1_fu_325_ap_ready : STD_LOGIC;
    signal src_buf2_V_xfExtractPixels_1_1_0_1_fu_325_ap_return : STD_LOGIC_VECTOR (7 downto 0);
    signal src_buf3_V_xfExtractPixels_1_1_0_1_fu_330_ap_ready : STD_LOGIC;
    signal src_buf3_V_xfExtractPixels_1_1_0_1_fu_330_ap_return : STD_LOGIC_VECTOR (7 downto 0);
    signal buf0_V_fu_438_p5 : STD_LOGIC_VECTOR (7 downto 0);
    signal buf1_V_fu_450_p5 : STD_LOGIC_VECTOR (7 downto 0);
    signal buf2_V_fu_462_p5 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln541_3_fu_394_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln541_fu_400_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln541_4_fu_406_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal col_V_fu_102 : STD_LOGIC_VECTOR (12 downto 0);
    signal col_V_10_fu_383_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_col_V_9 : STD_LOGIC_VECTOR (12 downto 0);
    signal t0_V_fu_106 : STD_LOGIC_VECTOR (7 downto 0);
    signal m0_V_fu_110 : STD_LOGIC_VECTOR (7 downto 0);
    signal b0_V_fu_114 : STD_LOGIC_VECTOR (7 downto 0);
    signal t1_V_fu_118 : STD_LOGIC_VECTOR (7 downto 0);
    signal m1_V_fu_122 : STD_LOGIC_VECTOR (7 downto 0);
    signal b1_V_fu_126 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal zext_ln1027_fu_373_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln45_fu_474_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln46_fu_482_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal A00_fu_490_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln45_1_fu_478_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln45_2_fu_486_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln49_fu_500_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln49_fu_506_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln46_1_fu_496_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln48_fu_520_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln47_fu_516_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln48_fu_528_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln48_1_fu_524_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln50_1_fu_538_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln50_fu_542_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln50_2_fu_548_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln50_fu_534_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln50_1_fu_552_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal A0_fu_510_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal A1_fu_558_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal A2_fu_566_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln52_fu_574_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln52_2_fu_582_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln52_fu_586_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln52_3_fu_592_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln52_1_fu_578_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln52_1_fu_596_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_condition_514 : BOOLEAN;
    signal ap_condition_518 : BOOLEAN;
    signal ap_condition_521 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component canny_accel_xfExtractPixels_1_1_0_1 IS
    port (
        ap_ready : OUT STD_LOGIC;
        p_read1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component canny_accel_mux_32_8_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (7 downto 0);
        din3 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component canny_accel_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    src_buf1_V_xfExtractPixels_1_1_0_1_fu_320 : component canny_accel_xfExtractPixels_1_1_0_1
    port map (
        ap_ready => src_buf1_V_xfExtractPixels_1_1_0_1_fu_320_ap_ready,
        p_read1 => buf0_V_fu_438_p5,
        ap_return => src_buf1_V_xfExtractPixels_1_1_0_1_fu_320_ap_return);

    src_buf2_V_xfExtractPixels_1_1_0_1_fu_325 : component canny_accel_xfExtractPixels_1_1_0_1
    port map (
        ap_ready => src_buf2_V_xfExtractPixels_1_1_0_1_fu_325_ap_ready,
        p_read1 => buf1_V_fu_450_p5,
        ap_return => src_buf2_V_xfExtractPixels_1_1_0_1_fu_325_ap_return);

    src_buf3_V_xfExtractPixels_1_1_0_1_fu_330 : component canny_accel_xfExtractPixels_1_1_0_1
    port map (
        ap_ready => src_buf3_V_xfExtractPixels_1_1_0_1_fu_330_ap_ready,
        p_read1 => buf2_V_fu_462_p5,
        ap_return => src_buf3_V_xfExtractPixels_1_1_0_1_fu_330_ap_return);

    mux_32_8_1_1_U75 : component canny_accel_mux_32_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 2,
        dout_WIDTH => 8)
    port map (
        din0 => buf_V_q0,
        din1 => buf_V_5_q0,
        din2 => buf_V_6_q0,
        din3 => tp_V,
        dout => buf0_V_fu_438_p5);

    mux_32_8_1_1_U76 : component canny_accel_mux_32_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 2,
        dout_WIDTH => 8)
    port map (
        din0 => buf_V_q0,
        din1 => buf_V_5_q0,
        din2 => buf_V_6_q0,
        din3 => mid_V,
        dout => buf1_V_fu_450_p5);

    mux_32_8_1_1_U77 : component canny_accel_mux_32_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 2,
        dout_WIDTH => 8)
    port map (
        din0 => buf_V_q0,
        din1 => buf_V_5_q0,
        din2 => buf_V_6_q0,
        din3 => bottom_V,
        dout => buf2_V_fu_462_p5);

    flow_control_loop_pipe_sequential_init_U : component canny_accel_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter3_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter3_stage0)) then 
                    ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    b0_V_fu_114_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    b0_V_fu_114 <= ap_const_lv8_0;
                elsif (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (icmp_ln1027_reg_733_pp0_iter2_reg = ap_const_lv1_1))) then 
                    b0_V_fu_114 <= b1_V_fu_126;
                end if;
            end if; 
        end if;
    end process;

    b1_V_fu_126_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    b1_V_fu_126 <= ap_const_lv8_0;
                elsif (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (icmp_ln1027_reg_733_pp0_iter2_reg = ap_const_lv1_1))) then 
                    b1_V_fu_126 <= src_buf3_V_xfExtractPixels_1_1_0_1_fu_330_ap_return;
                end if;
            end if; 
        end if;
    end process;

    col_V_fu_102_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln1027_fu_377_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    col_V_fu_102 <= col_V_10_fu_383_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    col_V_fu_102 <= ap_const_lv13_0;
                end if;
            end if; 
        end if;
    end process;

    m0_V_fu_110_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    m0_V_fu_110 <= ap_const_lv8_0;
                elsif (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (icmp_ln1027_reg_733_pp0_iter2_reg = ap_const_lv1_1))) then 
                    m0_V_fu_110 <= m1_V_fu_122;
                end if;
            end if; 
        end if;
    end process;

    m1_V_fu_122_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    m1_V_fu_122 <= ap_const_lv8_0;
                elsif (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (icmp_ln1027_reg_733_pp0_iter2_reg = ap_const_lv1_1))) then 
                    m1_V_fu_122 <= src_buf2_V_xfExtractPixels_1_1_0_1_fu_325_ap_return;
                end if;
            end if; 
        end if;
    end process;

    t0_V_fu_106_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    t0_V_fu_106 <= ap_const_lv8_0;
                elsif (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (icmp_ln1027_reg_733_pp0_iter2_reg = ap_const_lv1_1))) then 
                    t0_V_fu_106 <= t1_V_fu_118;
                end if;
            end if; 
        end if;
    end process;

    t1_V_fu_118_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    t1_V_fu_118 <= ap_const_lv8_0;
                elsif (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (icmp_ln1027_reg_733_pp0_iter2_reg = ap_const_lv1_1))) then 
                    t1_V_fu_118 <= src_buf1_V_xfExtractPixels_1_1_0_1_fu_320_ap_return;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                col_V_9_reg_725 <= ap_sig_allocacmp_col_V_9;
                col_V_9_reg_725_pp0_iter1_reg <= col_V_9_reg_725;
                icmp_ln1027_reg_733 <= icmp_ln1027_fu_377_p2;
                icmp_ln1027_reg_733_pp0_iter1_reg <= icmp_ln1027_reg_733;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                icmp_ln1019_7_reg_752_pp0_iter3_reg <= icmp_ln1019_7_reg_752;
                icmp_ln1027_reg_733_pp0_iter2_reg <= icmp_ln1027_reg_733_pp0_iter1_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln1027_reg_733_pp0_iter2_reg = ap_const_lv1_1))) then
                g_x_V_reg_756 <= add_ln52_1_fu_596_p2(11 downto 4);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln1027_reg_733_pp0_iter1_reg = ap_const_lv1_1))) then
                icmp_ln1019_7_reg_752 <= icmp_ln1019_7_fu_412_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    A00_fu_490_p2 <= std_logic_vector(unsigned(zext_ln45_fu_474_p1) + unsigned(zext_ln46_fu_482_p1));
    A0_fu_510_p2 <= std_logic_vector(unsigned(zext_ln49_fu_506_p1) + unsigned(zext_ln46_1_fu_496_p1));
    A1_fu_558_p3 <= (add_ln50_1_fu_552_p2 & ap_const_lv1_0);
    A2_fu_566_p3 <= (m1_V_fu_122 & ap_const_lv2_0);
    add_ln48_fu_528_p2 <= std_logic_vector(unsigned(zext_ln48_fu_520_p1) + unsigned(zext_ln47_fu_516_p1));
    add_ln49_fu_500_p2 <= std_logic_vector(unsigned(zext_ln45_1_fu_478_p1) + unsigned(zext_ln45_2_fu_486_p1));
    add_ln50_1_fu_552_p2 <= std_logic_vector(unsigned(zext_ln50_2_fu_548_p1) + unsigned(zext_ln50_fu_534_p1));
    add_ln50_fu_542_p2 <= std_logic_vector(unsigned(zext_ln48_1_fu_524_p1) + unsigned(zext_ln50_1_fu_538_p1));
    add_ln52_1_fu_596_p2 <= std_logic_vector(unsigned(zext_ln52_3_fu_592_p1) + unsigned(zext_ln52_1_fu_578_p1));
    add_ln52_fu_586_p2 <= std_logic_vector(unsigned(zext_ln52_fu_574_p1) + unsigned(zext_ln52_2_fu_582_p1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter4, in_mat_data1_empty_n, ap_predicate_op56_read_state2, gaussian_mat_data1_full_n, icmp_ln1019_7_reg_752_pp0_iter3_reg)
    begin
                ap_block_pp0_stage0_01001 <= (((icmp_ln1019_7_reg_752_pp0_iter3_reg = ap_const_lv1_0) and (gaussian_mat_data1_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1)) or ((ap_predicate_op56_read_state2 = ap_const_boolean_1) and (in_mat_data1_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter4, in_mat_data1_empty_n, ap_predicate_op56_read_state2, gaussian_mat_data1_full_n, icmp_ln1019_7_reg_752_pp0_iter3_reg)
    begin
                ap_block_pp0_stage0_11001 <= (((icmp_ln1019_7_reg_752_pp0_iter3_reg = ap_const_lv1_0) and (gaussian_mat_data1_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1)) or ((ap_predicate_op56_read_state2 = ap_const_boolean_1) and (in_mat_data1_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter4, in_mat_data1_empty_n, ap_predicate_op56_read_state2, gaussian_mat_data1_full_n, icmp_ln1019_7_reg_752_pp0_iter3_reg)
    begin
                ap_block_pp0_stage0_subdone <= (((icmp_ln1019_7_reg_752_pp0_iter3_reg = ap_const_lv1_0) and (gaussian_mat_data1_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1)) or ((ap_predicate_op56_read_state2 = ap_const_boolean_1) and (in_mat_data1_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;

        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state2_pp0_stage0_iter1_assign_proc : process(in_mat_data1_empty_n, ap_predicate_op56_read_state2)
    begin
                ap_block_state2_pp0_stage0_iter1 <= ((ap_predicate_op56_read_state2 = ap_const_boolean_1) and (in_mat_data1_empty_n = ap_const_logic_0));
    end process;

        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state5_pp0_stage0_iter4_assign_proc : process(gaussian_mat_data1_full_n, icmp_ln1019_7_reg_752_pp0_iter3_reg)
    begin
                ap_block_state5_pp0_stage0_iter4 <= ((icmp_ln1019_7_reg_752_pp0_iter3_reg = ap_const_lv1_0) and (gaussian_mat_data1_full_n = ap_const_logic_0));
    end process;


    ap_condition_514_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln1027_reg_733, ap_block_pp0_stage0, bottom_V_read_reg_710)
    begin
                ap_condition_514 <= ((ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln1027_reg_733 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (bottom_V_read_reg_710 = ap_const_lv2_1));
    end process;


    ap_condition_518_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln1027_reg_733, ap_block_pp0_stage0, bottom_V_read_reg_710)
    begin
                ap_condition_518 <= (not((bottom_V_read_reg_710 = ap_const_lv2_0)) and not((bottom_V_read_reg_710 = ap_const_lv2_1)) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln1027_reg_733 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_condition_521_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln1027_reg_733, ap_block_pp0_stage0, bottom_V_read_reg_710)
    begin
                ap_condition_521 <= ((ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln1027_reg_733 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (bottom_V_read_reg_710 = ap_const_lv2_0));
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln1027_fu_377_p2)
    begin
        if (((icmp_ln1027_fu_377_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_exit_pp0_iter3_stage0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_subdone, icmp_ln1027_reg_733_pp0_iter2_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (icmp_ln1027_reg_733_pp0_iter2_reg = ap_const_lv1_0))) then 
            ap_condition_exit_pp0_iter3_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter3_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter3_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter3_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_predicate_op56_read_state2_assign_proc : process(icmp_ln1027_reg_733, cmp_i_i422_i)
    begin
                ap_predicate_op56_read_state2 <= ((cmp_i_i422_i = ap_const_lv1_1) and (icmp_ln1027_reg_733 = ap_const_lv1_1));
    end process;


    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_col_V_9_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, col_V_fu_102, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_col_V_9 <= ap_const_lv13_0;
        else 
            ap_sig_allocacmp_col_V_9 <= col_V_fu_102;
        end if; 
    end process;

    b0_V_out <= b0_V_fu_114;

    b0_V_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln1027_reg_733_pp0_iter2_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln1027_reg_733_pp0_iter2_reg = ap_const_lv1_0))) then 
            b0_V_out_ap_vld <= ap_const_logic_1;
        else 
            b0_V_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    b1_V_out <= b1_V_fu_126;

    b1_V_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln1027_reg_733_pp0_iter2_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln1027_reg_733_pp0_iter2_reg = ap_const_lv1_0))) then 
            b1_V_out_ap_vld <= ap_const_logic_1;
        else 
            b1_V_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    bottom_V_read_reg_710 <= bottom_V;
    buf_V_5_address0 <= zext_ln541_4_fu_406_p1(11 - 1 downto 0);

    buf_V_5_address1_assign_proc : process(cmp_i_i422_i_read_reg_706, cmp_i_i422_i, zext_ln541_3_fu_394_p1, zext_ln541_fu_400_p1, ap_condition_514)
    begin
        if ((ap_const_boolean_1 = ap_condition_514)) then
            if ((cmp_i_i422_i = ap_const_lv1_1)) then 
                buf_V_5_address1 <= zext_ln541_fu_400_p1(11 - 1 downto 0);
            elsif ((cmp_i_i422_i_read_reg_706 = ap_const_lv1_0)) then 
                buf_V_5_address1 <= zext_ln541_3_fu_394_p1(11 - 1 downto 0);
            else 
                buf_V_5_address1 <= "XXXXXXXXXXX";
            end if;
        else 
            buf_V_5_address1 <= "XXXXXXXXXXX";
        end if; 
    end process;


    buf_V_5_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            buf_V_5_ce0 <= ap_const_logic_1;
        else 
            buf_V_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buf_V_5_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln1027_reg_733, cmp_i_i422_i_read_reg_706, cmp_i_i422_i, ap_block_pp0_stage0_11001, bottom_V_read_reg_710)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (cmp_i_i422_i = ap_const_lv1_1) and (icmp_ln1027_reg_733 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (bottom_V_read_reg_710 = ap_const_lv2_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (cmp_i_i422_i_read_reg_706 = ap_const_lv1_0) and (icmp_ln1027_reg_733 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (bottom_V_read_reg_710 = ap_const_lv2_1)))) then 
            buf_V_5_ce1 <= ap_const_logic_1;
        else 
            buf_V_5_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    buf_V_5_d1_assign_proc : process(in_mat_data1_dout, cmp_i_i422_i_read_reg_706, cmp_i_i422_i, ap_condition_514)
    begin
        if ((ap_const_boolean_1 = ap_condition_514)) then
            if ((cmp_i_i422_i = ap_const_lv1_1)) then 
                buf_V_5_d1 <= in_mat_data1_dout;
            elsif ((cmp_i_i422_i_read_reg_706 = ap_const_lv1_0)) then 
                buf_V_5_d1 <= ap_const_lv8_0;
            else 
                buf_V_5_d1 <= "XXXXXXXX";
            end if;
        else 
            buf_V_5_d1 <= "XXXXXXXX";
        end if; 
    end process;


    buf_V_5_we1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln1027_reg_733, cmp_i_i422_i_read_reg_706, cmp_i_i422_i, ap_block_pp0_stage0_11001, bottom_V_read_reg_710)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (cmp_i_i422_i = ap_const_lv1_1) and (icmp_ln1027_reg_733 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (bottom_V_read_reg_710 = ap_const_lv2_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (cmp_i_i422_i_read_reg_706 = ap_const_lv1_0) and (icmp_ln1027_reg_733 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (bottom_V_read_reg_710 = ap_const_lv2_1)))) then 
            buf_V_5_we1 <= ap_const_logic_1;
        else 
            buf_V_5_we1 <= ap_const_logic_0;
        end if; 
    end process;

    buf_V_6_address0 <= zext_ln541_4_fu_406_p1(11 - 1 downto 0);

    buf_V_6_address1_assign_proc : process(cmp_i_i422_i_read_reg_706, cmp_i_i422_i, zext_ln541_3_fu_394_p1, zext_ln541_fu_400_p1, ap_condition_518)
    begin
        if ((ap_const_boolean_1 = ap_condition_518)) then
            if ((cmp_i_i422_i = ap_const_lv1_1)) then 
                buf_V_6_address1 <= zext_ln541_fu_400_p1(11 - 1 downto 0);
            elsif ((cmp_i_i422_i_read_reg_706 = ap_const_lv1_0)) then 
                buf_V_6_address1 <= zext_ln541_3_fu_394_p1(11 - 1 downto 0);
            else 
                buf_V_6_address1 <= "XXXXXXXXXXX";
            end if;
        else 
            buf_V_6_address1 <= "XXXXXXXXXXX";
        end if; 
    end process;


    buf_V_6_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            buf_V_6_ce0 <= ap_const_logic_1;
        else 
            buf_V_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buf_V_6_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln1027_reg_733, cmp_i_i422_i_read_reg_706, cmp_i_i422_i, ap_block_pp0_stage0_11001, bottom_V_read_reg_710)
    begin
        if (((not((bottom_V_read_reg_710 = ap_const_lv2_0)) and not((bottom_V_read_reg_710 = ap_const_lv2_1)) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (cmp_i_i422_i = ap_const_lv1_1) and (icmp_ln1027_reg_733 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or (not((bottom_V_read_reg_710 = ap_const_lv2_0)) and not((bottom_V_read_reg_710 = ap_const_lv2_1)) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (cmp_i_i422_i_read_reg_706 = ap_const_lv1_0) and (icmp_ln1027_reg_733 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            buf_V_6_ce1 <= ap_const_logic_1;
        else 
            buf_V_6_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    buf_V_6_d1_assign_proc : process(in_mat_data1_dout, cmp_i_i422_i_read_reg_706, cmp_i_i422_i, ap_condition_518)
    begin
        if ((ap_const_boolean_1 = ap_condition_518)) then
            if ((cmp_i_i422_i = ap_const_lv1_1)) then 
                buf_V_6_d1 <= in_mat_data1_dout;
            elsif ((cmp_i_i422_i_read_reg_706 = ap_const_lv1_0)) then 
                buf_V_6_d1 <= ap_const_lv8_0;
            else 
                buf_V_6_d1 <= "XXXXXXXX";
            end if;
        else 
            buf_V_6_d1 <= "XXXXXXXX";
        end if; 
    end process;


    buf_V_6_we1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln1027_reg_733, cmp_i_i422_i_read_reg_706, cmp_i_i422_i, ap_block_pp0_stage0_11001, bottom_V_read_reg_710)
    begin
        if (((not((bottom_V_read_reg_710 = ap_const_lv2_0)) and not((bottom_V_read_reg_710 = ap_const_lv2_1)) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (cmp_i_i422_i = ap_const_lv1_1) and (icmp_ln1027_reg_733 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or (not((bottom_V_read_reg_710 = ap_const_lv2_0)) and not((bottom_V_read_reg_710 = ap_const_lv2_1)) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (cmp_i_i422_i_read_reg_706 = ap_const_lv1_0) and (icmp_ln1027_reg_733 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            buf_V_6_we1 <= ap_const_logic_1;
        else 
            buf_V_6_we1 <= ap_const_logic_0;
        end if; 
    end process;

    buf_V_address0 <= zext_ln541_4_fu_406_p1(11 - 1 downto 0);

    buf_V_address1_assign_proc : process(cmp_i_i422_i_read_reg_706, cmp_i_i422_i, zext_ln541_3_fu_394_p1, zext_ln541_fu_400_p1, ap_condition_521)
    begin
        if ((ap_const_boolean_1 = ap_condition_521)) then
            if ((cmp_i_i422_i = ap_const_lv1_1)) then 
                buf_V_address1 <= zext_ln541_fu_400_p1(11 - 1 downto 0);
            elsif ((cmp_i_i422_i_read_reg_706 = ap_const_lv1_0)) then 
                buf_V_address1 <= zext_ln541_3_fu_394_p1(11 - 1 downto 0);
            else 
                buf_V_address1 <= "XXXXXXXXXXX";
            end if;
        else 
            buf_V_address1 <= "XXXXXXXXXXX";
        end if; 
    end process;


    buf_V_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            buf_V_ce0 <= ap_const_logic_1;
        else 
            buf_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buf_V_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln1027_reg_733, cmp_i_i422_i_read_reg_706, cmp_i_i422_i, ap_block_pp0_stage0_11001, bottom_V_read_reg_710)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (cmp_i_i422_i = ap_const_lv1_1) and (icmp_ln1027_reg_733 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (bottom_V_read_reg_710 = ap_const_lv2_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (cmp_i_i422_i_read_reg_706 = ap_const_lv1_0) and (icmp_ln1027_reg_733 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (bottom_V_read_reg_710 = ap_const_lv2_0)))) then 
            buf_V_ce1 <= ap_const_logic_1;
        else 
            buf_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    buf_V_d1_assign_proc : process(in_mat_data1_dout, cmp_i_i422_i_read_reg_706, cmp_i_i422_i, ap_condition_521)
    begin
        if ((ap_const_boolean_1 = ap_condition_521)) then
            if ((cmp_i_i422_i = ap_const_lv1_1)) then 
                buf_V_d1 <= in_mat_data1_dout;
            elsif ((cmp_i_i422_i_read_reg_706 = ap_const_lv1_0)) then 
                buf_V_d1 <= ap_const_lv8_0;
            else 
                buf_V_d1 <= "XXXXXXXX";
            end if;
        else 
            buf_V_d1 <= "XXXXXXXX";
        end if; 
    end process;


    buf_V_we1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln1027_reg_733, cmp_i_i422_i_read_reg_706, cmp_i_i422_i, ap_block_pp0_stage0_11001, bottom_V_read_reg_710)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (cmp_i_i422_i = ap_const_lv1_1) and (icmp_ln1027_reg_733 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (bottom_V_read_reg_710 = ap_const_lv2_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (cmp_i_i422_i_read_reg_706 = ap_const_lv1_0) and (icmp_ln1027_reg_733 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (bottom_V_read_reg_710 = ap_const_lv2_0)))) then 
            buf_V_we1 <= ap_const_logic_1;
        else 
            buf_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    cmp_i_i422_i_read_reg_706 <= cmp_i_i422_i;
    col_V_10_fu_383_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_col_V_9) + unsigned(ap_const_lv13_1));

    gaussian_mat_data1_blk_n_assign_proc : process(ap_enable_reg_pp0_iter4, gaussian_mat_data1_full_n, icmp_ln1019_7_reg_752_pp0_iter3_reg, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln1019_7_reg_752_pp0_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            gaussian_mat_data1_blk_n <= gaussian_mat_data1_full_n;
        else 
            gaussian_mat_data1_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    gaussian_mat_data1_din <= g_x_V_reg_756;

    gaussian_mat_data1_write_assign_proc : process(ap_enable_reg_pp0_iter4, icmp_ln1019_7_reg_752_pp0_iter3_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln1019_7_reg_752_pp0_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            gaussian_mat_data1_write <= ap_const_logic_1;
        else 
            gaussian_mat_data1_write <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln1019_7_fu_412_p2 <= "1" when (col_V_9_reg_725_pp0_iter1_reg = ap_const_lv13_0) else "0";
    icmp_ln1027_fu_377_p2 <= "1" when (unsigned(zext_ln1027_fu_373_p1) < unsigned(img_width)) else "0";

    in_mat_data1_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, in_mat_data1_empty_n, ap_predicate_op56_read_state2, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_predicate_op56_read_state2 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            in_mat_data1_blk_n <= in_mat_data1_empty_n;
        else 
            in_mat_data1_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    in_mat_data1_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_predicate_op56_read_state2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_predicate_op56_read_state2 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            in_mat_data1_read <= ap_const_logic_1;
        else 
            in_mat_data1_read <= ap_const_logic_0;
        end if; 
    end process;

    m0_V_out <= m0_V_fu_110;

    m0_V_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln1027_reg_733_pp0_iter2_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln1027_reg_733_pp0_iter2_reg = ap_const_lv1_0))) then 
            m0_V_out_ap_vld <= ap_const_logic_1;
        else 
            m0_V_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    m1_V_out <= m1_V_fu_122;

    m1_V_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln1027_reg_733_pp0_iter2_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln1027_reg_733_pp0_iter2_reg = ap_const_lv1_0))) then 
            m1_V_out_ap_vld <= ap_const_logic_1;
        else 
            m1_V_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    t0_V_out <= t0_V_fu_106;

    t0_V_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln1027_reg_733_pp0_iter2_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln1027_reg_733_pp0_iter2_reg = ap_const_lv1_0))) then 
            t0_V_out_ap_vld <= ap_const_logic_1;
        else 
            t0_V_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    t1_V_out <= t1_V_fu_118;

    t1_V_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln1027_reg_733_pp0_iter2_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln1027_reg_733_pp0_iter2_reg = ap_const_lv1_0))) then 
            t1_V_out_ap_vld <= ap_const_logic_1;
        else 
            t1_V_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln1027_fu_373_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_col_V_9),16));
    zext_ln45_1_fu_478_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(src_buf1_V_xfExtractPixels_1_1_0_1_fu_320_ap_return),9));
    zext_ln45_2_fu_486_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(src_buf3_V_xfExtractPixels_1_1_0_1_fu_330_ap_return),9));
    zext_ln45_fu_474_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(t0_V_fu_106),9));
    zext_ln46_1_fu_496_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(A00_fu_490_p2),10));
    zext_ln46_fu_482_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(b0_V_fu_114),9));
    zext_ln47_fu_516_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(b1_V_fu_126),9));
    zext_ln48_1_fu_524_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(t1_V_fu_118),9));
    zext_ln48_fu_520_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m0_V_fu_110),9));
    zext_ln49_fu_506_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln49_fu_500_p2),10));
    zext_ln50_1_fu_538_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(src_buf2_V_xfExtractPixels_1_1_0_1_fu_325_ap_return),9));
    zext_ln50_2_fu_548_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln50_fu_542_p2),10));
    zext_ln50_fu_534_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln48_fu_528_p2),10));
    zext_ln52_1_fu_578_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(A1_fu_558_p3),12));
    zext_ln52_2_fu_582_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(A2_fu_566_p3),11));
    zext_ln52_3_fu_592_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln52_fu_586_p2),12));
    zext_ln52_fu_574_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(A0_fu_510_p2),11));
    zext_ln541_3_fu_394_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(col_V_9_reg_725),64));
    zext_ln541_4_fu_406_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(col_V_9_reg_725_pp0_iter1_reg),64));
    zext_ln541_fu_400_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(col_V_9_reg_725),64));
end behav;
