-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity image_thresholding_kernel01_image_thresholding_kernel01_Pipeline_VITIS_LOOP_26_2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_gmem0_AWVALID : OUT STD_LOGIC;
    m_axi_gmem0_AWREADY : IN STD_LOGIC;
    m_axi_gmem0_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem0_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem0_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_WVALID : OUT STD_LOGIC;
    m_axi_gmem0_WREADY : IN STD_LOGIC;
    m_axi_gmem0_WDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
    m_axi_gmem0_WSTRB : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_WLAST : OUT STD_LOGIC;
    m_axi_gmem0_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_ARVALID : OUT STD_LOGIC;
    m_axi_gmem0_ARREADY : IN STD_LOGIC;
    m_axi_gmem0_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem0_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem0_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_RVALID : IN STD_LOGIC;
    m_axi_gmem0_RREADY : OUT STD_LOGIC;
    m_axi_gmem0_RDATA : IN STD_LOGIC_VECTOR (15 downto 0);
    m_axi_gmem0_RLAST : IN STD_LOGIC;
    m_axi_gmem0_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_RFIFONUM : IN STD_LOGIC_VECTOR (9 downto 0);
    m_axi_gmem0_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_BVALID : IN STD_LOGIC;
    m_axi_gmem0_BREADY : OUT STD_LOGIC;
    m_axi_gmem0_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    sext_ln26 : IN STD_LOGIC_VECTOR (62 downto 0);
    threshold : IN STD_LOGIC_VECTOR (31 downto 0);
    trunc_ln1 : IN STD_LOGIC_VECTOR (7 downto 0);
    outBRAM_address0 : OUT STD_LOGIC_VECTOR (20 downto 0);
    outBRAM_ce0 : OUT STD_LOGIC;
    outBRAM_we0 : OUT STD_LOGIC;
    outBRAM_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    outBRAM_address1 : OUT STD_LOGIC_VECTOR (20 downto 0);
    outBRAM_ce1 : OUT STD_LOGIC;
    outBRAM_we1 : OUT STD_LOGIC;
    outBRAM_d1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of image_thresholding_kernel01_image_thresholding_kernel01_Pipeline_VITIS_LOOP_26_2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_pp0_stage4 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv21_0 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv21_1FA400 : STD_LOGIC_VECTOR (20 downto 0) := "111111010010000000000";
    constant ap_const_lv21_A : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000001010";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv21_1 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000001";
    constant ap_const_lv21_2 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000010";
    constant ap_const_lv21_3 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000011";
    constant ap_const_lv21_4 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000100";
    constant ap_const_lv21_5 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000101";
    constant ap_const_lv21_6 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000110";
    constant ap_const_lv21_7 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000111";
    constant ap_const_lv21_8 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000001000";
    constant ap_const_lv21_9 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000001001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal icmp_ln26_reg_584 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state7_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_condition_exit_pp0_iter0_stage1 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage4 : signal is "none";
    signal ap_block_state5_pp0_stage4_iter0 : BOOLEAN;
    signal ap_block_pp0_stage4_subdone : BOOLEAN;
    signal gmem0_blk_n_R : STD_LOGIC;
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal ap_block_pp0_stage4 : BOOLEAN;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal reg_212 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal ap_block_state3_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal ap_block_state4_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal ap_block_pp0_stage4_11001 : BOOLEAN;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal i_2_reg_564 : STD_LOGIC_VECTOR (20 downto 0);
    signal i_2_reg_564_pp0_iter1_reg : STD_LOGIC_VECTOR (20 downto 0);
    signal icmp_ln26_fu_234_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal input_pixel_reg_fu_240_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal input_pixel_reg_reg_588 : STD_LOGIC_VECTOR (7 downto 0);
    signal input_pixel_reg_2_fu_258_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal input_pixel_reg_2_reg_593 : STD_LOGIC_VECTOR (7 downto 0);
    signal input_pixel_reg_4_fu_315_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal input_pixel_reg_4_reg_598 : STD_LOGIC_VECTOR (7 downto 0);
    signal input_pixel_reg_6_fu_372_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal input_pixel_reg_6_reg_603 : STD_LOGIC_VECTOR (7 downto 0);
    signal input_pixel_reg_8_fu_429_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal input_pixel_reg_8_reg_608 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal i_cast_fu_254_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln15_fu_283_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln28_fu_310_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln15_1_fu_340_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln28_1_fu_367_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln15_2_fu_397_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln28_2_fu_424_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln15_3_fu_454_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln28_3_fu_481_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln15_4_fu_507_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_fu_86 : STD_LOGIC_VECTOR (20 downto 0);
    signal add_ln26_4_fu_244_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_i_2 : STD_LOGIC_VECTOR (20 downto 0);
    signal output_pixel_req_fu_270_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal output_pixel_req_1_fu_297_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal output_pixel_req_2_fu_327_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal output_pixel_req_3_fu_354_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal output_pixel_req_4_fu_384_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal output_pixel_req_5_fu_411_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal output_pixel_req_6_fu_441_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal output_pixel_req_7_fu_468_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal output_pixel_req_8_fu_494_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal output_pixel_req_9_fu_521_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln29_fu_262_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln29_fu_265_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln26_fu_278_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal zext_ln29_1_fu_288_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln29_1_fu_292_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln28_fu_305_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal zext_ln29_2_fu_319_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln29_2_fu_322_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln26_fu_335_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal zext_ln29_3_fu_345_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln29_3_fu_349_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln28_1_fu_362_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal zext_ln29_4_fu_376_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln29_4_fu_379_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln26_1_fu_392_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal zext_ln29_5_fu_402_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln29_5_fu_406_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln28_2_fu_419_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal zext_ln29_6_fu_433_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln29_6_fu_436_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln26_2_fu_449_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal zext_ln29_7_fu_459_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln29_7_fu_463_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln28_3_fu_476_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal zext_ln29_8_fu_486_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln29_8_fu_489_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln26_3_fu_502_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal zext_ln29_9_fu_512_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln29_9_fu_516_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_idle_pp0_1to1 : STD_LOGIC;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component image_thresholding_kernel01_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component image_thresholding_kernel01_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage1,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage1)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    i_fu_86_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                i_fu_86 <= ap_const_lv21_0;
            elsif (((icmp_ln26_reg_584 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
                i_fu_86 <= add_ln26_4_fu_244_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                i_2_reg_564 <= ap_sig_allocacmp_i_2;
                i_2_reg_564_pp0_iter1_reg <= i_2_reg_564;
                icmp_ln26_reg_584 <= icmp_ln26_fu_234_p2;
                input_pixel_reg_8_reg_608 <= input_pixel_reg_8_fu_429_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln26_reg_584 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then
                input_pixel_reg_2_reg_593 <= input_pixel_reg_2_fu_258_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln26_reg_584 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001))) then
                input_pixel_reg_4_reg_598 <= input_pixel_reg_4_fu_315_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln26_reg_584 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001))) then
                input_pixel_reg_6_reg_603 <= input_pixel_reg_6_fu_372_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln26_reg_584 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                input_pixel_reg_reg_588 <= input_pixel_reg_fu_240_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((icmp_ln26_reg_584 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((icmp_ln26_reg_584 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((icmp_ln26_reg_584 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((icmp_ln26_reg_584 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then
                reg_212 <= m_axi_gmem0_RDATA(15 downto 8);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage1_subdone, ap_condition_exit_pp0_iter0_stage1, ap_block_pp0_stage4_subdone, ap_block_pp0_stage0_subdone, ap_idle_pp0_1to1, ap_block_pp0_stage2_subdone, ap_block_pp0_stage3_subdone, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_start_int = ap_const_logic_0) and (ap_idle_pp0_1to1 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage1)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_pp0_stage4 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage4_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    add_ln26_1_fu_392_p2 <= std_logic_vector(unsigned(i_2_reg_564) + unsigned(ap_const_lv21_5));
    add_ln26_2_fu_449_p2 <= std_logic_vector(unsigned(i_2_reg_564) + unsigned(ap_const_lv21_7));
    add_ln26_3_fu_502_p2 <= std_logic_vector(unsigned(i_2_reg_564_pp0_iter1_reg) + unsigned(ap_const_lv21_9));
    add_ln26_4_fu_244_p2 <= std_logic_vector(unsigned(i_2_reg_564) + unsigned(ap_const_lv21_A));
    add_ln26_fu_335_p2 <= std_logic_vector(unsigned(i_2_reg_564) + unsigned(ap_const_lv21_3));
    add_ln28_1_fu_362_p2 <= std_logic_vector(unsigned(i_2_reg_564) + unsigned(ap_const_lv21_4));
    add_ln28_2_fu_419_p2 <= std_logic_vector(unsigned(i_2_reg_564) + unsigned(ap_const_lv21_6));
    add_ln28_3_fu_476_p2 <= std_logic_vector(unsigned(i_2_reg_564_pp0_iter1_reg) + unsigned(ap_const_lv21_8));
    add_ln28_fu_305_p2 <= std_logic_vector(unsigned(i_2_reg_564) + unsigned(ap_const_lv21_2));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage4 <= ap_CS_fsm(4);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, m_axi_gmem0_RVALID)
    begin
                ap_block_pp0_stage0_11001 <= ((m_axi_gmem0_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, m_axi_gmem0_RVALID)
    begin
                ap_block_pp0_stage0_subdone <= ((m_axi_gmem0_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;

        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage1_11001_assign_proc : process(ap_enable_reg_pp0_iter0, m_axi_gmem0_RVALID, icmp_ln26_reg_584)
    begin
                ap_block_pp0_stage1_11001 <= ((icmp_ln26_reg_584 = ap_const_lv1_1) and (m_axi_gmem0_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage1_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, m_axi_gmem0_RVALID, icmp_ln26_reg_584)
    begin
                ap_block_pp0_stage1_subdone <= ((icmp_ln26_reg_584 = ap_const_lv1_1) and (m_axi_gmem0_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;

        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage2_11001_assign_proc : process(ap_enable_reg_pp0_iter0, m_axi_gmem0_RVALID, icmp_ln26_reg_584)
    begin
                ap_block_pp0_stage2_11001 <= ((icmp_ln26_reg_584 = ap_const_lv1_1) and (m_axi_gmem0_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage2_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, m_axi_gmem0_RVALID, icmp_ln26_reg_584)
    begin
                ap_block_pp0_stage2_subdone <= ((icmp_ln26_reg_584 = ap_const_lv1_1) and (m_axi_gmem0_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;

        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage3_11001_assign_proc : process(ap_enable_reg_pp0_iter0, m_axi_gmem0_RVALID, icmp_ln26_reg_584)
    begin
                ap_block_pp0_stage3_11001 <= ((icmp_ln26_reg_584 = ap_const_lv1_1) and (m_axi_gmem0_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage3_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, m_axi_gmem0_RVALID, icmp_ln26_reg_584)
    begin
                ap_block_pp0_stage3_subdone <= ((icmp_ln26_reg_584 = ap_const_lv1_1) and (m_axi_gmem0_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;

        ap_block_pp0_stage4 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage4_11001_assign_proc : process(ap_enable_reg_pp0_iter0, m_axi_gmem0_RVALID, icmp_ln26_reg_584)
    begin
                ap_block_pp0_stage4_11001 <= ((icmp_ln26_reg_584 = ap_const_lv1_1) and (m_axi_gmem0_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage4_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, m_axi_gmem0_RVALID, icmp_ln26_reg_584)
    begin
                ap_block_pp0_stage4_subdone <= ((icmp_ln26_reg_584 = ap_const_lv1_1) and (m_axi_gmem0_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;

        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state2_pp0_stage1_iter0_assign_proc : process(m_axi_gmem0_RVALID, icmp_ln26_reg_584)
    begin
                ap_block_state2_pp0_stage1_iter0 <= ((icmp_ln26_reg_584 = ap_const_lv1_1) and (m_axi_gmem0_RVALID = ap_const_logic_0));
    end process;


    ap_block_state3_pp0_stage2_iter0_assign_proc : process(m_axi_gmem0_RVALID, icmp_ln26_reg_584)
    begin
                ap_block_state3_pp0_stage2_iter0 <= ((icmp_ln26_reg_584 = ap_const_lv1_1) and (m_axi_gmem0_RVALID = ap_const_logic_0));
    end process;


    ap_block_state4_pp0_stage3_iter0_assign_proc : process(m_axi_gmem0_RVALID, icmp_ln26_reg_584)
    begin
                ap_block_state4_pp0_stage3_iter0 <= ((icmp_ln26_reg_584 = ap_const_lv1_1) and (m_axi_gmem0_RVALID = ap_const_logic_0));
    end process;


    ap_block_state5_pp0_stage4_iter0_assign_proc : process(m_axi_gmem0_RVALID, icmp_ln26_reg_584)
    begin
                ap_block_state5_pp0_stage4_iter0 <= ((icmp_ln26_reg_584 = ap_const_lv1_1) and (m_axi_gmem0_RVALID = ap_const_logic_0));
    end process;


    ap_block_state6_pp0_stage0_iter1_assign_proc : process(m_axi_gmem0_RVALID)
    begin
                ap_block_state6_pp0_stage0_iter1 <= (m_axi_gmem0_RVALID = ap_const_logic_0);
    end process;

        ap_block_state7_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, icmp_ln26_reg_584, ap_block_pp0_stage1_subdone)
    begin
        if (((icmp_ln26_reg_584 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
            ap_condition_exit_pp0_iter0_stage1 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to1_assign_proc : process(ap_enable_reg_pp0_iter1)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_0)) then 
            ap_idle_pp0_1to1 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to1 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage1;

    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_subdone)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_subdone))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_2_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, i_fu_86, ap_loop_init)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_sig_allocacmp_i_2 <= ap_const_lv21_0;
        else 
            ap_sig_allocacmp_i_2 <= i_fu_86;
        end if; 
    end process;


    gmem0_blk_n_R_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, m_axi_gmem0_RVALID, icmp_ln26_reg_584, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3, ap_block_pp0_stage4, ap_block_pp0_stage0)
    begin
        if ((((icmp_ln26_reg_584 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1)) or ((icmp_ln26_reg_584 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3)) or ((icmp_ln26_reg_584 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2)) or ((icmp_ln26_reg_584 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0)))) then 
            gmem0_blk_n_R <= m_axi_gmem0_RVALID;
        else 
            gmem0_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

    i_cast_fu_254_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_2_reg_564),64));
    icmp_ln26_fu_234_p2 <= "1" when (unsigned(ap_sig_allocacmp_i_2) < unsigned(ap_const_lv21_1FA400)) else "0";
    icmp_ln29_1_fu_292_p2 <= "1" when (unsigned(zext_ln29_1_fu_288_p1) > unsigned(threshold)) else "0";
    icmp_ln29_2_fu_322_p2 <= "1" when (unsigned(zext_ln29_2_fu_319_p1) > unsigned(threshold)) else "0";
    icmp_ln29_3_fu_349_p2 <= "1" when (unsigned(zext_ln29_3_fu_345_p1) > unsigned(threshold)) else "0";
    icmp_ln29_4_fu_379_p2 <= "1" when (unsigned(zext_ln29_4_fu_376_p1) > unsigned(threshold)) else "0";
    icmp_ln29_5_fu_406_p2 <= "1" when (unsigned(zext_ln29_5_fu_402_p1) > unsigned(threshold)) else "0";
    icmp_ln29_6_fu_436_p2 <= "1" when (unsigned(zext_ln29_6_fu_433_p1) > unsigned(threshold)) else "0";
    icmp_ln29_7_fu_463_p2 <= "1" when (unsigned(zext_ln29_7_fu_459_p1) > unsigned(threshold)) else "0";
    icmp_ln29_8_fu_489_p2 <= "1" when (unsigned(zext_ln29_8_fu_486_p1) > unsigned(threshold)) else "0";
    icmp_ln29_9_fu_516_p2 <= "1" when (unsigned(zext_ln29_9_fu_512_p1) > unsigned(threshold)) else "0";
    icmp_ln29_fu_265_p2 <= "1" when (unsigned(zext_ln29_fu_262_p1) > unsigned(threshold)) else "0";
    input_pixel_reg_2_fu_258_p1 <= m_axi_gmem0_RDATA(8 - 1 downto 0);
    input_pixel_reg_4_fu_315_p1 <= m_axi_gmem0_RDATA(8 - 1 downto 0);
    input_pixel_reg_6_fu_372_p1 <= m_axi_gmem0_RDATA(8 - 1 downto 0);
    input_pixel_reg_8_fu_429_p1 <= m_axi_gmem0_RDATA(8 - 1 downto 0);
    input_pixel_reg_fu_240_p1 <= m_axi_gmem0_RDATA(8 - 1 downto 0);
    m_axi_gmem0_ARADDR <= ap_const_lv64_0;
    m_axi_gmem0_ARBURST <= ap_const_lv2_0;
    m_axi_gmem0_ARCACHE <= ap_const_lv4_0;
    m_axi_gmem0_ARID <= ap_const_lv1_0;
    m_axi_gmem0_ARLEN <= ap_const_lv32_0;
    m_axi_gmem0_ARLOCK <= ap_const_lv2_0;
    m_axi_gmem0_ARPROT <= ap_const_lv3_0;
    m_axi_gmem0_ARQOS <= ap_const_lv4_0;
    m_axi_gmem0_ARREGION <= ap_const_lv4_0;
    m_axi_gmem0_ARSIZE <= ap_const_lv3_0;
    m_axi_gmem0_ARUSER <= ap_const_lv1_0;
    m_axi_gmem0_ARVALID <= ap_const_logic_0;
    m_axi_gmem0_AWADDR <= ap_const_lv64_0;
    m_axi_gmem0_AWBURST <= ap_const_lv2_0;
    m_axi_gmem0_AWCACHE <= ap_const_lv4_0;
    m_axi_gmem0_AWID <= ap_const_lv1_0;
    m_axi_gmem0_AWLEN <= ap_const_lv32_0;
    m_axi_gmem0_AWLOCK <= ap_const_lv2_0;
    m_axi_gmem0_AWPROT <= ap_const_lv3_0;
    m_axi_gmem0_AWQOS <= ap_const_lv4_0;
    m_axi_gmem0_AWREGION <= ap_const_lv4_0;
    m_axi_gmem0_AWSIZE <= ap_const_lv3_0;
    m_axi_gmem0_AWUSER <= ap_const_lv1_0;
    m_axi_gmem0_AWVALID <= ap_const_logic_0;
    m_axi_gmem0_BREADY <= ap_const_logic_0;

    m_axi_gmem0_RREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, icmp_ln26_reg_584, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage1_11001, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001, ap_block_pp0_stage4_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((icmp_ln26_reg_584 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((icmp_ln26_reg_584 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((icmp_ln26_reg_584 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((icmp_ln26_reg_584 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            m_axi_gmem0_RREADY <= ap_const_logic_1;
        else 
            m_axi_gmem0_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem0_WDATA <= ap_const_lv16_0;
    m_axi_gmem0_WID <= ap_const_lv1_0;
    m_axi_gmem0_WLAST <= ap_const_logic_0;
    m_axi_gmem0_WSTRB <= ap_const_lv2_0;
    m_axi_gmem0_WUSER <= ap_const_lv1_0;
    m_axi_gmem0_WVALID <= ap_const_logic_0;
    or_ln26_fu_278_p2 <= (i_2_reg_564 or ap_const_lv21_1);

    outBRAM_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3, ap_block_pp0_stage4, ap_block_pp0_stage0, zext_ln15_fu_283_p1, zext_ln15_1_fu_340_p1, zext_ln15_2_fu_397_p1, zext_ln15_3_fu_454_p1, zext_ln15_4_fu_507_p1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            outBRAM_address0 <= zext_ln15_4_fu_507_p1(21 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            outBRAM_address0 <= zext_ln15_3_fu_454_p1(21 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4))) then 
            outBRAM_address0 <= zext_ln15_2_fu_397_p1(21 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3))) then 
            outBRAM_address0 <= zext_ln15_1_fu_340_p1(21 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2))) then 
            outBRAM_address0 <= zext_ln15_fu_283_p1(21 - 1 downto 0);
        else 
            outBRAM_address0 <= "XXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    outBRAM_address1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3, ap_block_pp0_stage4, ap_block_pp0_stage0, i_cast_fu_254_p1, zext_ln28_fu_310_p1, zext_ln28_1_fu_367_p1, zext_ln28_2_fu_424_p1, zext_ln28_3_fu_481_p1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            outBRAM_address1 <= zext_ln28_3_fu_481_p1(21 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            outBRAM_address1 <= zext_ln28_2_fu_424_p1(21 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4))) then 
            outBRAM_address1 <= zext_ln28_1_fu_367_p1(21 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3))) then 
            outBRAM_address1 <= zext_ln28_fu_310_p1(21 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2))) then 
            outBRAM_address1 <= i_cast_fu_254_p1(21 - 1 downto 0);
        else 
            outBRAM_address1 <= "XXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    outBRAM_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage1_11001, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001, ap_block_pp0_stage4_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            outBRAM_ce0 <= ap_const_logic_1;
        else 
            outBRAM_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    outBRAM_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage1_11001, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001, ap_block_pp0_stage4_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            outBRAM_ce1 <= ap_const_logic_1;
        else 
            outBRAM_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    outBRAM_d0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3, ap_block_pp0_stage4, ap_block_pp0_stage0, output_pixel_req_1_fu_297_p3, output_pixel_req_3_fu_354_p3, output_pixel_req_5_fu_411_p3, output_pixel_req_7_fu_468_p3, output_pixel_req_9_fu_521_p3)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            outBRAM_d0 <= output_pixel_req_9_fu_521_p3;
        elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            outBRAM_d0 <= output_pixel_req_7_fu_468_p3;
        elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4))) then 
            outBRAM_d0 <= output_pixel_req_5_fu_411_p3;
        elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3))) then 
            outBRAM_d0 <= output_pixel_req_3_fu_354_p3;
        elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2))) then 
            outBRAM_d0 <= output_pixel_req_1_fu_297_p3;
        else 
            outBRAM_d0 <= "XXXXXXXX";
        end if; 
    end process;


    outBRAM_d1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3, ap_block_pp0_stage4, ap_block_pp0_stage0, output_pixel_req_fu_270_p3, output_pixel_req_2_fu_327_p3, output_pixel_req_4_fu_384_p3, output_pixel_req_6_fu_441_p3, output_pixel_req_8_fu_494_p3)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            outBRAM_d1 <= output_pixel_req_8_fu_494_p3;
        elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            outBRAM_d1 <= output_pixel_req_6_fu_441_p3;
        elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4))) then 
            outBRAM_d1 <= output_pixel_req_4_fu_384_p3;
        elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3))) then 
            outBRAM_d1 <= output_pixel_req_2_fu_327_p3;
        elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2))) then 
            outBRAM_d1 <= output_pixel_req_fu_270_p3;
        else 
            outBRAM_d1 <= "XXXXXXXX";
        end if; 
    end process;


    outBRAM_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, icmp_ln26_reg_584, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage1_11001, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001, ap_block_pp0_stage4_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((icmp_ln26_reg_584 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((icmp_ln26_reg_584 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((icmp_ln26_reg_584 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            outBRAM_we0 <= ap_const_logic_1;
        else 
            outBRAM_we0 <= ap_const_logic_0;
        end if; 
    end process;


    outBRAM_we1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, icmp_ln26_reg_584, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage1_11001, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001, ap_block_pp0_stage4_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((icmp_ln26_reg_584 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((icmp_ln26_reg_584 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((icmp_ln26_reg_584 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            outBRAM_we1 <= ap_const_logic_1;
        else 
            outBRAM_we1 <= ap_const_logic_0;
        end if; 
    end process;

    output_pixel_req_1_fu_297_p3 <= 
        trunc_ln1 when (icmp_ln29_1_fu_292_p2(0) = '1') else 
        ap_const_lv8_0;
    output_pixel_req_2_fu_327_p3 <= 
        trunc_ln1 when (icmp_ln29_2_fu_322_p2(0) = '1') else 
        ap_const_lv8_0;
    output_pixel_req_3_fu_354_p3 <= 
        trunc_ln1 when (icmp_ln29_3_fu_349_p2(0) = '1') else 
        ap_const_lv8_0;
    output_pixel_req_4_fu_384_p3 <= 
        trunc_ln1 when (icmp_ln29_4_fu_379_p2(0) = '1') else 
        ap_const_lv8_0;
    output_pixel_req_5_fu_411_p3 <= 
        trunc_ln1 when (icmp_ln29_5_fu_406_p2(0) = '1') else 
        ap_const_lv8_0;
    output_pixel_req_6_fu_441_p3 <= 
        trunc_ln1 when (icmp_ln29_6_fu_436_p2(0) = '1') else 
        ap_const_lv8_0;
    output_pixel_req_7_fu_468_p3 <= 
        trunc_ln1 when (icmp_ln29_7_fu_463_p2(0) = '1') else 
        ap_const_lv8_0;
    output_pixel_req_8_fu_494_p3 <= 
        trunc_ln1 when (icmp_ln29_8_fu_489_p2(0) = '1') else 
        ap_const_lv8_0;
    output_pixel_req_9_fu_521_p3 <= 
        trunc_ln1 when (icmp_ln29_9_fu_516_p2(0) = '1') else 
        ap_const_lv8_0;
    output_pixel_req_fu_270_p3 <= 
        trunc_ln1 when (icmp_ln29_fu_265_p2(0) = '1') else 
        ap_const_lv8_0;
    zext_ln15_1_fu_340_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln26_fu_335_p2),64));
    zext_ln15_2_fu_397_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln26_1_fu_392_p2),64));
    zext_ln15_3_fu_454_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln26_2_fu_449_p2),64));
    zext_ln15_4_fu_507_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln26_3_fu_502_p2),64));
    zext_ln15_fu_283_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln26_fu_278_p2),64));
    zext_ln28_1_fu_367_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln28_1_fu_362_p2),64));
    zext_ln28_2_fu_424_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln28_2_fu_419_p2),64));
    zext_ln28_3_fu_481_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln28_3_fu_476_p2),64));
    zext_ln28_fu_310_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln28_fu_305_p2),64));
    zext_ln29_1_fu_288_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_212),32));
    zext_ln29_2_fu_319_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input_pixel_reg_2_reg_593),32));
    zext_ln29_3_fu_345_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_212),32));
    zext_ln29_4_fu_376_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input_pixel_reg_4_reg_598),32));
    zext_ln29_5_fu_402_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_212),32));
    zext_ln29_6_fu_433_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input_pixel_reg_6_reg_603),32));
    zext_ln29_7_fu_459_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_212),32));
    zext_ln29_8_fu_486_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input_pixel_reg_8_reg_608),32));
    zext_ln29_9_fu_512_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_212),32));
    zext_ln29_fu_262_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input_pixel_reg_reg_588),32));
end behav;
