-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity gaussian_filter_accel_GaussianBlur_3_0_0_2160_3840_1_2_2_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    p_src_rows_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    p_src_rows_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    p_src_rows_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    p_src_rows_empty_n : IN STD_LOGIC;
    p_src_rows_read : OUT STD_LOGIC;
    p_src_cols_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    p_src_cols_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    p_src_cols_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    p_src_cols_empty_n : IN STD_LOGIC;
    p_src_cols_read : OUT STD_LOGIC;
    in_mat_data1_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    in_mat_data1_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    in_mat_data1_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    in_mat_data1_empty_n : IN STD_LOGIC;
    in_mat_data1_read : OUT STD_LOGIC;
    out_mat_data2_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_mat_data2_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    out_mat_data2_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    out_mat_data2_full_n : IN STD_LOGIC;
    out_mat_data2_write : OUT STD_LOGIC;
    sigma_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    sigma_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    sigma_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    sigma_empty_n : IN STD_LOGIC;
    sigma_read : OUT STD_LOGIC );
end;


architecture behav of gaussian_filter_accel_GaussianBlur_3_0_0_2160_3840_1_2_2_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (37 downto 0) := "00000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (37 downto 0) := "00000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (37 downto 0) := "00000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (37 downto 0) := "00000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (37 downto 0) := "00000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (37 downto 0) := "00000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (37 downto 0) := "00001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (37 downto 0) := "00010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (37 downto 0) := "00100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (37 downto 0) := "01000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (37 downto 0) := "10000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_40000000 : STD_LOGIC_VECTOR (31 downto 0) := "01000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_3F800000 : STD_LOGIC_VECTOR (31 downto 0) := "00111111100000000000000000000000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv32_3F4CCCCD : STD_LOGIC_VECTOR (31 downto 0) := "00111111010011001100110011001101";
    constant ap_const_lv32_80000000 : STD_LOGIC_VECTOR (31 downto 0) := "10000000000000000000000000000000";
    constant ap_const_lv5_5 : STD_LOGIC_VECTOR (4 downto 0) := "00101";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal p_src_rows_blk_n : STD_LOGIC;
    signal p_src_cols_blk_n : STD_LOGIC;
    signal sigma_blk_n : STD_LOGIC;
    signal grp_fu_123_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_140 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal sigma_read_reg_247 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln1312_fu_146_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln1312_reg_254 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln1312_1_fu_150_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln1312_1_reg_259 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln40_fu_195_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln40_reg_264 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal scale2X_fu_212_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal scale2X_reg_270 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal grp_fu_128_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_reg_278 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal cf_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal cf_ce0 : STD_LOGIC;
    signal cf_we0 : STD_LOGIC;
    signal cf_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal cf_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_GaussianBlur_3_0_0_2160_3840_1_2_2_Pipeline_VITIS_LOOP_48_1_fu_96_ap_start : STD_LOGIC;
    signal grp_GaussianBlur_3_0_0_2160_3840_1_2_2_Pipeline_VITIS_LOOP_48_1_fu_96_ap_done : STD_LOGIC;
    signal grp_GaussianBlur_3_0_0_2160_3840_1_2_2_Pipeline_VITIS_LOOP_48_1_fu_96_ap_idle : STD_LOGIC;
    signal grp_GaussianBlur_3_0_0_2160_3840_1_2_2_Pipeline_VITIS_LOOP_48_1_fu_96_ap_ready : STD_LOGIC;
    signal grp_GaussianBlur_3_0_0_2160_3840_1_2_2_Pipeline_VITIS_LOOP_48_1_fu_96_cf_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_GaussianBlur_3_0_0_2160_3840_1_2_2_Pipeline_VITIS_LOOP_48_1_fu_96_cf_ce0 : STD_LOGIC;
    signal grp_GaussianBlur_3_0_0_2160_3840_1_2_2_Pipeline_VITIS_LOOP_48_1_fu_96_cf_we0 : STD_LOGIC;
    signal grp_GaussianBlur_3_0_0_2160_3840_1_2_2_Pipeline_VITIS_LOOP_48_1_fu_96_cf_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_GaussianBlur_3_0_0_2160_3840_1_2_2_Pipeline_VITIS_LOOP_48_1_fu_96_sum_1_out : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_GaussianBlur_3_0_0_2160_3840_1_2_2_Pipeline_VITIS_LOOP_48_1_fu_96_sum_1_out_ap_vld : STD_LOGIC;
    signal grp_GaussianBlur_3_0_0_2160_3840_1_2_2_Pipeline_VITIS_LOOP_48_1_fu_96_grp_fu_289_p_din0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_GaussianBlur_3_0_0_2160_3840_1_2_2_Pipeline_VITIS_LOOP_48_1_fu_96_grp_fu_289_p_din1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_GaussianBlur_3_0_0_2160_3840_1_2_2_Pipeline_VITIS_LOOP_48_1_fu_96_grp_fu_289_p_opcode : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_GaussianBlur_3_0_0_2160_3840_1_2_2_Pipeline_VITIS_LOOP_48_1_fu_96_grp_fu_289_p_ce : STD_LOGIC;
    signal grp_GaussianBlur_3_0_0_2160_3840_1_2_2_Pipeline_VITIS_LOOP_48_1_fu_96_grp_fu_123_p_din0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_GaussianBlur_3_0_0_2160_3840_1_2_2_Pipeline_VITIS_LOOP_48_1_fu_96_grp_fu_123_p_din1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_GaussianBlur_3_0_0_2160_3840_1_2_2_Pipeline_VITIS_LOOP_48_1_fu_96_grp_fu_123_p_ce : STD_LOGIC;
    signal grp_GaussianBlur_3_0_0_2160_3840_1_2_2_Pipeline_VITIS_LOOP_58_2_fu_103_ap_start : STD_LOGIC;
    signal grp_GaussianBlur_3_0_0_2160_3840_1_2_2_Pipeline_VITIS_LOOP_58_2_fu_103_ap_done : STD_LOGIC;
    signal grp_GaussianBlur_3_0_0_2160_3840_1_2_2_Pipeline_VITIS_LOOP_58_2_fu_103_ap_idle : STD_LOGIC;
    signal grp_GaussianBlur_3_0_0_2160_3840_1_2_2_Pipeline_VITIS_LOOP_58_2_fu_103_ap_ready : STD_LOGIC;
    signal grp_GaussianBlur_3_0_0_2160_3840_1_2_2_Pipeline_VITIS_LOOP_58_2_fu_103_cf_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_GaussianBlur_3_0_0_2160_3840_1_2_2_Pipeline_VITIS_LOOP_58_2_fu_103_cf_ce0 : STD_LOGIC;
    signal grp_GaussianBlur_3_0_0_2160_3840_1_2_2_Pipeline_VITIS_LOOP_58_2_fu_103_cf_we0 : STD_LOGIC;
    signal grp_GaussianBlur_3_0_0_2160_3840_1_2_2_Pipeline_VITIS_LOOP_58_2_fu_103_cf_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_GaussianBlur_3_0_0_2160_3840_1_2_2_Pipeline_VITIS_LOOP_58_2_fu_103_weights_1_out : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_GaussianBlur_3_0_0_2160_3840_1_2_2_Pipeline_VITIS_LOOP_58_2_fu_103_weights_1_out_ap_vld : STD_LOGIC;
    signal grp_GaussianBlur_3_0_0_2160_3840_1_2_2_Pipeline_VITIS_LOOP_58_2_fu_103_weights_out : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_GaussianBlur_3_0_0_2160_3840_1_2_2_Pipeline_VITIS_LOOP_58_2_fu_103_weights_out_ap_vld : STD_LOGIC;
    signal grp_GaussianBlur_3_0_0_2160_3840_1_2_2_Pipeline_VITIS_LOOP_58_2_fu_103_grp_fu_289_p_din0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_GaussianBlur_3_0_0_2160_3840_1_2_2_Pipeline_VITIS_LOOP_58_2_fu_103_grp_fu_289_p_din1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_GaussianBlur_3_0_0_2160_3840_1_2_2_Pipeline_VITIS_LOOP_58_2_fu_103_grp_fu_289_p_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_GaussianBlur_3_0_0_2160_3840_1_2_2_Pipeline_VITIS_LOOP_58_2_fu_103_grp_fu_289_p_ce : STD_LOGIC;
    signal grp_GaussianBlur_3_0_0_2160_3840_1_2_2_Pipeline_VITIS_LOOP_58_2_fu_103_grp_fu_123_p_din0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_GaussianBlur_3_0_0_2160_3840_1_2_2_Pipeline_VITIS_LOOP_58_2_fu_103_grp_fu_123_p_din1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_GaussianBlur_3_0_0_2160_3840_1_2_2_Pipeline_VITIS_LOOP_58_2_fu_103_grp_fu_123_p_ce : STD_LOGIC;
    signal grp_xfGaussianFilter3x3_0_2160_3840_1_0_1_2_2_1_3840_s_fu_111_ap_start : STD_LOGIC;
    signal grp_xfGaussianFilter3x3_0_2160_3840_1_0_1_2_2_1_3840_s_fu_111_ap_done : STD_LOGIC;
    signal grp_xfGaussianFilter3x3_0_2160_3840_1_0_1_2_2_1_3840_s_fu_111_ap_idle : STD_LOGIC;
    signal grp_xfGaussianFilter3x3_0_2160_3840_1_0_1_2_2_1_3840_s_fu_111_ap_ready : STD_LOGIC;
    signal grp_xfGaussianFilter3x3_0_2160_3840_1_0_1_2_2_1_3840_s_fu_111_in_mat_data1_read : STD_LOGIC;
    signal grp_xfGaussianFilter3x3_0_2160_3840_1_0_1_2_2_1_3840_s_fu_111_out_mat_data2_din : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_xfGaussianFilter3x3_0_2160_3840_1_0_1_2_2_1_3840_s_fu_111_out_mat_data2_write : STD_LOGIC;
    signal grp_GaussianBlur_3_0_0_2160_3840_1_2_2_Pipeline_VITIS_LOOP_48_1_fu_96_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal grp_GaussianBlur_3_0_0_2160_3840_1_2_2_Pipeline_VITIS_LOOP_58_2_fu_103_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal grp_xfGaussianFilter3x3_0_2160_3840_1_0_1_2_2_1_3840_s_fu_111_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal ap_block_state1 : BOOLEAN;
    signal grp_fu_123_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_123_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal grp_fu_128_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal bitcast_ln40_fu_154_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_157_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln40_fu_167_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln40_1_fu_177_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln40_fu_171_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln40_fu_183_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_134_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln40_fu_189_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln46_fu_202_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln46_fu_206_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_123_ce : STD_LOGIC;
    signal grp_fu_134_ce : STD_LOGIC;
    signal grp_fu_289_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_289_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_289_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_289_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_289_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (37 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ST_fsm_state16_blk : STD_LOGIC;
    signal ap_ST_fsm_state17_blk : STD_LOGIC;
    signal ap_ST_fsm_state18_blk : STD_LOGIC;
    signal ap_ST_fsm_state19_blk : STD_LOGIC;
    signal ap_ST_fsm_state20_blk : STD_LOGIC;
    signal ap_ST_fsm_state21_blk : STD_LOGIC;
    signal ap_ST_fsm_state22_blk : STD_LOGIC;
    signal ap_ST_fsm_state23_blk : STD_LOGIC;
    signal ap_ST_fsm_state24_blk : STD_LOGIC;
    signal ap_ST_fsm_state25_blk : STD_LOGIC;
    signal ap_ST_fsm_state26_blk : STD_LOGIC;
    signal ap_ST_fsm_state27_blk : STD_LOGIC;
    signal ap_ST_fsm_state28_blk : STD_LOGIC;
    signal ap_ST_fsm_state29_blk : STD_LOGIC;
    signal ap_ST_fsm_state30_blk : STD_LOGIC;
    signal ap_ST_fsm_state31_blk : STD_LOGIC;
    signal ap_ST_fsm_state32_blk : STD_LOGIC;
    signal ap_ST_fsm_state33_blk : STD_LOGIC;
    signal ap_ST_fsm_state34_blk : STD_LOGIC;
    signal ap_ST_fsm_state35_blk : STD_LOGIC;
    signal ap_ST_fsm_state36_blk : STD_LOGIC;
    signal ap_ST_fsm_state37_blk : STD_LOGIC;
    signal ap_ST_fsm_state38_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component gaussian_filter_accel_GaussianBlur_3_0_0_2160_3840_1_2_2_Pipeline_VITIS_LOOP_48_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        scale2X : IN STD_LOGIC_VECTOR (31 downto 0);
        cf_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
        cf_ce0 : OUT STD_LOGIC;
        cf_we0 : OUT STD_LOGIC;
        cf_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        sum_1_out : OUT STD_LOGIC_VECTOR (31 downto 0);
        sum_1_out_ap_vld : OUT STD_LOGIC;
        grp_fu_289_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_289_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_289_p_opcode : OUT STD_LOGIC_VECTOR (0 downto 0);
        grp_fu_289_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_289_p_ce : OUT STD_LOGIC;
        grp_fu_123_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_123_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_123_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_123_p_ce : OUT STD_LOGIC );
    end component;


    component gaussian_filter_accel_GaussianBlur_3_0_0_2160_3840_1_2_2_Pipeline_VITIS_LOOP_58_2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        cf_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
        cf_ce0 : OUT STD_LOGIC;
        cf_we0 : OUT STD_LOGIC;
        cf_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        cf_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        sum : IN STD_LOGIC_VECTOR (31 downto 0);
        weights_1_out : OUT STD_LOGIC_VECTOR (7 downto 0);
        weights_1_out_ap_vld : OUT STD_LOGIC;
        weights_out : OUT STD_LOGIC_VECTOR (7 downto 0);
        weights_out_ap_vld : OUT STD_LOGIC;
        grp_fu_289_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_289_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_289_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
        grp_fu_289_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_289_p_ce : OUT STD_LOGIC;
        grp_fu_123_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_123_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_123_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_123_p_ce : OUT STD_LOGIC );
    end component;


    component gaussian_filter_accel_xfGaussianFilter3x3_0_2160_3840_1_0_1_2_2_1_3840_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        in_mat_data1_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        in_mat_data1_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        in_mat_data1_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        in_mat_data1_empty_n : IN STD_LOGIC;
        in_mat_data1_read : OUT STD_LOGIC;
        out_mat_data2_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        out_mat_data2_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        out_mat_data2_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        out_mat_data2_full_n : IN STD_LOGIC;
        out_mat_data2_write : OUT STD_LOGIC;
        img_height : IN STD_LOGIC_VECTOR (15 downto 0);
        img_width : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read : IN STD_LOGIC_VECTOR (7 downto 0);
        p_read1 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component gaussian_filter_accel_fmul_32ns_32ns_32_4_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component gaussian_filter_accel_fdiv_32ns_32ns_32_12_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component gaussian_filter_accel_fcmp_32ns_32ns_1_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component gaussian_filter_accel_faddfsub_32ns_32ns_32_6_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (1 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component gaussian_filter_accel_GaussianBlur_3_0_0_2160_3840_1_2_2_s_cf_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (1 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    cf_U : component gaussian_filter_accel_GaussianBlur_3_0_0_2160_3840_1_2_2_s_cf_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 3,
        AddressWidth => 2)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => cf_address0,
        ce0 => cf_ce0,
        we0 => cf_we0,
        d0 => cf_d0,
        q0 => cf_q0);

    grp_GaussianBlur_3_0_0_2160_3840_1_2_2_Pipeline_VITIS_LOOP_48_1_fu_96 : component gaussian_filter_accel_GaussianBlur_3_0_0_2160_3840_1_2_2_Pipeline_VITIS_LOOP_48_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_GaussianBlur_3_0_0_2160_3840_1_2_2_Pipeline_VITIS_LOOP_48_1_fu_96_ap_start,
        ap_done => grp_GaussianBlur_3_0_0_2160_3840_1_2_2_Pipeline_VITIS_LOOP_48_1_fu_96_ap_done,
        ap_idle => grp_GaussianBlur_3_0_0_2160_3840_1_2_2_Pipeline_VITIS_LOOP_48_1_fu_96_ap_idle,
        ap_ready => grp_GaussianBlur_3_0_0_2160_3840_1_2_2_Pipeline_VITIS_LOOP_48_1_fu_96_ap_ready,
        scale2X => scale2X_reg_270,
        cf_address0 => grp_GaussianBlur_3_0_0_2160_3840_1_2_2_Pipeline_VITIS_LOOP_48_1_fu_96_cf_address0,
        cf_ce0 => grp_GaussianBlur_3_0_0_2160_3840_1_2_2_Pipeline_VITIS_LOOP_48_1_fu_96_cf_ce0,
        cf_we0 => grp_GaussianBlur_3_0_0_2160_3840_1_2_2_Pipeline_VITIS_LOOP_48_1_fu_96_cf_we0,
        cf_d0 => grp_GaussianBlur_3_0_0_2160_3840_1_2_2_Pipeline_VITIS_LOOP_48_1_fu_96_cf_d0,
        sum_1_out => grp_GaussianBlur_3_0_0_2160_3840_1_2_2_Pipeline_VITIS_LOOP_48_1_fu_96_sum_1_out,
        sum_1_out_ap_vld => grp_GaussianBlur_3_0_0_2160_3840_1_2_2_Pipeline_VITIS_LOOP_48_1_fu_96_sum_1_out_ap_vld,
        grp_fu_289_p_din0 => grp_GaussianBlur_3_0_0_2160_3840_1_2_2_Pipeline_VITIS_LOOP_48_1_fu_96_grp_fu_289_p_din0,
        grp_fu_289_p_din1 => grp_GaussianBlur_3_0_0_2160_3840_1_2_2_Pipeline_VITIS_LOOP_48_1_fu_96_grp_fu_289_p_din1,
        grp_fu_289_p_opcode => grp_GaussianBlur_3_0_0_2160_3840_1_2_2_Pipeline_VITIS_LOOP_48_1_fu_96_grp_fu_289_p_opcode,
        grp_fu_289_p_dout0 => grp_fu_289_p2,
        grp_fu_289_p_ce => grp_GaussianBlur_3_0_0_2160_3840_1_2_2_Pipeline_VITIS_LOOP_48_1_fu_96_grp_fu_289_p_ce,
        grp_fu_123_p_din0 => grp_GaussianBlur_3_0_0_2160_3840_1_2_2_Pipeline_VITIS_LOOP_48_1_fu_96_grp_fu_123_p_din0,
        grp_fu_123_p_din1 => grp_GaussianBlur_3_0_0_2160_3840_1_2_2_Pipeline_VITIS_LOOP_48_1_fu_96_grp_fu_123_p_din1,
        grp_fu_123_p_dout0 => grp_fu_123_p2,
        grp_fu_123_p_ce => grp_GaussianBlur_3_0_0_2160_3840_1_2_2_Pipeline_VITIS_LOOP_48_1_fu_96_grp_fu_123_p_ce);

    grp_GaussianBlur_3_0_0_2160_3840_1_2_2_Pipeline_VITIS_LOOP_58_2_fu_103 : component gaussian_filter_accel_GaussianBlur_3_0_0_2160_3840_1_2_2_Pipeline_VITIS_LOOP_58_2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_GaussianBlur_3_0_0_2160_3840_1_2_2_Pipeline_VITIS_LOOP_58_2_fu_103_ap_start,
        ap_done => grp_GaussianBlur_3_0_0_2160_3840_1_2_2_Pipeline_VITIS_LOOP_58_2_fu_103_ap_done,
        ap_idle => grp_GaussianBlur_3_0_0_2160_3840_1_2_2_Pipeline_VITIS_LOOP_58_2_fu_103_ap_idle,
        ap_ready => grp_GaussianBlur_3_0_0_2160_3840_1_2_2_Pipeline_VITIS_LOOP_58_2_fu_103_ap_ready,
        cf_address0 => grp_GaussianBlur_3_0_0_2160_3840_1_2_2_Pipeline_VITIS_LOOP_58_2_fu_103_cf_address0,
        cf_ce0 => grp_GaussianBlur_3_0_0_2160_3840_1_2_2_Pipeline_VITIS_LOOP_58_2_fu_103_cf_ce0,
        cf_we0 => grp_GaussianBlur_3_0_0_2160_3840_1_2_2_Pipeline_VITIS_LOOP_58_2_fu_103_cf_we0,
        cf_d0 => grp_GaussianBlur_3_0_0_2160_3840_1_2_2_Pipeline_VITIS_LOOP_58_2_fu_103_cf_d0,
        cf_q0 => cf_q0,
        sum => sum_reg_278,
        weights_1_out => grp_GaussianBlur_3_0_0_2160_3840_1_2_2_Pipeline_VITIS_LOOP_58_2_fu_103_weights_1_out,
        weights_1_out_ap_vld => grp_GaussianBlur_3_0_0_2160_3840_1_2_2_Pipeline_VITIS_LOOP_58_2_fu_103_weights_1_out_ap_vld,
        weights_out => grp_GaussianBlur_3_0_0_2160_3840_1_2_2_Pipeline_VITIS_LOOP_58_2_fu_103_weights_out,
        weights_out_ap_vld => grp_GaussianBlur_3_0_0_2160_3840_1_2_2_Pipeline_VITIS_LOOP_58_2_fu_103_weights_out_ap_vld,
        grp_fu_289_p_din0 => grp_GaussianBlur_3_0_0_2160_3840_1_2_2_Pipeline_VITIS_LOOP_58_2_fu_103_grp_fu_289_p_din0,
        grp_fu_289_p_din1 => grp_GaussianBlur_3_0_0_2160_3840_1_2_2_Pipeline_VITIS_LOOP_58_2_fu_103_grp_fu_289_p_din1,
        grp_fu_289_p_opcode => grp_GaussianBlur_3_0_0_2160_3840_1_2_2_Pipeline_VITIS_LOOP_58_2_fu_103_grp_fu_289_p_opcode,
        grp_fu_289_p_dout0 => grp_fu_289_p2,
        grp_fu_289_p_ce => grp_GaussianBlur_3_0_0_2160_3840_1_2_2_Pipeline_VITIS_LOOP_58_2_fu_103_grp_fu_289_p_ce,
        grp_fu_123_p_din0 => grp_GaussianBlur_3_0_0_2160_3840_1_2_2_Pipeline_VITIS_LOOP_58_2_fu_103_grp_fu_123_p_din0,
        grp_fu_123_p_din1 => grp_GaussianBlur_3_0_0_2160_3840_1_2_2_Pipeline_VITIS_LOOP_58_2_fu_103_grp_fu_123_p_din1,
        grp_fu_123_p_dout0 => grp_fu_123_p2,
        grp_fu_123_p_ce => grp_GaussianBlur_3_0_0_2160_3840_1_2_2_Pipeline_VITIS_LOOP_58_2_fu_103_grp_fu_123_p_ce);

    grp_xfGaussianFilter3x3_0_2160_3840_1_0_1_2_2_1_3840_s_fu_111 : component gaussian_filter_accel_xfGaussianFilter3x3_0_2160_3840_1_0_1_2_2_1_3840_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_xfGaussianFilter3x3_0_2160_3840_1_0_1_2_2_1_3840_s_fu_111_ap_start,
        ap_done => grp_xfGaussianFilter3x3_0_2160_3840_1_0_1_2_2_1_3840_s_fu_111_ap_done,
        ap_idle => grp_xfGaussianFilter3x3_0_2160_3840_1_0_1_2_2_1_3840_s_fu_111_ap_idle,
        ap_ready => grp_xfGaussianFilter3x3_0_2160_3840_1_0_1_2_2_1_3840_s_fu_111_ap_ready,
        in_mat_data1_dout => in_mat_data1_dout,
        in_mat_data1_num_data_valid => ap_const_lv2_0,
        in_mat_data1_fifo_cap => ap_const_lv2_0,
        in_mat_data1_empty_n => in_mat_data1_empty_n,
        in_mat_data1_read => grp_xfGaussianFilter3x3_0_2160_3840_1_0_1_2_2_1_3840_s_fu_111_in_mat_data1_read,
        out_mat_data2_din => grp_xfGaussianFilter3x3_0_2160_3840_1_0_1_2_2_1_3840_s_fu_111_out_mat_data2_din,
        out_mat_data2_num_data_valid => ap_const_lv2_0,
        out_mat_data2_fifo_cap => ap_const_lv2_0,
        out_mat_data2_full_n => out_mat_data2_full_n,
        out_mat_data2_write => grp_xfGaussianFilter3x3_0_2160_3840_1_0_1_2_2_1_3840_s_fu_111_out_mat_data2_write,
        img_height => trunc_ln1312_reg_254,
        img_width => trunc_ln1312_1_reg_259,
        p_read => grp_GaussianBlur_3_0_0_2160_3840_1_2_2_Pipeline_VITIS_LOOP_58_2_fu_103_weights_1_out,
        p_read1 => grp_GaussianBlur_3_0_0_2160_3840_1_2_2_Pipeline_VITIS_LOOP_58_2_fu_103_weights_out);

    fmul_32ns_32ns_32_4_max_dsp_1_U140 : component gaussian_filter_accel_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_123_p0,
        din1 => grp_fu_123_p1,
        ce => grp_fu_123_ce,
        dout => grp_fu_123_p2);

    fdiv_32ns_32ns_32_12_no_dsp_1_U141 : component gaussian_filter_accel_fdiv_32ns_32ns_32_12_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 12,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ap_const_lv32_3F800000,
        din1 => grp_fu_128_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_128_p2);

    fcmp_32ns_32ns_1_2_no_dsp_1_U142 : component gaussian_filter_accel_fcmp_32ns_32ns_1_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => sigma_dout,
        din1 => ap_const_lv32_0,
        ce => grp_fu_134_ce,
        opcode => ap_const_lv5_5,
        dout => grp_fu_134_p2);

    faddfsub_32ns_32ns_32_6_full_dsp_1_U143 : component gaussian_filter_accel_faddfsub_32ns_32ns_32_6_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_289_p0,
        din1 => grp_fu_289_p1,
        opcode => grp_fu_289_opcode,
        ce => grp_fu_289_ce,
        dout => grp_fu_289_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state38) and (grp_xfGaussianFilter3x3_0_2160_3840_1_0_1_2_2_1_3840_s_fu_111_ap_done = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    grp_GaussianBlur_3_0_0_2160_3840_1_2_2_Pipeline_VITIS_LOOP_48_1_fu_96_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_GaussianBlur_3_0_0_2160_3840_1_2_2_Pipeline_VITIS_LOOP_48_1_fu_96_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
                    grp_GaussianBlur_3_0_0_2160_3840_1_2_2_Pipeline_VITIS_LOOP_48_1_fu_96_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_GaussianBlur_3_0_0_2160_3840_1_2_2_Pipeline_VITIS_LOOP_48_1_fu_96_ap_ready = ap_const_logic_1)) then 
                    grp_GaussianBlur_3_0_0_2160_3840_1_2_2_Pipeline_VITIS_LOOP_48_1_fu_96_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_GaussianBlur_3_0_0_2160_3840_1_2_2_Pipeline_VITIS_LOOP_58_2_fu_103_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_GaussianBlur_3_0_0_2160_3840_1_2_2_Pipeline_VITIS_LOOP_58_2_fu_103_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
                    grp_GaussianBlur_3_0_0_2160_3840_1_2_2_Pipeline_VITIS_LOOP_58_2_fu_103_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_GaussianBlur_3_0_0_2160_3840_1_2_2_Pipeline_VITIS_LOOP_58_2_fu_103_ap_ready = ap_const_logic_1)) then 
                    grp_GaussianBlur_3_0_0_2160_3840_1_2_2_Pipeline_VITIS_LOOP_58_2_fu_103_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_xfGaussianFilter3x3_0_2160_3840_1_0_1_2_2_1_3840_s_fu_111_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_xfGaussianFilter3x3_0_2160_3840_1_0_1_2_2_1_3840_s_fu_111_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
                    grp_xfGaussianFilter3x3_0_2160_3840_1_0_1_2_2_1_3840_s_fu_111_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_xfGaussianFilter3x3_0_2160_3840_1_0_1_2_2_1_3840_s_fu_111_ap_ready = ap_const_logic_1)) then 
                    grp_xfGaussianFilter3x3_0_2160_3840_1_0_1_2_2_1_3840_s_fu_111_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state6))) then
                reg_140 <= grp_fu_123_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then
                scale2X_reg_270 <= scale2X_fu_212_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                select_ln40_reg_264 <= select_ln40_fu_195_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                sigma_read_reg_247 <= sigma_dout;
                trunc_ln1312_1_reg_259 <= trunc_ln1312_1_fu_150_p1;
                trunc_ln1312_reg_254 <= trunc_ln1312_fu_146_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state35)) then
                sum_reg_278 <= grp_fu_128_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, p_src_rows_empty_n, p_src_cols_empty_n, sigma_empty_n, grp_GaussianBlur_3_0_0_2160_3840_1_2_2_Pipeline_VITIS_LOOP_48_1_fu_96_ap_done, grp_GaussianBlur_3_0_0_2160_3840_1_2_2_Pipeline_VITIS_LOOP_58_2_fu_103_ap_done, grp_xfGaussianFilter3x3_0_2160_3840_1_0_1_2_2_1_3840_s_fu_111_ap_done, ap_CS_fsm_state23, ap_CS_fsm_state36, ap_CS_fsm_state38)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((sigma_empty_n = ap_const_logic_0) or (p_src_cols_empty_n = ap_const_logic_0) or (p_src_rows_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state23) and (grp_GaussianBlur_3_0_0_2160_3840_1_2_2_Pipeline_VITIS_LOOP_48_1_fu_96_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state24;
                else
                    ap_NS_fsm <= ap_ST_fsm_state23;
                end if;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state36) and (grp_GaussianBlur_3_0_0_2160_3840_1_2_2_Pipeline_VITIS_LOOP_58_2_fu_103_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state37;
                else
                    ap_NS_fsm <= ap_ST_fsm_state36;
                end if;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state38) and (grp_xfGaussianFilter3x3_0_2160_3840_1_0_1_2_2_1_3840_s_fu_111_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state38;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    and_ln40_fu_189_p2 <= (or_ln40_fu_183_p2 and grp_fu_134_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state35 <= ap_CS_fsm(34);
    ap_CS_fsm_state36 <= ap_CS_fsm(35);
    ap_CS_fsm_state37 <= ap_CS_fsm(36);
    ap_CS_fsm_state38 <= ap_CS_fsm(37);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state11_blk <= ap_const_logic_0;
    ap_ST_fsm_state12_blk <= ap_const_logic_0;
    ap_ST_fsm_state13_blk <= ap_const_logic_0;
    ap_ST_fsm_state14_blk <= ap_const_logic_0;
    ap_ST_fsm_state15_blk <= ap_const_logic_0;
    ap_ST_fsm_state16_blk <= ap_const_logic_0;
    ap_ST_fsm_state17_blk <= ap_const_logic_0;
    ap_ST_fsm_state18_blk <= ap_const_logic_0;
    ap_ST_fsm_state19_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start, ap_done_reg, p_src_rows_empty_n, p_src_cols_empty_n, sigma_empty_n)
    begin
        if (((sigma_empty_n = ap_const_logic_0) or (p_src_cols_empty_n = ap_const_logic_0) or (p_src_rows_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state20_blk <= ap_const_logic_0;
    ap_ST_fsm_state21_blk <= ap_const_logic_0;
    ap_ST_fsm_state22_blk <= ap_const_logic_0;

    ap_ST_fsm_state23_blk_assign_proc : process(grp_GaussianBlur_3_0_0_2160_3840_1_2_2_Pipeline_VITIS_LOOP_48_1_fu_96_ap_done)
    begin
        if ((grp_GaussianBlur_3_0_0_2160_3840_1_2_2_Pipeline_VITIS_LOOP_48_1_fu_96_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state23_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state23_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state24_blk <= ap_const_logic_0;
    ap_ST_fsm_state25_blk <= ap_const_logic_0;
    ap_ST_fsm_state26_blk <= ap_const_logic_0;
    ap_ST_fsm_state27_blk <= ap_const_logic_0;
    ap_ST_fsm_state28_blk <= ap_const_logic_0;
    ap_ST_fsm_state29_blk <= ap_const_logic_0;
    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state30_blk <= ap_const_logic_0;
    ap_ST_fsm_state31_blk <= ap_const_logic_0;
    ap_ST_fsm_state32_blk <= ap_const_logic_0;
    ap_ST_fsm_state33_blk <= ap_const_logic_0;
    ap_ST_fsm_state34_blk <= ap_const_logic_0;
    ap_ST_fsm_state35_blk <= ap_const_logic_0;

    ap_ST_fsm_state36_blk_assign_proc : process(grp_GaussianBlur_3_0_0_2160_3840_1_2_2_Pipeline_VITIS_LOOP_58_2_fu_103_ap_done)
    begin
        if ((grp_GaussianBlur_3_0_0_2160_3840_1_2_2_Pipeline_VITIS_LOOP_58_2_fu_103_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state36_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state36_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state37_blk <= ap_const_logic_0;

    ap_ST_fsm_state38_blk_assign_proc : process(grp_xfGaussianFilter3x3_0_2160_3840_1_0_1_2_2_1_3840_s_fu_111_ap_done)
    begin
        if ((grp_xfGaussianFilter3x3_0_2160_3840_1_0_1_2_2_1_3840_s_fu_111_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state38_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state38_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, p_src_rows_empty_n, p_src_cols_empty_n, sigma_empty_n)
    begin
                ap_block_state1 <= ((sigma_empty_n = ap_const_logic_0) or (p_src_cols_empty_n = ap_const_logic_0) or (p_src_rows_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_done_reg, grp_xfGaussianFilter3x3_0_2160_3840_1_0_1_2_2_1_3840_s_fu_111_ap_done, ap_CS_fsm_state38)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state38) and (grp_xfGaussianFilter3x3_0_2160_3840_1_0_1_2_2_1_3840_s_fu_111_ap_done = ap_const_logic_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(grp_xfGaussianFilter3x3_0_2160_3840_1_0_1_2_2_1_3840_s_fu_111_ap_done, ap_CS_fsm_state38)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state38) and (grp_xfGaussianFilter3x3_0_2160_3840_1_0_1_2_2_1_3840_s_fu_111_ap_done = ap_const_logic_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln40_fu_154_p1 <= sigma_read_reg_247;
    bitcast_ln46_fu_202_p1 <= grp_fu_128_p2;

    cf_address0_assign_proc : process(grp_GaussianBlur_3_0_0_2160_3840_1_2_2_Pipeline_VITIS_LOOP_48_1_fu_96_cf_address0, grp_GaussianBlur_3_0_0_2160_3840_1_2_2_Pipeline_VITIS_LOOP_58_2_fu_103_cf_address0, ap_CS_fsm_state23, ap_CS_fsm_state36)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            cf_address0 <= grp_GaussianBlur_3_0_0_2160_3840_1_2_2_Pipeline_VITIS_LOOP_58_2_fu_103_cf_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            cf_address0 <= grp_GaussianBlur_3_0_0_2160_3840_1_2_2_Pipeline_VITIS_LOOP_48_1_fu_96_cf_address0;
        else 
            cf_address0 <= "XX";
        end if; 
    end process;


    cf_ce0_assign_proc : process(grp_GaussianBlur_3_0_0_2160_3840_1_2_2_Pipeline_VITIS_LOOP_48_1_fu_96_cf_ce0, grp_GaussianBlur_3_0_0_2160_3840_1_2_2_Pipeline_VITIS_LOOP_58_2_fu_103_cf_ce0, ap_CS_fsm_state23, ap_CS_fsm_state36)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            cf_ce0 <= grp_GaussianBlur_3_0_0_2160_3840_1_2_2_Pipeline_VITIS_LOOP_58_2_fu_103_cf_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            cf_ce0 <= grp_GaussianBlur_3_0_0_2160_3840_1_2_2_Pipeline_VITIS_LOOP_48_1_fu_96_cf_ce0;
        else 
            cf_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    cf_d0_assign_proc : process(grp_GaussianBlur_3_0_0_2160_3840_1_2_2_Pipeline_VITIS_LOOP_48_1_fu_96_cf_d0, grp_GaussianBlur_3_0_0_2160_3840_1_2_2_Pipeline_VITIS_LOOP_58_2_fu_103_cf_d0, ap_CS_fsm_state23, ap_CS_fsm_state36)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            cf_d0 <= grp_GaussianBlur_3_0_0_2160_3840_1_2_2_Pipeline_VITIS_LOOP_58_2_fu_103_cf_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            cf_d0 <= grp_GaussianBlur_3_0_0_2160_3840_1_2_2_Pipeline_VITIS_LOOP_48_1_fu_96_cf_d0;
        else 
            cf_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    cf_we0_assign_proc : process(grp_GaussianBlur_3_0_0_2160_3840_1_2_2_Pipeline_VITIS_LOOP_48_1_fu_96_cf_we0, grp_GaussianBlur_3_0_0_2160_3840_1_2_2_Pipeline_VITIS_LOOP_58_2_fu_103_cf_we0, ap_CS_fsm_state23, ap_CS_fsm_state36)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            cf_we0 <= grp_GaussianBlur_3_0_0_2160_3840_1_2_2_Pipeline_VITIS_LOOP_58_2_fu_103_cf_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            cf_we0 <= grp_GaussianBlur_3_0_0_2160_3840_1_2_2_Pipeline_VITIS_LOOP_48_1_fu_96_cf_we0;
        else 
            cf_we0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_GaussianBlur_3_0_0_2160_3840_1_2_2_Pipeline_VITIS_LOOP_48_1_fu_96_ap_start <= grp_GaussianBlur_3_0_0_2160_3840_1_2_2_Pipeline_VITIS_LOOP_48_1_fu_96_ap_start_reg;
    grp_GaussianBlur_3_0_0_2160_3840_1_2_2_Pipeline_VITIS_LOOP_58_2_fu_103_ap_start <= grp_GaussianBlur_3_0_0_2160_3840_1_2_2_Pipeline_VITIS_LOOP_58_2_fu_103_ap_start_reg;

    grp_fu_123_ce_assign_proc : process(grp_GaussianBlur_3_0_0_2160_3840_1_2_2_Pipeline_VITIS_LOOP_48_1_fu_96_grp_fu_123_p_ce, grp_GaussianBlur_3_0_0_2160_3840_1_2_2_Pipeline_VITIS_LOOP_58_2_fu_103_grp_fu_123_p_ce, ap_CS_fsm_state23, ap_CS_fsm_state36)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            grp_fu_123_ce <= grp_GaussianBlur_3_0_0_2160_3840_1_2_2_Pipeline_VITIS_LOOP_58_2_fu_103_grp_fu_123_p_ce;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            grp_fu_123_ce <= grp_GaussianBlur_3_0_0_2160_3840_1_2_2_Pipeline_VITIS_LOOP_48_1_fu_96_grp_fu_123_p_ce;
        else 
            grp_fu_123_ce <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_123_p0_assign_proc : process(reg_140, select_ln40_reg_264, grp_GaussianBlur_3_0_0_2160_3840_1_2_2_Pipeline_VITIS_LOOP_48_1_fu_96_grp_fu_123_p_din0, grp_GaussianBlur_3_0_0_2160_3840_1_2_2_Pipeline_VITIS_LOOP_58_2_fu_103_grp_fu_123_p_din0, ap_CS_fsm_state23, ap_CS_fsm_state36, ap_CS_fsm_state3, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            grp_fu_123_p0 <= grp_GaussianBlur_3_0_0_2160_3840_1_2_2_Pipeline_VITIS_LOOP_58_2_fu_103_grp_fu_123_p_din0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            grp_fu_123_p0 <= grp_GaussianBlur_3_0_0_2160_3840_1_2_2_Pipeline_VITIS_LOOP_48_1_fu_96_grp_fu_123_p_din0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_fu_123_p0 <= reg_140;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_fu_123_p0 <= select_ln40_reg_264;
        else 
            grp_fu_123_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_123_p1_assign_proc : process(select_ln40_reg_264, grp_GaussianBlur_3_0_0_2160_3840_1_2_2_Pipeline_VITIS_LOOP_48_1_fu_96_grp_fu_123_p_din1, grp_GaussianBlur_3_0_0_2160_3840_1_2_2_Pipeline_VITIS_LOOP_58_2_fu_103_grp_fu_123_p_din1, ap_CS_fsm_state23, ap_CS_fsm_state36, ap_CS_fsm_state3, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            grp_fu_123_p1 <= grp_GaussianBlur_3_0_0_2160_3840_1_2_2_Pipeline_VITIS_LOOP_58_2_fu_103_grp_fu_123_p_din1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            grp_fu_123_p1 <= grp_GaussianBlur_3_0_0_2160_3840_1_2_2_Pipeline_VITIS_LOOP_48_1_fu_96_grp_fu_123_p_din1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_fu_123_p1 <= ap_const_lv32_40000000;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_fu_123_p1 <= select_ln40_reg_264;
        else 
            grp_fu_123_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_128_p1_assign_proc : process(reg_140, grp_GaussianBlur_3_0_0_2160_3840_1_2_2_Pipeline_VITIS_LOOP_48_1_fu_96_sum_1_out, ap_CS_fsm_state24, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            grp_fu_128_p1 <= grp_GaussianBlur_3_0_0_2160_3840_1_2_2_Pipeline_VITIS_LOOP_48_1_fu_96_sum_1_out;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_fu_128_p1 <= reg_140;
        else 
            grp_fu_128_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_134_ce_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, p_src_rows_empty_n, p_src_cols_empty_n, sigma_empty_n, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (not(((sigma_empty_n = ap_const_logic_0) or (p_src_cols_empty_n = ap_const_logic_0) or (p_src_rows_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            grp_fu_134_ce <= ap_const_logic_1;
        else 
            grp_fu_134_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_289_ce_assign_proc : process(grp_GaussianBlur_3_0_0_2160_3840_1_2_2_Pipeline_VITIS_LOOP_48_1_fu_96_grp_fu_289_p_ce, grp_GaussianBlur_3_0_0_2160_3840_1_2_2_Pipeline_VITIS_LOOP_58_2_fu_103_grp_fu_289_p_ce, ap_CS_fsm_state23, ap_CS_fsm_state36)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            grp_fu_289_ce <= grp_GaussianBlur_3_0_0_2160_3840_1_2_2_Pipeline_VITIS_LOOP_58_2_fu_103_grp_fu_289_p_ce;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            grp_fu_289_ce <= grp_GaussianBlur_3_0_0_2160_3840_1_2_2_Pipeline_VITIS_LOOP_48_1_fu_96_grp_fu_289_p_ce;
        else 
            grp_fu_289_ce <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_289_opcode_assign_proc : process(grp_GaussianBlur_3_0_0_2160_3840_1_2_2_Pipeline_VITIS_LOOP_48_1_fu_96_grp_fu_289_p_opcode, grp_GaussianBlur_3_0_0_2160_3840_1_2_2_Pipeline_VITIS_LOOP_58_2_fu_103_grp_fu_289_p_opcode, ap_CS_fsm_state23, ap_CS_fsm_state36)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            grp_fu_289_opcode <= grp_GaussianBlur_3_0_0_2160_3840_1_2_2_Pipeline_VITIS_LOOP_58_2_fu_103_grp_fu_289_p_opcode;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            grp_fu_289_opcode <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_GaussianBlur_3_0_0_2160_3840_1_2_2_Pipeline_VITIS_LOOP_48_1_fu_96_grp_fu_289_p_opcode),2));
        else 
            grp_fu_289_opcode <= "XX";
        end if; 
    end process;


    grp_fu_289_p0_assign_proc : process(grp_GaussianBlur_3_0_0_2160_3840_1_2_2_Pipeline_VITIS_LOOP_48_1_fu_96_grp_fu_289_p_din0, grp_GaussianBlur_3_0_0_2160_3840_1_2_2_Pipeline_VITIS_LOOP_58_2_fu_103_grp_fu_289_p_din0, ap_CS_fsm_state23, ap_CS_fsm_state36)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            grp_fu_289_p0 <= grp_GaussianBlur_3_0_0_2160_3840_1_2_2_Pipeline_VITIS_LOOP_58_2_fu_103_grp_fu_289_p_din0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            grp_fu_289_p0 <= grp_GaussianBlur_3_0_0_2160_3840_1_2_2_Pipeline_VITIS_LOOP_48_1_fu_96_grp_fu_289_p_din0;
        else 
            grp_fu_289_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_289_p1_assign_proc : process(grp_GaussianBlur_3_0_0_2160_3840_1_2_2_Pipeline_VITIS_LOOP_48_1_fu_96_grp_fu_289_p_din1, grp_GaussianBlur_3_0_0_2160_3840_1_2_2_Pipeline_VITIS_LOOP_58_2_fu_103_grp_fu_289_p_din1, ap_CS_fsm_state23, ap_CS_fsm_state36)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            grp_fu_289_p1 <= grp_GaussianBlur_3_0_0_2160_3840_1_2_2_Pipeline_VITIS_LOOP_58_2_fu_103_grp_fu_289_p_din1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            grp_fu_289_p1 <= grp_GaussianBlur_3_0_0_2160_3840_1_2_2_Pipeline_VITIS_LOOP_48_1_fu_96_grp_fu_289_p_din1;
        else 
            grp_fu_289_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_xfGaussianFilter3x3_0_2160_3840_1_0_1_2_2_1_3840_s_fu_111_ap_start <= grp_xfGaussianFilter3x3_0_2160_3840_1_0_1_2_2_1_3840_s_fu_111_ap_start_reg;
    icmp_ln40_1_fu_177_p2 <= "1" when (trunc_ln40_fu_167_p1 = ap_const_lv23_0) else "0";
    icmp_ln40_fu_171_p2 <= "0" when (tmp_fu_157_p4 = ap_const_lv8_FF) else "1";

    in_mat_data1_read_assign_proc : process(grp_xfGaussianFilter3x3_0_2160_3840_1_0_1_2_2_1_3840_s_fu_111_in_mat_data1_read, ap_CS_fsm_state38)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            in_mat_data1_read <= grp_xfGaussianFilter3x3_0_2160_3840_1_0_1_2_2_1_3840_s_fu_111_in_mat_data1_read;
        else 
            in_mat_data1_read <= ap_const_logic_0;
        end if; 
    end process;

    or_ln40_fu_183_p2 <= (icmp_ln40_fu_171_p2 or icmp_ln40_1_fu_177_p2);
    out_mat_data2_din <= grp_xfGaussianFilter3x3_0_2160_3840_1_0_1_2_2_1_3840_s_fu_111_out_mat_data2_din;

    out_mat_data2_write_assign_proc : process(grp_xfGaussianFilter3x3_0_2160_3840_1_0_1_2_2_1_3840_s_fu_111_out_mat_data2_write, ap_CS_fsm_state38)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            out_mat_data2_write <= grp_xfGaussianFilter3x3_0_2160_3840_1_0_1_2_2_1_3840_s_fu_111_out_mat_data2_write;
        else 
            out_mat_data2_write <= ap_const_logic_0;
        end if; 
    end process;


    p_src_cols_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, p_src_cols_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_src_cols_blk_n <= p_src_cols_empty_n;
        else 
            p_src_cols_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    p_src_cols_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, p_src_rows_empty_n, p_src_cols_empty_n, sigma_empty_n)
    begin
        if ((not(((sigma_empty_n = ap_const_logic_0) or (p_src_cols_empty_n = ap_const_logic_0) or (p_src_rows_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_src_cols_read <= ap_const_logic_1;
        else 
            p_src_cols_read <= ap_const_logic_0;
        end if; 
    end process;


    p_src_rows_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, p_src_rows_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_src_rows_blk_n <= p_src_rows_empty_n;
        else 
            p_src_rows_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    p_src_rows_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, p_src_rows_empty_n, p_src_cols_empty_n, sigma_empty_n)
    begin
        if ((not(((sigma_empty_n = ap_const_logic_0) or (p_src_cols_empty_n = ap_const_logic_0) or (p_src_rows_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_src_rows_read <= ap_const_logic_1;
        else 
            p_src_rows_read <= ap_const_logic_0;
        end if; 
    end process;

    scale2X_fu_212_p1 <= xor_ln46_fu_206_p2;
    select_ln40_fu_195_p3 <= 
        ap_const_lv32_3F4CCCCD when (and_ln40_fu_189_p2(0) = '1') else 
        sigma_read_reg_247;

    sigma_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, sigma_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            sigma_blk_n <= sigma_empty_n;
        else 
            sigma_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    sigma_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, p_src_rows_empty_n, p_src_cols_empty_n, sigma_empty_n)
    begin
        if ((not(((sigma_empty_n = ap_const_logic_0) or (p_src_cols_empty_n = ap_const_logic_0) or (p_src_rows_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            sigma_read <= ap_const_logic_1;
        else 
            sigma_read <= ap_const_logic_0;
        end if; 
    end process;

    tmp_fu_157_p4 <= bitcast_ln40_fu_154_p1(30 downto 23);
    trunc_ln1312_1_fu_150_p1 <= p_src_cols_dout(16 - 1 downto 0);
    trunc_ln1312_fu_146_p1 <= p_src_rows_dout(16 - 1 downto 0);
    trunc_ln40_fu_167_p1 <= bitcast_ln40_fu_154_p1(23 - 1 downto 0);
    xor_ln46_fu_206_p2 <= (bitcast_ln46_fu_202_p1 xor ap_const_lv32_80000000);
end behav;
