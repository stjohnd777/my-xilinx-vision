-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity remap_accel_Axi2Mat is
port (
    m_axi_gmem0_AWVALID : OUT STD_LOGIC;
    m_axi_gmem0_AWREADY : IN STD_LOGIC;
    m_axi_gmem0_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem0_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem0_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_WVALID : OUT STD_LOGIC;
    m_axi_gmem0_WREADY : IN STD_LOGIC;
    m_axi_gmem0_WDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem0_WSTRB : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_WLAST : OUT STD_LOGIC;
    m_axi_gmem0_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_ARVALID : OUT STD_LOGIC;
    m_axi_gmem0_ARREADY : IN STD_LOGIC;
    m_axi_gmem0_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem0_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem0_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_RVALID : IN STD_LOGIC;
    m_axi_gmem0_RREADY : OUT STD_LOGIC;
    m_axi_gmem0_RDATA : IN STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem0_RLAST : IN STD_LOGIC;
    m_axi_gmem0_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_RFIFONUM : IN STD_LOGIC_VECTOR (10 downto 0);
    m_axi_gmem0_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_BVALID : IN STD_LOGIC;
    m_axi_gmem0_BREADY : OUT STD_LOGIC;
    m_axi_gmem0_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    din : IN STD_LOGIC_VECTOR (63 downto 0);
    imgInput_data1_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    imgInput_data1_full_n : IN STD_LOGIC;
    imgInput_data1_write : OUT STD_LOGIC;
    rows : IN STD_LOGIC_VECTOR (31 downto 0);
    cols : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    din_ap_vld : IN STD_LOGIC;
    rows_ap_vld : IN STD_LOGIC;
    cols_ap_vld : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC );
end;


architecture behav of remap_accel_Axi2Mat is 
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";

attribute shreg_extract : string;
    signal Axi2AxiStream_U0_ap_start : STD_LOGIC;
    signal Axi2AxiStream_U0_ap_done : STD_LOGIC;
    signal Axi2AxiStream_U0_ap_continue : STD_LOGIC;
    signal Axi2AxiStream_U0_ap_idle : STD_LOGIC;
    signal Axi2AxiStream_U0_ap_ready : STD_LOGIC;
    signal Axi2AxiStream_U0_start_out : STD_LOGIC;
    signal Axi2AxiStream_U0_start_write : STD_LOGIC;
    signal Axi2AxiStream_U0_m_axi_gmem0_AWVALID : STD_LOGIC;
    signal Axi2AxiStream_U0_m_axi_gmem0_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal Axi2AxiStream_U0_m_axi_gmem0_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal Axi2AxiStream_U0_m_axi_gmem0_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal Axi2AxiStream_U0_m_axi_gmem0_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal Axi2AxiStream_U0_m_axi_gmem0_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal Axi2AxiStream_U0_m_axi_gmem0_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal Axi2AxiStream_U0_m_axi_gmem0_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal Axi2AxiStream_U0_m_axi_gmem0_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal Axi2AxiStream_U0_m_axi_gmem0_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal Axi2AxiStream_U0_m_axi_gmem0_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal Axi2AxiStream_U0_m_axi_gmem0_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal Axi2AxiStream_U0_m_axi_gmem0_WVALID : STD_LOGIC;
    signal Axi2AxiStream_U0_m_axi_gmem0_WDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal Axi2AxiStream_U0_m_axi_gmem0_WSTRB : STD_LOGIC_VECTOR (0 downto 0);
    signal Axi2AxiStream_U0_m_axi_gmem0_WLAST : STD_LOGIC;
    signal Axi2AxiStream_U0_m_axi_gmem0_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal Axi2AxiStream_U0_m_axi_gmem0_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal Axi2AxiStream_U0_m_axi_gmem0_ARVALID : STD_LOGIC;
    signal Axi2AxiStream_U0_m_axi_gmem0_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal Axi2AxiStream_U0_m_axi_gmem0_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal Axi2AxiStream_U0_m_axi_gmem0_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal Axi2AxiStream_U0_m_axi_gmem0_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal Axi2AxiStream_U0_m_axi_gmem0_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal Axi2AxiStream_U0_m_axi_gmem0_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal Axi2AxiStream_U0_m_axi_gmem0_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal Axi2AxiStream_U0_m_axi_gmem0_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal Axi2AxiStream_U0_m_axi_gmem0_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal Axi2AxiStream_U0_m_axi_gmem0_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal Axi2AxiStream_U0_m_axi_gmem0_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal Axi2AxiStream_U0_m_axi_gmem0_RREADY : STD_LOGIC;
    signal Axi2AxiStream_U0_m_axi_gmem0_BREADY : STD_LOGIC;
    signal Axi2AxiStream_U0_ldata_din : STD_LOGIC_VECTOR (7 downto 0);
    signal Axi2AxiStream_U0_ldata_write : STD_LOGIC;
    signal Axi2AxiStream_U0_rows_c_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Axi2AxiStream_U0_rows_c_write : STD_LOGIC;
    signal Axi2AxiStream_U0_cols_c_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Axi2AxiStream_U0_cols_c_write : STD_LOGIC;
    signal AxiStream2Mat_U0_ldata1_read : STD_LOGIC;
    signal AxiStream2Mat_U0_imgInput_data1_din : STD_LOGIC_VECTOR (7 downto 0);
    signal AxiStream2Mat_U0_imgInput_data1_write : STD_LOGIC;
    signal AxiStream2Mat_U0_rows_read : STD_LOGIC;
    signal AxiStream2Mat_U0_cols_read : STD_LOGIC;
    signal AxiStream2Mat_U0_ap_start : STD_LOGIC;
    signal AxiStream2Mat_U0_ap_done : STD_LOGIC;
    signal AxiStream2Mat_U0_ap_ready : STD_LOGIC;
    signal AxiStream2Mat_U0_ap_idle : STD_LOGIC;
    signal AxiStream2Mat_U0_ap_continue : STD_LOGIC;
    signal ldata_full_n : STD_LOGIC;
    signal ldata_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal ldata_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal ldata_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal ldata_empty_n : STD_LOGIC;
    signal rows_c_full_n : STD_LOGIC;
    signal rows_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal rows_c_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal rows_c_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal rows_c_empty_n : STD_LOGIC;
    signal cols_c_full_n : STD_LOGIC;
    signal cols_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal cols_c_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal cols_c_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal cols_c_empty_n : STD_LOGIC;
    signal start_for_AxiStream2Mat_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_AxiStream2Mat_U0_full_n : STD_LOGIC;
    signal start_for_AxiStream2Mat_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_AxiStream2Mat_U0_empty_n : STD_LOGIC;

    component remap_accel_Axi2AxiStream IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        m_axi_gmem0_AWVALID : OUT STD_LOGIC;
        m_axi_gmem0_AWREADY : IN STD_LOGIC;
        m_axi_gmem0_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem0_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem0_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem0_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem0_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem0_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem0_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem0_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem0_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem0_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_WVALID : OUT STD_LOGIC;
        m_axi_gmem0_WREADY : IN STD_LOGIC;
        m_axi_gmem0_WDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
        m_axi_gmem0_WSTRB : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_WLAST : OUT STD_LOGIC;
        m_axi_gmem0_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_ARVALID : OUT STD_LOGIC;
        m_axi_gmem0_ARREADY : IN STD_LOGIC;
        m_axi_gmem0_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem0_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem0_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem0_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem0_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem0_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem0_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem0_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem0_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem0_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_RVALID : IN STD_LOGIC;
        m_axi_gmem0_RREADY : OUT STD_LOGIC;
        m_axi_gmem0_RDATA : IN STD_LOGIC_VECTOR (7 downto 0);
        m_axi_gmem0_RLAST : IN STD_LOGIC;
        m_axi_gmem0_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_RFIFONUM : IN STD_LOGIC_VECTOR (10 downto 0);
        m_axi_gmem0_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem0_BVALID : IN STD_LOGIC;
        m_axi_gmem0_BREADY : OUT STD_LOGIC;
        m_axi_gmem0_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem0_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        din : IN STD_LOGIC_VECTOR (63 downto 0);
        ldata_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        ldata_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        ldata_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        ldata_full_n : IN STD_LOGIC;
        ldata_write : OUT STD_LOGIC;
        rows : IN STD_LOGIC_VECTOR (31 downto 0);
        cols : IN STD_LOGIC_VECTOR (31 downto 0);
        rows_c_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        rows_c_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        rows_c_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        rows_c_full_n : IN STD_LOGIC;
        rows_c_write : OUT STD_LOGIC;
        cols_c_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        cols_c_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        cols_c_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        cols_c_full_n : IN STD_LOGIC;
        cols_c_write : OUT STD_LOGIC );
    end component;


    component remap_accel_AxiStream2Mat IS
    port (
        ldata1_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        ldata1_empty_n : IN STD_LOGIC;
        ldata1_read : OUT STD_LOGIC;
        imgInput_data1_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        imgInput_data1_full_n : IN STD_LOGIC;
        imgInput_data1_write : OUT STD_LOGIC;
        rows_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        rows_empty_n : IN STD_LOGIC;
        rows_read : OUT STD_LOGIC;
        cols_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        cols_empty_n : IN STD_LOGIC;
        cols_read : OUT STD_LOGIC;
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;


    component remap_accel_fifo_w8_d2_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_num_data_valid : OUT STD_LOGIC_VECTOR (1 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (1 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component remap_accel_fifo_w32_d2_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_num_data_valid : OUT STD_LOGIC_VECTOR (1 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (1 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component remap_accel_start_for_AxiStream2Mat_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;



begin
    Axi2AxiStream_U0 : component remap_accel_Axi2AxiStream
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => Axi2AxiStream_U0_ap_start,
        start_full_n => start_for_AxiStream2Mat_U0_full_n,
        ap_done => Axi2AxiStream_U0_ap_done,
        ap_continue => Axi2AxiStream_U0_ap_continue,
        ap_idle => Axi2AxiStream_U0_ap_idle,
        ap_ready => Axi2AxiStream_U0_ap_ready,
        start_out => Axi2AxiStream_U0_start_out,
        start_write => Axi2AxiStream_U0_start_write,
        m_axi_gmem0_AWVALID => Axi2AxiStream_U0_m_axi_gmem0_AWVALID,
        m_axi_gmem0_AWREADY => ap_const_logic_0,
        m_axi_gmem0_AWADDR => Axi2AxiStream_U0_m_axi_gmem0_AWADDR,
        m_axi_gmem0_AWID => Axi2AxiStream_U0_m_axi_gmem0_AWID,
        m_axi_gmem0_AWLEN => Axi2AxiStream_U0_m_axi_gmem0_AWLEN,
        m_axi_gmem0_AWSIZE => Axi2AxiStream_U0_m_axi_gmem0_AWSIZE,
        m_axi_gmem0_AWBURST => Axi2AxiStream_U0_m_axi_gmem0_AWBURST,
        m_axi_gmem0_AWLOCK => Axi2AxiStream_U0_m_axi_gmem0_AWLOCK,
        m_axi_gmem0_AWCACHE => Axi2AxiStream_U0_m_axi_gmem0_AWCACHE,
        m_axi_gmem0_AWPROT => Axi2AxiStream_U0_m_axi_gmem0_AWPROT,
        m_axi_gmem0_AWQOS => Axi2AxiStream_U0_m_axi_gmem0_AWQOS,
        m_axi_gmem0_AWREGION => Axi2AxiStream_U0_m_axi_gmem0_AWREGION,
        m_axi_gmem0_AWUSER => Axi2AxiStream_U0_m_axi_gmem0_AWUSER,
        m_axi_gmem0_WVALID => Axi2AxiStream_U0_m_axi_gmem0_WVALID,
        m_axi_gmem0_WREADY => ap_const_logic_0,
        m_axi_gmem0_WDATA => Axi2AxiStream_U0_m_axi_gmem0_WDATA,
        m_axi_gmem0_WSTRB => Axi2AxiStream_U0_m_axi_gmem0_WSTRB,
        m_axi_gmem0_WLAST => Axi2AxiStream_U0_m_axi_gmem0_WLAST,
        m_axi_gmem0_WID => Axi2AxiStream_U0_m_axi_gmem0_WID,
        m_axi_gmem0_WUSER => Axi2AxiStream_U0_m_axi_gmem0_WUSER,
        m_axi_gmem0_ARVALID => Axi2AxiStream_U0_m_axi_gmem0_ARVALID,
        m_axi_gmem0_ARREADY => m_axi_gmem0_ARREADY,
        m_axi_gmem0_ARADDR => Axi2AxiStream_U0_m_axi_gmem0_ARADDR,
        m_axi_gmem0_ARID => Axi2AxiStream_U0_m_axi_gmem0_ARID,
        m_axi_gmem0_ARLEN => Axi2AxiStream_U0_m_axi_gmem0_ARLEN,
        m_axi_gmem0_ARSIZE => Axi2AxiStream_U0_m_axi_gmem0_ARSIZE,
        m_axi_gmem0_ARBURST => Axi2AxiStream_U0_m_axi_gmem0_ARBURST,
        m_axi_gmem0_ARLOCK => Axi2AxiStream_U0_m_axi_gmem0_ARLOCK,
        m_axi_gmem0_ARCACHE => Axi2AxiStream_U0_m_axi_gmem0_ARCACHE,
        m_axi_gmem0_ARPROT => Axi2AxiStream_U0_m_axi_gmem0_ARPROT,
        m_axi_gmem0_ARQOS => Axi2AxiStream_U0_m_axi_gmem0_ARQOS,
        m_axi_gmem0_ARREGION => Axi2AxiStream_U0_m_axi_gmem0_ARREGION,
        m_axi_gmem0_ARUSER => Axi2AxiStream_U0_m_axi_gmem0_ARUSER,
        m_axi_gmem0_RVALID => m_axi_gmem0_RVALID,
        m_axi_gmem0_RREADY => Axi2AxiStream_U0_m_axi_gmem0_RREADY,
        m_axi_gmem0_RDATA => m_axi_gmem0_RDATA,
        m_axi_gmem0_RLAST => m_axi_gmem0_RLAST,
        m_axi_gmem0_RID => m_axi_gmem0_RID,
        m_axi_gmem0_RFIFONUM => m_axi_gmem0_RFIFONUM,
        m_axi_gmem0_RUSER => m_axi_gmem0_RUSER,
        m_axi_gmem0_RRESP => m_axi_gmem0_RRESP,
        m_axi_gmem0_BVALID => ap_const_logic_0,
        m_axi_gmem0_BREADY => Axi2AxiStream_U0_m_axi_gmem0_BREADY,
        m_axi_gmem0_BRESP => ap_const_lv2_0,
        m_axi_gmem0_BID => ap_const_lv1_0,
        m_axi_gmem0_BUSER => ap_const_lv1_0,
        din => din,
        ldata_din => Axi2AxiStream_U0_ldata_din,
        ldata_num_data_valid => ldata_num_data_valid,
        ldata_fifo_cap => ldata_fifo_cap,
        ldata_full_n => ldata_full_n,
        ldata_write => Axi2AxiStream_U0_ldata_write,
        rows => rows,
        cols => cols,
        rows_c_din => Axi2AxiStream_U0_rows_c_din,
        rows_c_num_data_valid => rows_c_num_data_valid,
        rows_c_fifo_cap => rows_c_fifo_cap,
        rows_c_full_n => rows_c_full_n,
        rows_c_write => Axi2AxiStream_U0_rows_c_write,
        cols_c_din => Axi2AxiStream_U0_cols_c_din,
        cols_c_num_data_valid => cols_c_num_data_valid,
        cols_c_fifo_cap => cols_c_fifo_cap,
        cols_c_full_n => cols_c_full_n,
        cols_c_write => Axi2AxiStream_U0_cols_c_write);

    AxiStream2Mat_U0 : component remap_accel_AxiStream2Mat
    port map (
        ldata1_dout => ldata_dout,
        ldata1_empty_n => ldata_empty_n,
        ldata1_read => AxiStream2Mat_U0_ldata1_read,
        imgInput_data1_din => AxiStream2Mat_U0_imgInput_data1_din,
        imgInput_data1_full_n => imgInput_data1_full_n,
        imgInput_data1_write => AxiStream2Mat_U0_imgInput_data1_write,
        rows_dout => rows_c_dout,
        rows_empty_n => rows_c_empty_n,
        rows_read => AxiStream2Mat_U0_rows_read,
        cols_dout => cols_c_dout,
        cols_empty_n => cols_c_empty_n,
        cols_read => AxiStream2Mat_U0_cols_read,
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => AxiStream2Mat_U0_ap_start,
        ap_done => AxiStream2Mat_U0_ap_done,
        ap_ready => AxiStream2Mat_U0_ap_ready,
        ap_idle => AxiStream2Mat_U0_ap_idle,
        ap_continue => AxiStream2Mat_U0_ap_continue);

    ldata_U : component remap_accel_fifo_w8_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Axi2AxiStream_U0_ldata_din,
        if_full_n => ldata_full_n,
        if_write => Axi2AxiStream_U0_ldata_write,
        if_dout => ldata_dout,
        if_num_data_valid => ldata_num_data_valid,
        if_fifo_cap => ldata_fifo_cap,
        if_empty_n => ldata_empty_n,
        if_read => AxiStream2Mat_U0_ldata1_read);

    rows_c_U : component remap_accel_fifo_w32_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Axi2AxiStream_U0_rows_c_din,
        if_full_n => rows_c_full_n,
        if_write => Axi2AxiStream_U0_rows_c_write,
        if_dout => rows_c_dout,
        if_num_data_valid => rows_c_num_data_valid,
        if_fifo_cap => rows_c_fifo_cap,
        if_empty_n => rows_c_empty_n,
        if_read => AxiStream2Mat_U0_rows_read);

    cols_c_U : component remap_accel_fifo_w32_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Axi2AxiStream_U0_cols_c_din,
        if_full_n => cols_c_full_n,
        if_write => Axi2AxiStream_U0_cols_c_write,
        if_dout => cols_c_dout,
        if_num_data_valid => cols_c_num_data_valid,
        if_fifo_cap => cols_c_fifo_cap,
        if_empty_n => cols_c_empty_n,
        if_read => AxiStream2Mat_U0_cols_read);

    start_for_AxiStream2Mat_U0_U : component remap_accel_start_for_AxiStream2Mat_U0
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_AxiStream2Mat_U0_din,
        if_full_n => start_for_AxiStream2Mat_U0_full_n,
        if_write => Axi2AxiStream_U0_start_write,
        if_dout => start_for_AxiStream2Mat_U0_dout,
        if_empty_n => start_for_AxiStream2Mat_U0_empty_n,
        if_read => AxiStream2Mat_U0_ap_ready);




    Axi2AxiStream_U0_ap_continue <= ap_const_logic_1;
    Axi2AxiStream_U0_ap_start <= ap_start;
    AxiStream2Mat_U0_ap_continue <= ap_continue;
    AxiStream2Mat_U0_ap_start <= start_for_AxiStream2Mat_U0_empty_n;
    ap_done <= AxiStream2Mat_U0_ap_done;
    ap_idle <= (AxiStream2Mat_U0_ap_idle and Axi2AxiStream_U0_ap_idle);
    ap_ready <= Axi2AxiStream_U0_ap_ready;
    imgInput_data1_din <= AxiStream2Mat_U0_imgInput_data1_din;
    imgInput_data1_write <= AxiStream2Mat_U0_imgInput_data1_write;
    m_axi_gmem0_ARADDR <= Axi2AxiStream_U0_m_axi_gmem0_ARADDR;
    m_axi_gmem0_ARBURST <= Axi2AxiStream_U0_m_axi_gmem0_ARBURST;
    m_axi_gmem0_ARCACHE <= Axi2AxiStream_U0_m_axi_gmem0_ARCACHE;
    m_axi_gmem0_ARID <= Axi2AxiStream_U0_m_axi_gmem0_ARID;
    m_axi_gmem0_ARLEN <= Axi2AxiStream_U0_m_axi_gmem0_ARLEN;
    m_axi_gmem0_ARLOCK <= Axi2AxiStream_U0_m_axi_gmem0_ARLOCK;
    m_axi_gmem0_ARPROT <= Axi2AxiStream_U0_m_axi_gmem0_ARPROT;
    m_axi_gmem0_ARQOS <= Axi2AxiStream_U0_m_axi_gmem0_ARQOS;
    m_axi_gmem0_ARREGION <= Axi2AxiStream_U0_m_axi_gmem0_ARREGION;
    m_axi_gmem0_ARSIZE <= Axi2AxiStream_U0_m_axi_gmem0_ARSIZE;
    m_axi_gmem0_ARUSER <= Axi2AxiStream_U0_m_axi_gmem0_ARUSER;
    m_axi_gmem0_ARVALID <= Axi2AxiStream_U0_m_axi_gmem0_ARVALID;
    m_axi_gmem0_AWADDR <= ap_const_lv64_0;
    m_axi_gmem0_AWBURST <= ap_const_lv2_0;
    m_axi_gmem0_AWCACHE <= ap_const_lv4_0;
    m_axi_gmem0_AWID <= ap_const_lv1_0;
    m_axi_gmem0_AWLEN <= ap_const_lv32_0;
    m_axi_gmem0_AWLOCK <= ap_const_lv2_0;
    m_axi_gmem0_AWPROT <= ap_const_lv3_0;
    m_axi_gmem0_AWQOS <= ap_const_lv4_0;
    m_axi_gmem0_AWREGION <= ap_const_lv4_0;
    m_axi_gmem0_AWSIZE <= ap_const_lv3_0;
    m_axi_gmem0_AWUSER <= ap_const_lv1_0;
    m_axi_gmem0_AWVALID <= ap_const_logic_0;
    m_axi_gmem0_BREADY <= ap_const_logic_0;
    m_axi_gmem0_RREADY <= Axi2AxiStream_U0_m_axi_gmem0_RREADY;
    m_axi_gmem0_WDATA <= ap_const_lv8_0;
    m_axi_gmem0_WID <= ap_const_lv1_0;
    m_axi_gmem0_WLAST <= ap_const_logic_0;
    m_axi_gmem0_WSTRB <= ap_const_lv1_0;
    m_axi_gmem0_WUSER <= ap_const_lv1_0;
    m_axi_gmem0_WVALID <= ap_const_logic_0;
    start_for_AxiStream2Mat_U0_din <= (0=>ap_const_logic_1, others=>'-');
end behav;
