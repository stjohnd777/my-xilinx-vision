// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module canny_accel_xFMagnitudeKernel_2_2_1080_1920_3_3_1_2_2_2_5_5_1920_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        gradx1_mat_data3_dout,
        gradx1_mat_data3_num_data_valid,
        gradx1_mat_data3_fifo_cap,
        gradx1_mat_data3_empty_n,
        gradx1_mat_data3_read,
        grady1_mat_data6_dout,
        grady1_mat_data6_num_data_valid,
        grady1_mat_data6_fifo_cap,
        grady1_mat_data6_empty_n,
        grady1_mat_data6_read,
        magnitude_mat_data8_din,
        magnitude_mat_data8_num_data_valid,
        magnitude_mat_data8_fifo_cap,
        magnitude_mat_data8_full_n,
        magnitude_mat_data8_write,
        p_read,
        p_read1
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_state2 = 3'd2;
parameter    ap_ST_fsm_state3 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [15:0] gradx1_mat_data3_dout;
input  [1:0] gradx1_mat_data3_num_data_valid;
input  [1:0] gradx1_mat_data3_fifo_cap;
input   gradx1_mat_data3_empty_n;
output   gradx1_mat_data3_read;
input  [15:0] grady1_mat_data6_dout;
input  [1:0] grady1_mat_data6_num_data_valid;
input  [1:0] grady1_mat_data6_fifo_cap;
input   grady1_mat_data6_empty_n;
output   grady1_mat_data6_read;
output  [15:0] magnitude_mat_data8_din;
input  [1:0] magnitude_mat_data8_num_data_valid;
input  [1:0] magnitude_mat_data8_fifo_cap;
input   magnitude_mat_data8_full_n;
output   magnitude_mat_data8_write;
input  [15:0] p_read;
input  [15:0] p_read1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg gradx1_mat_data3_read;
reg grady1_mat_data6_read;
reg magnitude_mat_data8_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire    grp_xFMagnitudeKernel_Pipeline_colLoop_fu_56_ap_start;
wire    grp_xFMagnitudeKernel_Pipeline_colLoop_fu_56_ap_done;
wire    grp_xFMagnitudeKernel_Pipeline_colLoop_fu_56_ap_idle;
wire    grp_xFMagnitudeKernel_Pipeline_colLoop_fu_56_ap_ready;
wire    grp_xFMagnitudeKernel_Pipeline_colLoop_fu_56_gradx1_mat_data3_read;
wire    grp_xFMagnitudeKernel_Pipeline_colLoop_fu_56_grady1_mat_data6_read;
wire   [15:0] grp_xFMagnitudeKernel_Pipeline_colLoop_fu_56_magnitude_mat_data8_din;
wire    grp_xFMagnitudeKernel_Pipeline_colLoop_fu_56_magnitude_mat_data8_write;
reg    grp_xFMagnitudeKernel_Pipeline_colLoop_fu_56_ap_start_reg;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln74_fu_75_p2;
wire    ap_CS_fsm_state3;
reg   [15:0] i_fu_40;
wire   [15:0] i_4_fu_80_p2;
reg    ap_block_state1;
reg   [2:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
reg    ap_ST_fsm_state3_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 grp_xFMagnitudeKernel_Pipeline_colLoop_fu_56_ap_start_reg = 1'b0;
end

canny_accel_xFMagnitudeKernel_Pipeline_colLoop grp_xFMagnitudeKernel_Pipeline_colLoop_fu_56(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_xFMagnitudeKernel_Pipeline_colLoop_fu_56_ap_start),
    .ap_done(grp_xFMagnitudeKernel_Pipeline_colLoop_fu_56_ap_done),
    .ap_idle(grp_xFMagnitudeKernel_Pipeline_colLoop_fu_56_ap_idle),
    .ap_ready(grp_xFMagnitudeKernel_Pipeline_colLoop_fu_56_ap_ready),
    .gradx1_mat_data3_dout(gradx1_mat_data3_dout),
    .gradx1_mat_data3_num_data_valid(2'd0),
    .gradx1_mat_data3_fifo_cap(2'd0),
    .gradx1_mat_data3_empty_n(gradx1_mat_data3_empty_n),
    .gradx1_mat_data3_read(grp_xFMagnitudeKernel_Pipeline_colLoop_fu_56_gradx1_mat_data3_read),
    .grady1_mat_data6_dout(grady1_mat_data6_dout),
    .grady1_mat_data6_num_data_valid(2'd0),
    .grady1_mat_data6_fifo_cap(2'd0),
    .grady1_mat_data6_empty_n(grady1_mat_data6_empty_n),
    .grady1_mat_data6_read(grp_xFMagnitudeKernel_Pipeline_colLoop_fu_56_grady1_mat_data6_read),
    .magnitude_mat_data8_din(grp_xFMagnitudeKernel_Pipeline_colLoop_fu_56_magnitude_mat_data8_din),
    .magnitude_mat_data8_num_data_valid(2'd0),
    .magnitude_mat_data8_fifo_cap(2'd0),
    .magnitude_mat_data8_full_n(magnitude_mat_data8_full_n),
    .magnitude_mat_data8_write(grp_xFMagnitudeKernel_Pipeline_colLoop_fu_56_magnitude_mat_data8_write),
    .p_read1(p_read1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((icmp_ln74_fu_75_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_xFMagnitudeKernel_Pipeline_colLoop_fu_56_ap_start_reg <= 1'b0;
    end else begin
        if (((icmp_ln74_fu_75_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            grp_xFMagnitudeKernel_Pipeline_colLoop_fu_56_ap_start_reg <= 1'b1;
        end else if ((grp_xFMagnitudeKernel_Pipeline_colLoop_fu_56_ap_ready == 1'b1)) begin
            grp_xFMagnitudeKernel_Pipeline_colLoop_fu_56_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_fu_40 <= 16'd0;
    end else if (((icmp_ln74_fu_75_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        i_fu_40 <= i_4_fu_80_p2;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) | (ap_done_reg == 1'b1))) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

always @ (*) begin
    if ((grp_xFMagnitudeKernel_Pipeline_colLoop_fu_56_ap_done == 1'b0)) begin
        ap_ST_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_fsm_state3_blk = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln74_fu_75_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln74_fu_75_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        gradx1_mat_data3_read = grp_xFMagnitudeKernel_Pipeline_colLoop_fu_56_gradx1_mat_data3_read;
    end else begin
        gradx1_mat_data3_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        grady1_mat_data6_read = grp_xFMagnitudeKernel_Pipeline_colLoop_fu_56_grady1_mat_data6_read;
    end else begin
        grady1_mat_data6_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        magnitude_mat_data8_write = grp_xFMagnitudeKernel_Pipeline_colLoop_fu_56_magnitude_mat_data8_write;
    end else begin
        magnitude_mat_data8_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln74_fu_75_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((grp_xFMagnitudeKernel_Pipeline_colLoop_fu_56_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign grp_xFMagnitudeKernel_Pipeline_colLoop_fu_56_ap_start = grp_xFMagnitudeKernel_Pipeline_colLoop_fu_56_ap_start_reg;

assign i_4_fu_80_p2 = (i_fu_40 + 16'd1);

assign icmp_ln74_fu_75_p2 = ((i_fu_40 == p_read) ? 1'b1 : 1'b0);

assign magnitude_mat_data8_din = grp_xFMagnitudeKernel_Pipeline_colLoop_fu_56_magnitude_mat_data8_din;

endmodule //canny_accel_xFMagnitudeKernel_2_2_1080_1920_3_3_1_2_2_2_5_5_1920_s
