// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module canny_accel_xFAverageGaussianMask3x3_Pipeline_Col_Loop (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        in_mat_data1_dout,
        in_mat_data1_num_data_valid,
        in_mat_data1_fifo_cap,
        in_mat_data1_empty_n,
        in_mat_data1_read,
        gaussian_mat_data1_din,
        gaussian_mat_data1_num_data_valid,
        gaussian_mat_data1_fifo_cap,
        gaussian_mat_data1_full_n,
        gaussian_mat_data1_write,
        img_width,
        buf_V_address0,
        buf_V_ce0,
        buf_V_q0,
        buf_V_address1,
        buf_V_ce1,
        buf_V_we1,
        buf_V_d1,
        buf_V_5_address0,
        buf_V_5_ce0,
        buf_V_5_q0,
        buf_V_5_address1,
        buf_V_5_ce1,
        buf_V_5_we1,
        buf_V_5_d1,
        buf_V_6_address0,
        buf_V_6_ce0,
        buf_V_6_q0,
        buf_V_6_address1,
        buf_V_6_ce1,
        buf_V_6_we1,
        buf_V_6_d1,
        tp_V,
        mid_V,
        bottom_V,
        cmp_i_i422_i,
        b1_V_out,
        b1_V_out_ap_vld,
        b0_V_out,
        b0_V_out_ap_vld,
        m1_V_out,
        m1_V_out_ap_vld,
        m0_V_out,
        m0_V_out_ap_vld,
        t1_V_out,
        t1_V_out_ap_vld,
        t0_V_out,
        t0_V_out_ap_vld,
        ap_ext_blocking_n,
        ap_str_blocking_n,
        ap_int_blocking_n
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [7:0] in_mat_data1_dout;
input  [1:0] in_mat_data1_num_data_valid;
input  [1:0] in_mat_data1_fifo_cap;
input   in_mat_data1_empty_n;
output   in_mat_data1_read;
output  [7:0] gaussian_mat_data1_din;
input  [1:0] gaussian_mat_data1_num_data_valid;
input  [1:0] gaussian_mat_data1_fifo_cap;
input   gaussian_mat_data1_full_n;
output   gaussian_mat_data1_write;
input  [15:0] img_width;
output  [10:0] buf_V_address0;
output   buf_V_ce0;
input  [7:0] buf_V_q0;
output  [10:0] buf_V_address1;
output   buf_V_ce1;
output   buf_V_we1;
output  [7:0] buf_V_d1;
output  [10:0] buf_V_5_address0;
output   buf_V_5_ce0;
input  [7:0] buf_V_5_q0;
output  [10:0] buf_V_5_address1;
output   buf_V_5_ce1;
output   buf_V_5_we1;
output  [7:0] buf_V_5_d1;
output  [10:0] buf_V_6_address0;
output   buf_V_6_ce0;
input  [7:0] buf_V_6_q0;
output  [10:0] buf_V_6_address1;
output   buf_V_6_ce1;
output   buf_V_6_we1;
output  [7:0] buf_V_6_d1;
input  [1:0] tp_V;
input  [1:0] mid_V;
input  [1:0] bottom_V;
input  [0:0] cmp_i_i422_i;
output  [7:0] b1_V_out;
output   b1_V_out_ap_vld;
output  [7:0] b0_V_out;
output   b0_V_out_ap_vld;
output  [7:0] m1_V_out;
output   m1_V_out_ap_vld;
output  [7:0] m0_V_out;
output   m0_V_out_ap_vld;
output  [7:0] t1_V_out;
output   t1_V_out_ap_vld;
output  [7:0] t0_V_out;
output   t0_V_out_ap_vld;
output   ap_ext_blocking_n;
output   ap_str_blocking_n;
output   ap_int_blocking_n;

reg ap_idle;
reg in_mat_data1_read;
reg gaussian_mat_data1_write;
reg buf_V_ce0;
reg[10:0] buf_V_address1;
reg buf_V_ce1;
reg buf_V_we1;
reg[7:0] buf_V_d1;
reg buf_V_5_ce0;
reg[10:0] buf_V_5_address1;
reg buf_V_5_ce1;
reg buf_V_5_we1;
reg[7:0] buf_V_5_d1;
reg buf_V_6_ce0;
reg[10:0] buf_V_6_address1;
reg buf_V_6_ce1;
reg buf_V_6_we1;
reg[7:0] buf_V_6_d1;
reg b1_V_out_ap_vld;
reg b0_V_out_ap_vld;
reg m1_V_out_ap_vld;
reg m0_V_out_ap_vld;
reg t1_V_out_ap_vld;
reg t0_V_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
reg   [0:0] icmp_ln1027_reg_733;
wire   [0:0] cmp_i_i422_i_read_reg_706;
reg    ap_predicate_op56_read_state2;
reg    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
reg   [0:0] icmp_ln1019_7_reg_752;
reg   [0:0] icmp_ln1019_7_reg_752_pp0_iter3_reg;
reg    ap_block_state5_pp0_stage0_iter4;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln1027_fu_377_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    in_mat_data1_blk_n;
wire    ap_block_pp0_stage0;
reg    gaussian_mat_data1_blk_n;
reg    ap_block_pp0_stage0_11001;
wire   [1:0] bottom_V_read_reg_710;
reg   [12:0] col_V_9_reg_725;
reg   [12:0] col_V_9_reg_725_pp0_iter1_reg;
reg   [0:0] icmp_ln1027_reg_733_pp0_iter1_reg;
reg   [0:0] icmp_ln1027_reg_733_pp0_iter2_reg;
wire   [0:0] icmp_ln1019_7_fu_412_p2;
reg   [7:0] g_x_V_reg_756;
reg    ap_condition_exit_pp0_iter3_stage0;
wire    src_buf1_V_xfExtractPixels_1_1_0_1_fu_320_ap_ready;
wire   [7:0] src_buf1_V_xfExtractPixels_1_1_0_1_fu_320_ap_return;
wire    src_buf1_V_xfExtractPixels_1_1_0_1_fu_320_ap_ext_blocking_n;
wire    src_buf1_V_xfExtractPixels_1_1_0_1_fu_320_ap_str_blocking_n;
wire    src_buf1_V_xfExtractPixels_1_1_0_1_fu_320_ap_int_blocking_n;
wire    src_buf2_V_xfExtractPixels_1_1_0_1_fu_325_ap_ready;
wire   [7:0] src_buf2_V_xfExtractPixels_1_1_0_1_fu_325_ap_return;
wire    src_buf2_V_xfExtractPixels_1_1_0_1_fu_325_ap_ext_blocking_n;
wire    src_buf2_V_xfExtractPixels_1_1_0_1_fu_325_ap_str_blocking_n;
wire    src_buf2_V_xfExtractPixels_1_1_0_1_fu_325_ap_int_blocking_n;
wire    src_buf3_V_xfExtractPixels_1_1_0_1_fu_330_ap_ready;
wire   [7:0] src_buf3_V_xfExtractPixels_1_1_0_1_fu_330_ap_return;
wire    src_buf3_V_xfExtractPixels_1_1_0_1_fu_330_ap_ext_blocking_n;
wire    src_buf3_V_xfExtractPixels_1_1_0_1_fu_330_ap_str_blocking_n;
wire    src_buf3_V_xfExtractPixels_1_1_0_1_fu_330_ap_int_blocking_n;
wire   [7:0] buf0_V_fu_438_p5;
wire   [7:0] buf1_V_fu_450_p5;
wire   [7:0] buf2_V_fu_462_p5;
wire   [63:0] zext_ln541_3_fu_394_p1;
wire   [63:0] zext_ln541_fu_400_p1;
wire   [63:0] zext_ln541_4_fu_406_p1;
reg   [12:0] col_V_fu_102;
wire   [12:0] col_V_10_fu_383_p2;
wire    ap_loop_init;
reg   [12:0] ap_sig_allocacmp_col_V_9;
reg   [7:0] t0_V_fu_106;
reg   [7:0] m0_V_fu_110;
reg   [7:0] b0_V_fu_114;
reg   [7:0] t1_V_fu_118;
reg   [7:0] m1_V_fu_122;
reg   [7:0] b1_V_fu_126;
reg    ap_block_pp0_stage0_01001;
wire   [15:0] zext_ln1027_fu_373_p1;
wire   [8:0] zext_ln45_fu_474_p1;
wire   [8:0] zext_ln46_fu_482_p1;
wire   [8:0] A00_fu_490_p2;
wire   [8:0] zext_ln45_1_fu_478_p1;
wire   [8:0] zext_ln45_2_fu_486_p1;
wire   [8:0] add_ln49_fu_500_p2;
wire   [9:0] zext_ln49_fu_506_p1;
wire   [9:0] zext_ln46_1_fu_496_p1;
wire   [8:0] zext_ln48_fu_520_p1;
wire   [8:0] zext_ln47_fu_516_p1;
wire   [8:0] add_ln48_fu_528_p2;
wire   [8:0] zext_ln48_1_fu_524_p1;
wire   [8:0] zext_ln50_1_fu_538_p1;
wire   [8:0] add_ln50_fu_542_p2;
wire   [9:0] zext_ln50_2_fu_548_p1;
wire   [9:0] zext_ln50_fu_534_p1;
wire   [9:0] add_ln50_1_fu_552_p2;
wire   [9:0] A0_fu_510_p2;
wire   [10:0] A1_fu_558_p3;
wire   [9:0] A2_fu_566_p3;
wire   [10:0] zext_ln52_fu_574_p1;
wire   [10:0] zext_ln52_2_fu_582_p1;
wire   [10:0] add_ln52_fu_586_p2;
wire   [11:0] zext_ln52_3_fu_592_p1;
wire   [11:0] zext_ln52_1_fu_578_p1;
wire   [11:0] add_ln52_1_fu_596_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_int_blocking_cur_n;
reg    ap_ext_blocking_sub_n;
reg    ap_wait_0;
reg    ap_sub_ext_blocking_0;
reg    ap_wait_1;
reg    ap_sub_ext_blocking_1;
reg    ap_wait_2;
reg    ap_sub_ext_blocking_2;
reg    ap_str_blocking_sub_n;
reg    ap_sub_str_blocking_0;
reg    ap_sub_str_blocking_1;
reg    ap_sub_str_blocking_2;
reg    ap_int_blocking_sub_n;
reg    ap_sub_int_blocking_0;
reg    ap_sub_int_blocking_1;
reg    ap_sub_int_blocking_2;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_581;
reg    ap_condition_585;
reg    ap_condition_588;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_done_reg = 1'b0;
end

canny_accel_xfExtractPixels_1_1_0_1 src_buf1_V_xfExtractPixels_1_1_0_1_fu_320(
    .ap_ready(src_buf1_V_xfExtractPixels_1_1_0_1_fu_320_ap_ready),
    .p_read1(buf0_V_fu_438_p5),
    .ap_return(src_buf1_V_xfExtractPixels_1_1_0_1_fu_320_ap_return),
    .ap_ext_blocking_n(src_buf1_V_xfExtractPixels_1_1_0_1_fu_320_ap_ext_blocking_n),
    .ap_str_blocking_n(src_buf1_V_xfExtractPixels_1_1_0_1_fu_320_ap_str_blocking_n),
    .ap_int_blocking_n(src_buf1_V_xfExtractPixels_1_1_0_1_fu_320_ap_int_blocking_n)
);

canny_accel_xfExtractPixels_1_1_0_1 src_buf2_V_xfExtractPixels_1_1_0_1_fu_325(
    .ap_ready(src_buf2_V_xfExtractPixels_1_1_0_1_fu_325_ap_ready),
    .p_read1(buf1_V_fu_450_p5),
    .ap_return(src_buf2_V_xfExtractPixels_1_1_0_1_fu_325_ap_return),
    .ap_ext_blocking_n(src_buf2_V_xfExtractPixels_1_1_0_1_fu_325_ap_ext_blocking_n),
    .ap_str_blocking_n(src_buf2_V_xfExtractPixels_1_1_0_1_fu_325_ap_str_blocking_n),
    .ap_int_blocking_n(src_buf2_V_xfExtractPixels_1_1_0_1_fu_325_ap_int_blocking_n)
);

canny_accel_xfExtractPixels_1_1_0_1 src_buf3_V_xfExtractPixels_1_1_0_1_fu_330(
    .ap_ready(src_buf3_V_xfExtractPixels_1_1_0_1_fu_330_ap_ready),
    .p_read1(buf2_V_fu_462_p5),
    .ap_return(src_buf3_V_xfExtractPixels_1_1_0_1_fu_330_ap_return),
    .ap_ext_blocking_n(src_buf3_V_xfExtractPixels_1_1_0_1_fu_330_ap_ext_blocking_n),
    .ap_str_blocking_n(src_buf3_V_xfExtractPixels_1_1_0_1_fu_330_ap_str_blocking_n),
    .ap_int_blocking_n(src_buf3_V_xfExtractPixels_1_1_0_1_fu_330_ap_int_blocking_n)
);

canny_accel_mux_32_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 8 ))
mux_32_8_1_1_U75(
    .din0(buf_V_q0),
    .din1(buf_V_5_q0),
    .din2(buf_V_6_q0),
    .din3(tp_V),
    .dout(buf0_V_fu_438_p5)
);

canny_accel_mux_32_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 8 ))
mux_32_8_1_1_U76(
    .din0(buf_V_q0),
    .din1(buf_V_5_q0),
    .din2(buf_V_6_q0),
    .din3(mid_V),
    .dout(buf1_V_fu_450_p5)
);

canny_accel_mux_32_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 8 ))
mux_32_8_1_1_U77(
    .din0(buf_V_q0),
    .din1(buf_V_5_q0),
    .din2(buf_V_6_q0),
    .din3(bottom_V),
    .dout(buf2_V_fu_462_p5)
);

canny_accel_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter3_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter3_stage0)) begin
            ap_enable_reg_pp0_iter4 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            b0_V_fu_114 <= 8'd0;
        end else if (((ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln1027_reg_733_pp0_iter2_reg == 1'd1))) begin
            b0_V_fu_114 <= b1_V_fu_126;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            b1_V_fu_126 <= 8'd0;
        end else if (((ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln1027_reg_733_pp0_iter2_reg == 1'd1))) begin
            b1_V_fu_126 <= src_buf3_V_xfExtractPixels_1_1_0_1_fu_330_ap_return;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln1027_fu_377_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            col_V_fu_102 <= col_V_10_fu_383_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            col_V_fu_102 <= 13'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            m0_V_fu_110 <= 8'd0;
        end else if (((ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln1027_reg_733_pp0_iter2_reg == 1'd1))) begin
            m0_V_fu_110 <= m1_V_fu_122;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            m1_V_fu_122 <= 8'd0;
        end else if (((ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln1027_reg_733_pp0_iter2_reg == 1'd1))) begin
            m1_V_fu_122 <= src_buf2_V_xfExtractPixels_1_1_0_1_fu_325_ap_return;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            t0_V_fu_106 <= 8'd0;
        end else if (((ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln1027_reg_733_pp0_iter2_reg == 1'd1))) begin
            t0_V_fu_106 <= t1_V_fu_118;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            t1_V_fu_118 <= 8'd0;
        end else if (((ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln1027_reg_733_pp0_iter2_reg == 1'd1))) begin
            t1_V_fu_118 <= src_buf1_V_xfExtractPixels_1_1_0_1_fu_320_ap_return;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        col_V_9_reg_725 <= ap_sig_allocacmp_col_V_9;
        col_V_9_reg_725_pp0_iter1_reg <= col_V_9_reg_725;
        icmp_ln1027_reg_733 <= icmp_ln1027_fu_377_p2;
        icmp_ln1027_reg_733_pp0_iter1_reg <= icmp_ln1027_reg_733;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        icmp_ln1019_7_reg_752_pp0_iter3_reg <= icmp_ln1019_7_reg_752;
        icmp_ln1027_reg_733_pp0_iter2_reg <= icmp_ln1027_reg_733_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln1027_reg_733_pp0_iter2_reg == 1'd1))) begin
        g_x_V_reg_756 <= {{add_ln52_1_fu_596_p2[11:4]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln1027_reg_733_pp0_iter1_reg == 1'd1))) begin
        icmp_ln1019_7_reg_752 <= icmp_ln1019_7_fu_412_p2;
    end
end

always @ (*) begin
    if (((icmp_ln1027_fu_377_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln1027_reg_733_pp0_iter2_reg == 1'd0))) begin
        ap_condition_exit_pp0_iter3_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter3_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter3_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((((ap_wait_2 & ap_sub_ext_blocking_2) == 1'b1) & ((ap_wait_1 & ap_sub_ext_blocking_1) == 1'b1) & ((ap_wait_0 & ap_sub_ext_blocking_0) == 1'b1))) begin
        ap_ext_blocking_sub_n = 1'b0;
    end else begin
        ap_ext_blocking_sub_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_wait_2 & ap_sub_int_blocking_2) == 1'b1) & ((ap_wait_1 & ap_sub_int_blocking_1) == 1'b1) & ((ap_wait_0 & ap_sub_int_blocking_0) == 1'b1))) begin
        ap_int_blocking_sub_n = 1'b0;
    end else begin
        ap_int_blocking_sub_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_col_V_9 = 13'd0;
    end else begin
        ap_sig_allocacmp_col_V_9 = col_V_fu_102;
    end
end

always @ (*) begin
    if ((((ap_wait_2 & ap_sub_str_blocking_2) == 1'b1) & ((ap_wait_1 & ap_sub_str_blocking_1) == 1'b1) & ((ap_wait_0 & ap_sub_str_blocking_0) == 1'b1))) begin
        ap_str_blocking_sub_n = 1'b0;
    end else begin
        ap_str_blocking_sub_n = 1'b1;
    end
end

always @ (*) begin
    if ((src_buf1_V_xfExtractPixels_1_1_0_1_fu_320_ap_ext_blocking_n == 1'b0)) begin
        ap_sub_ext_blocking_0 = 1'b1;
    end else begin
        ap_sub_ext_blocking_0 = 1'b0;
    end
end

always @ (*) begin
    if ((src_buf2_V_xfExtractPixels_1_1_0_1_fu_325_ap_ext_blocking_n == 1'b0)) begin
        ap_sub_ext_blocking_1 = 1'b1;
    end else begin
        ap_sub_ext_blocking_1 = 1'b0;
    end
end

always @ (*) begin
    if ((src_buf3_V_xfExtractPixels_1_1_0_1_fu_330_ap_ext_blocking_n == 1'b0)) begin
        ap_sub_ext_blocking_2 = 1'b1;
    end else begin
        ap_sub_ext_blocking_2 = 1'b0;
    end
end

always @ (*) begin
    if ((src_buf1_V_xfExtractPixels_1_1_0_1_fu_320_ap_int_blocking_n == 1'b0)) begin
        ap_sub_int_blocking_0 = 1'b1;
    end else begin
        ap_sub_int_blocking_0 = 1'b0;
    end
end

always @ (*) begin
    if ((src_buf2_V_xfExtractPixels_1_1_0_1_fu_325_ap_int_blocking_n == 1'b0)) begin
        ap_sub_int_blocking_1 = 1'b1;
    end else begin
        ap_sub_int_blocking_1 = 1'b0;
    end
end

always @ (*) begin
    if ((src_buf3_V_xfExtractPixels_1_1_0_1_fu_330_ap_int_blocking_n == 1'b0)) begin
        ap_sub_int_blocking_2 = 1'b1;
    end else begin
        ap_sub_int_blocking_2 = 1'b0;
    end
end

always @ (*) begin
    if ((src_buf1_V_xfExtractPixels_1_1_0_1_fu_320_ap_str_blocking_n == 1'b0)) begin
        ap_sub_str_blocking_0 = 1'b1;
    end else begin
        ap_sub_str_blocking_0 = 1'b0;
    end
end

always @ (*) begin
    if ((src_buf2_V_xfExtractPixels_1_1_0_1_fu_325_ap_str_blocking_n == 1'b0)) begin
        ap_sub_str_blocking_1 = 1'b1;
    end else begin
        ap_sub_str_blocking_1 = 1'b0;
    end
end

always @ (*) begin
    if ((src_buf3_V_xfExtractPixels_1_1_0_1_fu_330_ap_str_blocking_n == 1'b0)) begin
        ap_sub_str_blocking_2 = 1'b1;
    end else begin
        ap_sub_str_blocking_2 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_ST_fsm_pp0_stage0 == ap_CS_fsm)) begin
        ap_wait_0 = 1'b1;
    end else begin
        ap_wait_0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_ST_fsm_pp0_stage0 == ap_CS_fsm)) begin
        ap_wait_1 = 1'b1;
    end else begin
        ap_wait_1 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_ST_fsm_pp0_stage0 == ap_CS_fsm)) begin
        ap_wait_2 = 1'b1;
    end else begin
        ap_wait_2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln1027_reg_733_pp0_iter2_reg == 1'd0))) begin
        b0_V_out_ap_vld = 1'b1;
    end else begin
        b0_V_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln1027_reg_733_pp0_iter2_reg == 1'd0))) begin
        b1_V_out_ap_vld = 1'b1;
    end else begin
        b1_V_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_581)) begin
        if ((cmp_i_i422_i == 1'd1)) begin
            buf_V_5_address1 = zext_ln541_fu_400_p1;
        end else if ((cmp_i_i422_i_read_reg_706 == 1'd0)) begin
            buf_V_5_address1 = zext_ln541_3_fu_394_p1;
        end else begin
            buf_V_5_address1 = 'bx;
        end
    end else begin
        buf_V_5_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        buf_V_5_ce0 = 1'b1;
    end else begin
        buf_V_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (cmp_i_i422_i == 1'd1) & (icmp_ln1027_reg_733 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (bottom_V_read_reg_710 == 2'd1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (cmp_i_i422_i_read_reg_706 == 1'd0) & (icmp_ln1027_reg_733 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (bottom_V_read_reg_710 == 2'd1)))) begin
        buf_V_5_ce1 = 1'b1;
    end else begin
        buf_V_5_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_581)) begin
        if ((cmp_i_i422_i == 1'd1)) begin
            buf_V_5_d1 = in_mat_data1_dout;
        end else if ((cmp_i_i422_i_read_reg_706 == 1'd0)) begin
            buf_V_5_d1 = 8'd0;
        end else begin
            buf_V_5_d1 = 'bx;
        end
    end else begin
        buf_V_5_d1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (cmp_i_i422_i == 1'd1) & (icmp_ln1027_reg_733 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (bottom_V_read_reg_710 == 2'd1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (cmp_i_i422_i_read_reg_706 == 1'd0) & (icmp_ln1027_reg_733 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (bottom_V_read_reg_710 == 2'd1)))) begin
        buf_V_5_we1 = 1'b1;
    end else begin
        buf_V_5_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_585)) begin
        if ((cmp_i_i422_i == 1'd1)) begin
            buf_V_6_address1 = zext_ln541_fu_400_p1;
        end else if ((cmp_i_i422_i_read_reg_706 == 1'd0)) begin
            buf_V_6_address1 = zext_ln541_3_fu_394_p1;
        end else begin
            buf_V_6_address1 = 'bx;
        end
    end else begin
        buf_V_6_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        buf_V_6_ce0 = 1'b1;
    end else begin
        buf_V_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((~(bottom_V_read_reg_710 == 2'd0) & ~(bottom_V_read_reg_710 == 2'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (cmp_i_i422_i == 1'd1) & (icmp_ln1027_reg_733 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | (~(bottom_V_read_reg_710 == 2'd0) & ~(bottom_V_read_reg_710 == 2'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (cmp_i_i422_i_read_reg_706 == 1'd0) & (icmp_ln1027_reg_733 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        buf_V_6_ce1 = 1'b1;
    end else begin
        buf_V_6_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_585)) begin
        if ((cmp_i_i422_i == 1'd1)) begin
            buf_V_6_d1 = in_mat_data1_dout;
        end else if ((cmp_i_i422_i_read_reg_706 == 1'd0)) begin
            buf_V_6_d1 = 8'd0;
        end else begin
            buf_V_6_d1 = 'bx;
        end
    end else begin
        buf_V_6_d1 = 'bx;
    end
end

always @ (*) begin
    if (((~(bottom_V_read_reg_710 == 2'd0) & ~(bottom_V_read_reg_710 == 2'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (cmp_i_i422_i == 1'd1) & (icmp_ln1027_reg_733 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | (~(bottom_V_read_reg_710 == 2'd0) & ~(bottom_V_read_reg_710 == 2'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (cmp_i_i422_i_read_reg_706 == 1'd0) & (icmp_ln1027_reg_733 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        buf_V_6_we1 = 1'b1;
    end else begin
        buf_V_6_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_588)) begin
        if ((cmp_i_i422_i == 1'd1)) begin
            buf_V_address1 = zext_ln541_fu_400_p1;
        end else if ((cmp_i_i422_i_read_reg_706 == 1'd0)) begin
            buf_V_address1 = zext_ln541_3_fu_394_p1;
        end else begin
            buf_V_address1 = 'bx;
        end
    end else begin
        buf_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        buf_V_ce0 = 1'b1;
    end else begin
        buf_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (cmp_i_i422_i == 1'd1) & (icmp_ln1027_reg_733 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (bottom_V_read_reg_710 == 2'd0)) | ((1'b0 == ap_block_pp0_stage0_11001) & (cmp_i_i422_i_read_reg_706 == 1'd0) & (icmp_ln1027_reg_733 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (bottom_V_read_reg_710 == 2'd0)))) begin
        buf_V_ce1 = 1'b1;
    end else begin
        buf_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_588)) begin
        if ((cmp_i_i422_i == 1'd1)) begin
            buf_V_d1 = in_mat_data1_dout;
        end else if ((cmp_i_i422_i_read_reg_706 == 1'd0)) begin
            buf_V_d1 = 8'd0;
        end else begin
            buf_V_d1 = 'bx;
        end
    end else begin
        buf_V_d1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (cmp_i_i422_i == 1'd1) & (icmp_ln1027_reg_733 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (bottom_V_read_reg_710 == 2'd0)) | ((1'b0 == ap_block_pp0_stage0_11001) & (cmp_i_i422_i_read_reg_706 == 1'd0) & (icmp_ln1027_reg_733 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (bottom_V_read_reg_710 == 2'd0)))) begin
        buf_V_we1 = 1'b1;
    end else begin
        buf_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln1019_7_reg_752_pp0_iter3_reg == 1'd0) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        gaussian_mat_data1_blk_n = gaussian_mat_data1_full_n;
    end else begin
        gaussian_mat_data1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln1019_7_reg_752_pp0_iter3_reg == 1'd0) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        gaussian_mat_data1_write = 1'b1;
    end else begin
        gaussian_mat_data1_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_predicate_op56_read_state2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        in_mat_data1_blk_n = in_mat_data1_empty_n;
    end else begin
        in_mat_data1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op56_read_state2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        in_mat_data1_read = 1'b1;
    end else begin
        in_mat_data1_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln1027_reg_733_pp0_iter2_reg == 1'd0))) begin
        m0_V_out_ap_vld = 1'b1;
    end else begin
        m0_V_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln1027_reg_733_pp0_iter2_reg == 1'd0))) begin
        m1_V_out_ap_vld = 1'b1;
    end else begin
        m1_V_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln1027_reg_733_pp0_iter2_reg == 1'd0))) begin
        t0_V_out_ap_vld = 1'b1;
    end else begin
        t0_V_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln1027_reg_733_pp0_iter2_reg == 1'd0))) begin
        t1_V_out_ap_vld = 1'b1;
    end else begin
        t1_V_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign A00_fu_490_p2 = (zext_ln45_fu_474_p1 + zext_ln46_fu_482_p1);

assign A0_fu_510_p2 = (zext_ln49_fu_506_p1 + zext_ln46_1_fu_496_p1);

assign A1_fu_558_p3 = {{add_ln50_1_fu_552_p2}, {1'd0}};

assign A2_fu_566_p3 = {{m1_V_fu_122}, {2'd0}};

assign add_ln48_fu_528_p2 = (zext_ln48_fu_520_p1 + zext_ln47_fu_516_p1);

assign add_ln49_fu_500_p2 = (zext_ln45_1_fu_478_p1 + zext_ln45_2_fu_486_p1);

assign add_ln50_1_fu_552_p2 = (zext_ln50_2_fu_548_p1 + zext_ln50_fu_534_p1);

assign add_ln50_fu_542_p2 = (zext_ln48_1_fu_524_p1 + zext_ln50_1_fu_538_p1);

assign add_ln52_1_fu_596_p2 = (zext_ln52_3_fu_592_p1 + zext_ln52_1_fu_578_p1);

assign add_ln52_fu_586_p2 = (zext_ln52_fu_574_p1 + zext_ln52_2_fu_582_p1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((icmp_ln1019_7_reg_752_pp0_iter3_reg == 1'd0) & (gaussian_mat_data1_full_n == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1)) | ((ap_predicate_op56_read_state2 == 1'b1) & (in_mat_data1_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((icmp_ln1019_7_reg_752_pp0_iter3_reg == 1'd0) & (gaussian_mat_data1_full_n == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1)) | ((ap_predicate_op56_read_state2 == 1'b1) & (in_mat_data1_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((icmp_ln1019_7_reg_752_pp0_iter3_reg == 1'd0) & (gaussian_mat_data1_full_n == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1)) | ((ap_predicate_op56_read_state2 == 1'b1) & (in_mat_data1_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = ((ap_predicate_op56_read_state2 == 1'b1) & (in_mat_data1_empty_n == 1'b0));
end

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state5_pp0_stage0_iter4 = ((icmp_ln1019_7_reg_752_pp0_iter3_reg == 1'd0) & (gaussian_mat_data1_full_n == 1'b0));
end

always @ (*) begin
    ap_condition_581 = ((1'b0 == ap_block_pp0_stage0) & (icmp_ln1027_reg_733 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (bottom_V_read_reg_710 == 2'd1));
end

always @ (*) begin
    ap_condition_585 = (~(bottom_V_read_reg_710 == 2'd0) & ~(bottom_V_read_reg_710 == 2'd1) & (1'b0 == ap_block_pp0_stage0) & (icmp_ln1027_reg_733 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_condition_588 = ((1'b0 == ap_block_pp0_stage0) & (icmp_ln1027_reg_733 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (bottom_V_read_reg_710 == 2'd0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_ext_blocking_n = (ap_ext_blocking_sub_n & 1'b1);

assign ap_int_blocking_cur_n = (in_mat_data1_blk_n & gaussian_mat_data1_blk_n);

assign ap_int_blocking_n = (ap_int_blocking_sub_n & ap_int_blocking_cur_n);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

always @ (*) begin
    ap_predicate_op56_read_state2 = ((cmp_i_i422_i == 1'd1) & (icmp_ln1027_reg_733 == 1'd1));
end

assign ap_str_blocking_n = (ap_str_blocking_sub_n & 1'b1);

assign b0_V_out = b0_V_fu_114;

assign b1_V_out = b1_V_fu_126;

assign bottom_V_read_reg_710 = bottom_V;

assign buf_V_5_address0 = zext_ln541_4_fu_406_p1;

assign buf_V_6_address0 = zext_ln541_4_fu_406_p1;

assign buf_V_address0 = zext_ln541_4_fu_406_p1;

assign cmp_i_i422_i_read_reg_706 = cmp_i_i422_i;

assign col_V_10_fu_383_p2 = (ap_sig_allocacmp_col_V_9 + 13'd1);

assign gaussian_mat_data1_din = g_x_V_reg_756;

assign icmp_ln1019_7_fu_412_p2 = ((col_V_9_reg_725_pp0_iter1_reg == 13'd0) ? 1'b1 : 1'b0);

assign icmp_ln1027_fu_377_p2 = ((zext_ln1027_fu_373_p1 < img_width) ? 1'b1 : 1'b0);

assign m0_V_out = m0_V_fu_110;

assign m1_V_out = m1_V_fu_122;

assign t0_V_out = t0_V_fu_106;

assign t1_V_out = t1_V_fu_118;

assign zext_ln1027_fu_373_p1 = ap_sig_allocacmp_col_V_9;

assign zext_ln45_1_fu_478_p1 = src_buf1_V_xfExtractPixels_1_1_0_1_fu_320_ap_return;

assign zext_ln45_2_fu_486_p1 = src_buf3_V_xfExtractPixels_1_1_0_1_fu_330_ap_return;

assign zext_ln45_fu_474_p1 = t0_V_fu_106;

assign zext_ln46_1_fu_496_p1 = A00_fu_490_p2;

assign zext_ln46_fu_482_p1 = b0_V_fu_114;

assign zext_ln47_fu_516_p1 = b1_V_fu_126;

assign zext_ln48_1_fu_524_p1 = t1_V_fu_118;

assign zext_ln48_fu_520_p1 = m0_V_fu_110;

assign zext_ln49_fu_506_p1 = add_ln49_fu_500_p2;

assign zext_ln50_1_fu_538_p1 = src_buf2_V_xfExtractPixels_1_1_0_1_fu_325_ap_return;

assign zext_ln50_2_fu_548_p1 = add_ln50_fu_542_p2;

assign zext_ln50_fu_534_p1 = add_ln48_fu_528_p2;

assign zext_ln52_1_fu_578_p1 = A1_fu_558_p3;

assign zext_ln52_2_fu_582_p1 = A2_fu_566_p3;

assign zext_ln52_3_fu_592_p1 = add_ln52_fu_586_p2;

assign zext_ln52_fu_574_p1 = A0_fu_510_p2;

assign zext_ln541_3_fu_394_p1 = col_V_9_reg_725;

assign zext_ln541_4_fu_406_p1 = col_V_9_reg_725_pp0_iter1_reg;

assign zext_ln541_fu_400_p1 = col_V_9_reg_725;

endmodule //canny_accel_xFAverageGaussianMask3x3_Pipeline_Col_Loop
