-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity canny_accel_xFAngleKernel_Pipeline_colLoop is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    gradx2_mat_data4_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    gradx2_mat_data4_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    gradx2_mat_data4_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    gradx2_mat_data4_empty_n : IN STD_LOGIC;
    gradx2_mat_data4_read : OUT STD_LOGIC;
    grady2_mat_data7_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    grady2_mat_data7_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    grady2_mat_data7_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    grady2_mat_data7_empty_n : IN STD_LOGIC;
    grady2_mat_data7_read : OUT STD_LOGIC;
    phase_mat_data9_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    phase_mat_data9_num_data_valid : IN STD_LOGIC_VECTOR (13 downto 0);
    phase_mat_data9_fifo_cap : IN STD_LOGIC_VECTOR (13 downto 0);
    phase_mat_data9_full_n : IN STD_LOGIC;
    phase_mat_data9_write : OUT STD_LOGIC;
    imgwidth_load : IN STD_LOGIC_VECTOR (15 downto 0);
    ap_ext_blocking_n : OUT STD_LOGIC;
    ap_str_blocking_n : OUT STD_LOGIC;
    ap_int_blocking_n : OUT STD_LOGIC );
end;


architecture behav of canny_accel_xFAngleKernel_Pipeline_colLoop is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv17_0 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_lv8_5A : STD_LOGIC_VECTOR (7 downto 0) := "01011010";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv8_2D : STD_LOGIC_VECTOR (7 downto 0) := "00101101";
    constant ap_const_lv8_87 : STD_LOGIC_VECTOR (7 downto 0) := "10000111";
    constant ap_const_lv32_3505 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000011010100000101";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln464_fu_115_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal gradx2_mat_data4_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal grady2_mat_data7_blk_n : STD_LOGIC;
    signal phase_mat_data9_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal val_src1_V_reg_294 : STD_LOGIC_VECTOR (15 downto 0);
    signal val_src1_V_reg_294_pp0_iter2_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal val_src1_V_reg_294_pp0_iter3_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal val_src2_V_reg_299 : STD_LOGIC_VECTOR (15 downto 0);
    signal val_src2_V_reg_299_pp0_iter2_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal val_src2_V_reg_299_pp0_iter3_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_7_reg_310 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_reg_310_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_reg_310_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln501_fu_170_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln501_reg_315 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln501_reg_315_pp0_iter2_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln501_reg_315_pp0_iter3_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal angle_V_fu_267_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal angle_V_reg_320 : STD_LOGIC_VECTOR (7 downto 0);
    signal j_V_fu_78 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln1027_fu_121_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_j_V_load : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal tmp_fu_132_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln488_fu_140_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln488_fu_140_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_fu_132_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln488_fu_144_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal xa_fu_150_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_7_fu_162_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln489_fu_174_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln489_fu_177_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal select_ln489_fu_183_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal ya_fu_190_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_275_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln_fu_203_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tg67x_fu_210_p2 : STD_LOGIC_VECTOR (31 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of tg67x_fu_210_p2 : signal is "no";
    signal xor_ln505_fu_221_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln498_fu_198_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln502_fu_215_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln498_fu_233_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln502_fu_239_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_fu_225_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln502_fu_253_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln502_fu_245_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln502_1_fu_259_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_275_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_275_ce : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_int_blocking_cur_n : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component canny_accel_mul_mul_17s_14ns_32_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (16 downto 0);
        din1 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component canny_accel_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mul_mul_17s_14ns_32_4_1_U181 : component canny_accel_mul_mul_17s_14ns_32_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 17,
        din1_WIDTH => 14,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => xa_fu_150_p3,
        din1 => grp_fu_275_p1,
        ce => grp_fu_275_ce,
        dout => grp_fu_275_p2);

    flow_control_loop_pipe_sequential_init_U : component canny_accel_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter4_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    j_V_fu_78_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln464_fu_115_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    j_V_fu_78 <= add_ln1027_fu_121_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    j_V_fu_78 <= ap_const_lv16_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                angle_V_reg_320 <= angle_V_fu_267_p3;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                tmp_7_reg_310_pp0_iter2_reg <= tmp_7_reg_310;
                tmp_7_reg_310_pp0_iter3_reg <= tmp_7_reg_310_pp0_iter2_reg;
                trunc_ln501_reg_315_pp0_iter2_reg <= trunc_ln501_reg_315;
                trunc_ln501_reg_315_pp0_iter3_reg <= trunc_ln501_reg_315_pp0_iter2_reg;
                val_src1_V_reg_294_pp0_iter2_reg <= val_src1_V_reg_294;
                val_src1_V_reg_294_pp0_iter3_reg <= val_src1_V_reg_294_pp0_iter2_reg;
                val_src2_V_reg_299_pp0_iter2_reg <= val_src2_V_reg_299;
                val_src2_V_reg_299_pp0_iter3_reg <= val_src2_V_reg_299_pp0_iter2_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                tmp_7_reg_310 <= tmp_7_fu_162_p1(15 downto 15);
                trunc_ln501_reg_315 <= trunc_ln501_fu_170_p1;
                val_src1_V_reg_294 <= gradx2_mat_data4_dout;
                val_src2_V_reg_299 <= grady2_mat_data7_dout;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln1027_fu_121_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_j_V_load) + unsigned(ap_const_lv16_1));
    and_ln502_fu_239_p2 <= (xor_ln498_fu_233_p2 and icmp_ln502_fu_215_p2);
    angle_V_fu_267_p3 <= 
        select_ln502_fu_245_p3 when (or_ln502_fu_253_p2(0) = '1') else 
        select_ln502_1_fu_259_p3;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter5, gradx2_mat_data4_empty_n, grady2_mat_data7_empty_n, phase_mat_data9_full_n)
    begin
                ap_block_pp0_stage0_01001 <= (((phase_mat_data9_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((grady2_mat_data7_empty_n = ap_const_logic_0) or (gradx2_mat_data4_empty_n = ap_const_logic_0))));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter5, gradx2_mat_data4_empty_n, grady2_mat_data7_empty_n, phase_mat_data9_full_n)
    begin
                ap_block_pp0_stage0_11001 <= (((phase_mat_data9_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((grady2_mat_data7_empty_n = ap_const_logic_0) or (gradx2_mat_data4_empty_n = ap_const_logic_0))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter5, gradx2_mat_data4_empty_n, grady2_mat_data7_empty_n, phase_mat_data9_full_n)
    begin
                ap_block_pp0_stage0_subdone <= (((phase_mat_data9_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((grady2_mat_data7_empty_n = ap_const_logic_0) or (gradx2_mat_data4_empty_n = ap_const_logic_0))));
    end process;

        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state2_pp0_stage0_iter1_assign_proc : process(gradx2_mat_data4_empty_n, grady2_mat_data7_empty_n)
    begin
                ap_block_state2_pp0_stage0_iter1 <= ((grady2_mat_data7_empty_n = ap_const_logic_0) or (gradx2_mat_data4_empty_n = ap_const_logic_0));
    end process;

        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state6_pp0_stage0_iter5_assign_proc : process(phase_mat_data9_full_n)
    begin
                ap_block_state6_pp0_stage0_iter5 <= (phase_mat_data9_full_n = ap_const_logic_0);
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln464_fu_115_p2)
    begin
        if (((icmp_ln464_fu_115_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter4_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter4_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;
    ap_ext_blocking_n <= (ap_const_logic_1 and ap_const_logic_1);

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5)
    begin
        if (((ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_int_blocking_cur_n <= (phase_mat_data9_blk_n and grady2_mat_data7_blk_n and gradx2_mat_data4_blk_n);
    ap_int_blocking_n <= (ap_int_blocking_cur_n and ap_const_logic_1);
    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_j_V_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, j_V_fu_78, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_j_V_load <= ap_const_lv16_0;
        else 
            ap_sig_allocacmp_j_V_load <= j_V_fu_78;
        end if; 
    end process;

    ap_str_blocking_n <= (ap_const_logic_1 and ap_const_logic_1);

    gradx2_mat_data4_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, gradx2_mat_data4_empty_n, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            gradx2_mat_data4_blk_n <= gradx2_mat_data4_empty_n;
        else 
            gradx2_mat_data4_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    gradx2_mat_data4_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            gradx2_mat_data4_read <= ap_const_logic_1;
        else 
            gradx2_mat_data4_read <= ap_const_logic_0;
        end if; 
    end process;


    grady2_mat_data7_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, grady2_mat_data7_empty_n, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grady2_mat_data7_blk_n <= grady2_mat_data7_empty_n;
        else 
            grady2_mat_data7_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    grady2_mat_data7_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grady2_mat_data7_read <= ap_const_logic_1;
        else 
            grady2_mat_data7_read <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_275_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_275_ce <= ap_const_logic_1;
        else 
            grp_fu_275_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_275_p1 <= ap_const_lv32_3505(14 - 1 downto 0);
    icmp_ln464_fu_115_p2 <= "1" when (ap_sig_allocacmp_j_V_load = imgwidth_load) else "0";
    icmp_ln498_fu_198_p2 <= "1" when (signed(ya_fu_190_p3) < signed(grp_fu_275_p2)) else "0";
    icmp_ln502_fu_215_p2 <= "1" when (signed(ya_fu_190_p3) > signed(tg67x_fu_210_p2)) else "0";
    or_ln502_fu_253_p2 <= (icmp_ln498_fu_198_p2 or and_ln502_fu_239_p2);

    phase_mat_data9_blk_n_assign_proc : process(ap_enable_reg_pp0_iter5, phase_mat_data9_full_n, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            phase_mat_data9_blk_n <= phase_mat_data9_full_n;
        else 
            phase_mat_data9_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    phase_mat_data9_din <= angle_V_reg_320;

    phase_mat_data9_write_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            phase_mat_data9_write <= ap_const_logic_1;
        else 
            phase_mat_data9_write <= ap_const_logic_0;
        end if; 
    end process;

    select_ln489_fu_183_p3 <= 
        sub_ln489_fu_177_p2 when (tmp_7_reg_310_pp0_iter3_reg(0) = '1') else 
        sext_ln489_fu_174_p1;
    select_ln502_1_fu_259_p3 <= 
        ap_const_lv8_2D when (tmp_8_fu_225_p3(0) = '1') else 
        ap_const_lv8_87;
    select_ln502_fu_245_p3 <= 
        ap_const_lv8_5A when (and_ln502_fu_239_p2(0) = '1') else 
        ap_const_lv8_0;
    sext_ln488_fu_140_p0 <= gradx2_mat_data4_dout;
        sext_ln488_fu_140_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln488_fu_140_p0),17));

        sext_ln489_fu_174_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(val_src2_V_reg_299_pp0_iter3_reg),17));

    shl_ln_fu_203_p3 <= (trunc_ln501_reg_315_pp0_iter3_reg & ap_const_lv16_0);
    sub_ln488_fu_144_p2 <= std_logic_vector(unsigned(ap_const_lv17_0) - unsigned(sext_ln488_fu_140_p1));
    sub_ln489_fu_177_p2 <= std_logic_vector(unsigned(ap_const_lv17_0) - unsigned(sext_ln489_fu_174_p1));
    tg67x_fu_210_p2 <= std_logic_vector(signed(grp_fu_275_p2) + signed(shl_ln_fu_203_p3));
    tmp_7_fu_162_p1 <= grady2_mat_data7_dout;
    tmp_8_fu_225_p3 <= xor_ln505_fu_221_p2(15 downto 15);
    tmp_fu_132_p1 <= gradx2_mat_data4_dout;
    tmp_fu_132_p3 <= tmp_fu_132_p1(15 downto 15);
    trunc_ln501_fu_170_p1 <= xa_fu_150_p3(16 - 1 downto 0);
    xa_fu_150_p3 <= 
        sub_ln488_fu_144_p2 when (tmp_fu_132_p3(0) = '1') else 
        sext_ln488_fu_140_p1;
    xor_ln498_fu_233_p2 <= (icmp_ln498_fu_198_p2 xor ap_const_lv1_1);
    xor_ln505_fu_221_p2 <= (val_src2_V_reg_299_pp0_iter3_reg xor val_src1_V_reg_294_pp0_iter3_reg);
    ya_fu_190_p3 <= (select_ln489_fu_183_p3 & ap_const_lv15_0);
end behav;
