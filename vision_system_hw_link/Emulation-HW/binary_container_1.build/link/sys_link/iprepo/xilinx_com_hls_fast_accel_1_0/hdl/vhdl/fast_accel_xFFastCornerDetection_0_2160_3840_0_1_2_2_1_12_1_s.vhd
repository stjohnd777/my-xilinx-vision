-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity fast_accel_xFFastCornerDetection_0_2160_3840_0_1_2_2_1_12_1_s is
port (
    imgInput_data1_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    imgInput_data1_empty_n : IN STD_LOGIC;
    imgInput_data1_read : OUT STD_LOGIC;
    imgOutput_data2_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    imgOutput_data2_full_n : IN STD_LOGIC;
    imgOutput_data2_write : OUT STD_LOGIC;
    p_image_height : IN STD_LOGIC_VECTOR (15 downto 0);
    p_image_width : IN STD_LOGIC_VECTOR (15 downto 0);
    p_threshold : IN STD_LOGIC_VECTOR (7 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    p_image_height_ap_vld : IN STD_LOGIC;
    p_image_width_ap_vld : IN STD_LOGIC;
    p_threshold_ap_vld : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_ext_blocking_n : OUT STD_LOGIC;
    ap_str_blocking_n : OUT STD_LOGIC;
    ap_int_blocking_n : OUT STD_LOGIC );
end;


architecture behav of fast_accel_xFFastCornerDetection_0_2160_3840_0_1_2_2_1_12_1_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_logic_0 : STD_LOGIC := '0';

attribute shreg_extract : string;
    signal xFfast7x7_0_2160_3840_0_1_2_2_1_3843_7_49_3_U0_ap_start : STD_LOGIC;
    signal xFfast7x7_0_2160_3840_0_1_2_2_1_3843_7_49_3_U0_ap_done : STD_LOGIC;
    signal xFfast7x7_0_2160_3840_0_1_2_2_1_3843_7_49_3_U0_ap_continue : STD_LOGIC;
    signal xFfast7x7_0_2160_3840_0_1_2_2_1_3843_7_49_3_U0_ap_idle : STD_LOGIC;
    signal xFfast7x7_0_2160_3840_0_1_2_2_1_3843_7_49_3_U0_ap_ready : STD_LOGIC;
    signal xFfast7x7_0_2160_3840_0_1_2_2_1_3843_7_49_3_U0_start_out : STD_LOGIC;
    signal xFfast7x7_0_2160_3840_0_1_2_2_1_3843_7_49_3_U0_start_write : STD_LOGIC;
    signal xFfast7x7_0_2160_3840_0_1_2_2_1_3843_7_49_3_U0_imgInput_data1_read : STD_LOGIC;
    signal xFfast7x7_0_2160_3840_0_1_2_2_1_3843_7_49_3_U0_p_dst_data1_din : STD_LOGIC_VECTOR (7 downto 0);
    signal xFfast7x7_0_2160_3840_0_1_2_2_1_3843_7_49_3_U0_p_dst_data1_write : STD_LOGIC;
    signal xFfast7x7_0_2160_3840_0_1_2_2_1_3843_7_49_3_U0_p_image_height_c_din : STD_LOGIC_VECTOR (15 downto 0);
    signal xFfast7x7_0_2160_3840_0_1_2_2_1_3843_7_49_3_U0_p_image_height_c_write : STD_LOGIC;
    signal xFfast7x7_0_2160_3840_0_1_2_2_1_3843_7_49_3_U0_p_image_width_c_din : STD_LOGIC_VECTOR (15 downto 0);
    signal xFfast7x7_0_2160_3840_0_1_2_2_1_3843_7_49_3_U0_p_image_width_c_write : STD_LOGIC;
    signal xFfast7x7_0_2160_3840_0_1_2_2_1_3843_7_49_3_U0_ap_ext_blocking_n : STD_LOGIC;
    signal xFfast7x7_0_2160_3840_0_1_2_2_1_3843_7_49_3_U0_ap_str_blocking_n : STD_LOGIC;
    signal xFfast7x7_0_2160_3840_0_1_2_2_1_3843_7_49_3_U0_ap_int_blocking_n : STD_LOGIC;
    signal xFfastnms_0_2160_3840_0_1_2_2_1_3841_3_9_4_U0_ap_start : STD_LOGIC;
    signal xFfastnms_0_2160_3840_0_1_2_2_1_3841_3_9_4_U0_ap_done : STD_LOGIC;
    signal xFfastnms_0_2160_3840_0_1_2_2_1_3841_3_9_4_U0_ap_continue : STD_LOGIC;
    signal xFfastnms_0_2160_3840_0_1_2_2_1_3841_3_9_4_U0_ap_idle : STD_LOGIC;
    signal xFfastnms_0_2160_3840_0_1_2_2_1_3841_3_9_4_U0_ap_ready : STD_LOGIC;
    signal xFfastnms_0_2160_3840_0_1_2_2_1_3841_3_9_4_U0_p_dst_data1_read : STD_LOGIC;
    signal xFfastnms_0_2160_3840_0_1_2_2_1_3841_3_9_4_U0_imgOutput_data2_din : STD_LOGIC_VECTOR (7 downto 0);
    signal xFfastnms_0_2160_3840_0_1_2_2_1_3841_3_9_4_U0_imgOutput_data2_write : STD_LOGIC;
    signal xFfastnms_0_2160_3840_0_1_2_2_1_3841_3_9_4_U0_img_height_read : STD_LOGIC;
    signal xFfastnms_0_2160_3840_0_1_2_2_1_3841_3_9_4_U0_img_width_read : STD_LOGIC;
    signal xFfastnms_0_2160_3840_0_1_2_2_1_3841_3_9_4_U0_ap_ext_blocking_n : STD_LOGIC;
    signal xFfastnms_0_2160_3840_0_1_2_2_1_3841_3_9_4_U0_ap_str_blocking_n : STD_LOGIC;
    signal xFfastnms_0_2160_3840_0_1_2_2_1_3841_3_9_4_U0_ap_int_blocking_n : STD_LOGIC;
    signal p_dst_data_full_n : STD_LOGIC;
    signal p_dst_data_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal p_dst_data_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal p_dst_data_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal p_dst_data_empty_n : STD_LOGIC;
    signal p_image_height_c_full_n : STD_LOGIC;
    signal p_image_height_c_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal p_image_height_c_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal p_image_height_c_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal p_image_height_c_empty_n : STD_LOGIC;
    signal p_image_width_c_full_n : STD_LOGIC;
    signal p_image_width_c_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal p_image_width_c_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal p_image_width_c_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal p_image_width_c_empty_n : STD_LOGIC;
    signal start_for_xFfastnms_0_2160_3840_0_1_2_2_1_3841_3_9_4_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_xFfastnms_0_2160_3840_0_1_2_2_1_3841_3_9_4_U0_full_n : STD_LOGIC;
    signal start_for_xFfastnms_0_2160_3840_0_1_2_2_1_3841_3_9_4_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_xFfastnms_0_2160_3840_0_1_2_2_1_3841_3_9_4_U0_empty_n : STD_LOGIC;
    signal ap_ext_blocking_cur_n : STD_LOGIC;
    signal ap_str_blocking_cur_n : STD_LOGIC;
    signal ap_int_blocking_cur_n : STD_LOGIC;
    signal ap_ext_blocking_sub_n : STD_LOGIC;
    signal ap_str_blocking_sub_n : STD_LOGIC;
    signal ap_int_blocking_sub_n : STD_LOGIC;

    component fast_accel_xFfast7x7_0_2160_3840_0_1_2_2_1_3843_7_49_3 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        imgInput_data1_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        imgInput_data1_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        imgInput_data1_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        imgInput_data1_empty_n : IN STD_LOGIC;
        imgInput_data1_read : OUT STD_LOGIC;
        p_dst_data1_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        p_dst_data1_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        p_dst_data1_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        p_dst_data1_full_n : IN STD_LOGIC;
        p_dst_data1_write : OUT STD_LOGIC;
        img_height : IN STD_LOGIC_VECTOR (15 downto 0);
        img_width : IN STD_LOGIC_VECTOR (15 downto 0);
        p_threshold : IN STD_LOGIC_VECTOR (7 downto 0);
        p_image_height_c_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        p_image_height_c_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        p_image_height_c_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        p_image_height_c_full_n : IN STD_LOGIC;
        p_image_height_c_write : OUT STD_LOGIC;
        p_image_width_c_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        p_image_width_c_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        p_image_width_c_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        p_image_width_c_full_n : IN STD_LOGIC;
        p_image_width_c_write : OUT STD_LOGIC;
        ap_ext_blocking_n : OUT STD_LOGIC;
        ap_str_blocking_n : OUT STD_LOGIC;
        ap_int_blocking_n : OUT STD_LOGIC );
    end component;


    component fast_accel_xFfastnms_0_2160_3840_0_1_2_2_1_3841_3_9_4 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_dst_data1_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        p_dst_data1_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        p_dst_data1_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        p_dst_data1_empty_n : IN STD_LOGIC;
        p_dst_data1_read : OUT STD_LOGIC;
        imgOutput_data2_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        imgOutput_data2_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        imgOutput_data2_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        imgOutput_data2_full_n : IN STD_LOGIC;
        imgOutput_data2_write : OUT STD_LOGIC;
        img_height_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        img_height_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        img_height_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        img_height_empty_n : IN STD_LOGIC;
        img_height_read : OUT STD_LOGIC;
        img_width_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        img_width_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        img_width_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        img_width_empty_n : IN STD_LOGIC;
        img_width_read : OUT STD_LOGIC;
        ap_ext_blocking_n : OUT STD_LOGIC;
        ap_str_blocking_n : OUT STD_LOGIC;
        ap_int_blocking_n : OUT STD_LOGIC );
    end component;


    component fast_accel_fifo_w8_d2_S_x IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_num_data_valid : OUT STD_LOGIC_VECTOR (1 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (1 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fast_accel_fifo_w16_d2_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (15 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (15 downto 0);
        if_num_data_valid : OUT STD_LOGIC_VECTOR (1 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (1 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fast_accel_start_for_xFfastnms_0_2160_3840_0_1_2_2_1_3841_3_9_4_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;



begin
    xFfast7x7_0_2160_3840_0_1_2_2_1_3843_7_49_3_U0 : component fast_accel_xFfast7x7_0_2160_3840_0_1_2_2_1_3843_7_49_3
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => xFfast7x7_0_2160_3840_0_1_2_2_1_3843_7_49_3_U0_ap_start,
        start_full_n => start_for_xFfastnms_0_2160_3840_0_1_2_2_1_3841_3_9_4_U0_full_n,
        ap_done => xFfast7x7_0_2160_3840_0_1_2_2_1_3843_7_49_3_U0_ap_done,
        ap_continue => xFfast7x7_0_2160_3840_0_1_2_2_1_3843_7_49_3_U0_ap_continue,
        ap_idle => xFfast7x7_0_2160_3840_0_1_2_2_1_3843_7_49_3_U0_ap_idle,
        ap_ready => xFfast7x7_0_2160_3840_0_1_2_2_1_3843_7_49_3_U0_ap_ready,
        start_out => xFfast7x7_0_2160_3840_0_1_2_2_1_3843_7_49_3_U0_start_out,
        start_write => xFfast7x7_0_2160_3840_0_1_2_2_1_3843_7_49_3_U0_start_write,
        imgInput_data1_dout => imgInput_data1_dout,
        imgInput_data1_num_data_valid => ap_const_lv2_0,
        imgInput_data1_fifo_cap => ap_const_lv2_0,
        imgInput_data1_empty_n => imgInput_data1_empty_n,
        imgInput_data1_read => xFfast7x7_0_2160_3840_0_1_2_2_1_3843_7_49_3_U0_imgInput_data1_read,
        p_dst_data1_din => xFfast7x7_0_2160_3840_0_1_2_2_1_3843_7_49_3_U0_p_dst_data1_din,
        p_dst_data1_num_data_valid => p_dst_data_num_data_valid,
        p_dst_data1_fifo_cap => p_dst_data_fifo_cap,
        p_dst_data1_full_n => p_dst_data_full_n,
        p_dst_data1_write => xFfast7x7_0_2160_3840_0_1_2_2_1_3843_7_49_3_U0_p_dst_data1_write,
        img_height => p_image_height,
        img_width => p_image_width,
        p_threshold => p_threshold,
        p_image_height_c_din => xFfast7x7_0_2160_3840_0_1_2_2_1_3843_7_49_3_U0_p_image_height_c_din,
        p_image_height_c_num_data_valid => p_image_height_c_num_data_valid,
        p_image_height_c_fifo_cap => p_image_height_c_fifo_cap,
        p_image_height_c_full_n => p_image_height_c_full_n,
        p_image_height_c_write => xFfast7x7_0_2160_3840_0_1_2_2_1_3843_7_49_3_U0_p_image_height_c_write,
        p_image_width_c_din => xFfast7x7_0_2160_3840_0_1_2_2_1_3843_7_49_3_U0_p_image_width_c_din,
        p_image_width_c_num_data_valid => p_image_width_c_num_data_valid,
        p_image_width_c_fifo_cap => p_image_width_c_fifo_cap,
        p_image_width_c_full_n => p_image_width_c_full_n,
        p_image_width_c_write => xFfast7x7_0_2160_3840_0_1_2_2_1_3843_7_49_3_U0_p_image_width_c_write,
        ap_ext_blocking_n => xFfast7x7_0_2160_3840_0_1_2_2_1_3843_7_49_3_U0_ap_ext_blocking_n,
        ap_str_blocking_n => xFfast7x7_0_2160_3840_0_1_2_2_1_3843_7_49_3_U0_ap_str_blocking_n,
        ap_int_blocking_n => xFfast7x7_0_2160_3840_0_1_2_2_1_3843_7_49_3_U0_ap_int_blocking_n);

    xFfastnms_0_2160_3840_0_1_2_2_1_3841_3_9_4_U0 : component fast_accel_xFfastnms_0_2160_3840_0_1_2_2_1_3841_3_9_4
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => xFfastnms_0_2160_3840_0_1_2_2_1_3841_3_9_4_U0_ap_start,
        ap_done => xFfastnms_0_2160_3840_0_1_2_2_1_3841_3_9_4_U0_ap_done,
        ap_continue => xFfastnms_0_2160_3840_0_1_2_2_1_3841_3_9_4_U0_ap_continue,
        ap_idle => xFfastnms_0_2160_3840_0_1_2_2_1_3841_3_9_4_U0_ap_idle,
        ap_ready => xFfastnms_0_2160_3840_0_1_2_2_1_3841_3_9_4_U0_ap_ready,
        p_dst_data1_dout => p_dst_data_dout,
        p_dst_data1_num_data_valid => p_dst_data_num_data_valid,
        p_dst_data1_fifo_cap => p_dst_data_fifo_cap,
        p_dst_data1_empty_n => p_dst_data_empty_n,
        p_dst_data1_read => xFfastnms_0_2160_3840_0_1_2_2_1_3841_3_9_4_U0_p_dst_data1_read,
        imgOutput_data2_din => xFfastnms_0_2160_3840_0_1_2_2_1_3841_3_9_4_U0_imgOutput_data2_din,
        imgOutput_data2_num_data_valid => ap_const_lv2_0,
        imgOutput_data2_fifo_cap => ap_const_lv2_0,
        imgOutput_data2_full_n => imgOutput_data2_full_n,
        imgOutput_data2_write => xFfastnms_0_2160_3840_0_1_2_2_1_3841_3_9_4_U0_imgOutput_data2_write,
        img_height_dout => p_image_height_c_dout,
        img_height_num_data_valid => p_image_height_c_num_data_valid,
        img_height_fifo_cap => p_image_height_c_fifo_cap,
        img_height_empty_n => p_image_height_c_empty_n,
        img_height_read => xFfastnms_0_2160_3840_0_1_2_2_1_3841_3_9_4_U0_img_height_read,
        img_width_dout => p_image_width_c_dout,
        img_width_num_data_valid => p_image_width_c_num_data_valid,
        img_width_fifo_cap => p_image_width_c_fifo_cap,
        img_width_empty_n => p_image_width_c_empty_n,
        img_width_read => xFfastnms_0_2160_3840_0_1_2_2_1_3841_3_9_4_U0_img_width_read,
        ap_ext_blocking_n => xFfastnms_0_2160_3840_0_1_2_2_1_3841_3_9_4_U0_ap_ext_blocking_n,
        ap_str_blocking_n => xFfastnms_0_2160_3840_0_1_2_2_1_3841_3_9_4_U0_ap_str_blocking_n,
        ap_int_blocking_n => xFfastnms_0_2160_3840_0_1_2_2_1_3841_3_9_4_U0_ap_int_blocking_n);

    p_dst_data_U : component fast_accel_fifo_w8_d2_S_x
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => xFfast7x7_0_2160_3840_0_1_2_2_1_3843_7_49_3_U0_p_dst_data1_din,
        if_full_n => p_dst_data_full_n,
        if_write => xFfast7x7_0_2160_3840_0_1_2_2_1_3843_7_49_3_U0_p_dst_data1_write,
        if_dout => p_dst_data_dout,
        if_num_data_valid => p_dst_data_num_data_valid,
        if_fifo_cap => p_dst_data_fifo_cap,
        if_empty_n => p_dst_data_empty_n,
        if_read => xFfastnms_0_2160_3840_0_1_2_2_1_3841_3_9_4_U0_p_dst_data1_read);

    p_image_height_c_U : component fast_accel_fifo_w16_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => xFfast7x7_0_2160_3840_0_1_2_2_1_3843_7_49_3_U0_p_image_height_c_din,
        if_full_n => p_image_height_c_full_n,
        if_write => xFfast7x7_0_2160_3840_0_1_2_2_1_3843_7_49_3_U0_p_image_height_c_write,
        if_dout => p_image_height_c_dout,
        if_num_data_valid => p_image_height_c_num_data_valid,
        if_fifo_cap => p_image_height_c_fifo_cap,
        if_empty_n => p_image_height_c_empty_n,
        if_read => xFfastnms_0_2160_3840_0_1_2_2_1_3841_3_9_4_U0_img_height_read);

    p_image_width_c_U : component fast_accel_fifo_w16_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => xFfast7x7_0_2160_3840_0_1_2_2_1_3843_7_49_3_U0_p_image_width_c_din,
        if_full_n => p_image_width_c_full_n,
        if_write => xFfast7x7_0_2160_3840_0_1_2_2_1_3843_7_49_3_U0_p_image_width_c_write,
        if_dout => p_image_width_c_dout,
        if_num_data_valid => p_image_width_c_num_data_valid,
        if_fifo_cap => p_image_width_c_fifo_cap,
        if_empty_n => p_image_width_c_empty_n,
        if_read => xFfastnms_0_2160_3840_0_1_2_2_1_3841_3_9_4_U0_img_width_read);

    start_for_xFfastnms_0_2160_3840_0_1_2_2_1_3841_3_9_4_U0_U : component fast_accel_start_for_xFfastnms_0_2160_3840_0_1_2_2_1_3841_3_9_4_U0
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_xFfastnms_0_2160_3840_0_1_2_2_1_3841_3_9_4_U0_din,
        if_full_n => start_for_xFfastnms_0_2160_3840_0_1_2_2_1_3841_3_9_4_U0_full_n,
        if_write => xFfast7x7_0_2160_3840_0_1_2_2_1_3843_7_49_3_U0_start_write,
        if_dout => start_for_xFfastnms_0_2160_3840_0_1_2_2_1_3841_3_9_4_U0_dout,
        if_empty_n => start_for_xFfastnms_0_2160_3840_0_1_2_2_1_3841_3_9_4_U0_empty_n,
        if_read => xFfastnms_0_2160_3840_0_1_2_2_1_3841_3_9_4_U0_ap_ready);




    ap_done <= xFfastnms_0_2160_3840_0_1_2_2_1_3841_3_9_4_U0_ap_done;
    ap_ext_blocking_cur_n <= ap_const_logic_1;
    ap_ext_blocking_n <= (ap_ext_blocking_sub_n and ap_ext_blocking_cur_n);
    ap_ext_blocking_sub_n <= (xFfastnms_0_2160_3840_0_1_2_2_1_3841_3_9_4_U0_ap_ext_blocking_n and xFfast7x7_0_2160_3840_0_1_2_2_1_3843_7_49_3_U0_ap_ext_blocking_n);
    ap_idle <= (xFfastnms_0_2160_3840_0_1_2_2_1_3841_3_9_4_U0_ap_idle and xFfast7x7_0_2160_3840_0_1_2_2_1_3843_7_49_3_U0_ap_idle);
    ap_int_blocking_cur_n <= ap_const_logic_1;
    ap_int_blocking_n <= (ap_int_blocking_sub_n and ap_int_blocking_cur_n);
    ap_int_blocking_sub_n <= (xFfastnms_0_2160_3840_0_1_2_2_1_3841_3_9_4_U0_ap_int_blocking_n and xFfast7x7_0_2160_3840_0_1_2_2_1_3843_7_49_3_U0_ap_int_blocking_n);
    ap_ready <= xFfast7x7_0_2160_3840_0_1_2_2_1_3843_7_49_3_U0_ap_ready;
    ap_str_blocking_cur_n <= ap_const_logic_1;
    ap_str_blocking_n <= (ap_str_blocking_sub_n and ap_str_blocking_cur_n);
    ap_str_blocking_sub_n <= (xFfastnms_0_2160_3840_0_1_2_2_1_3841_3_9_4_U0_ap_str_blocking_n and xFfast7x7_0_2160_3840_0_1_2_2_1_3843_7_49_3_U0_ap_str_blocking_n);
    imgInput_data1_read <= xFfast7x7_0_2160_3840_0_1_2_2_1_3843_7_49_3_U0_imgInput_data1_read;
    imgOutput_data2_din <= xFfastnms_0_2160_3840_0_1_2_2_1_3841_3_9_4_U0_imgOutput_data2_din;
    imgOutput_data2_write <= xFfastnms_0_2160_3840_0_1_2_2_1_3841_3_9_4_U0_imgOutput_data2_write;
    start_for_xFfastnms_0_2160_3840_0_1_2_2_1_3841_3_9_4_U0_din <= (0=>ap_const_logic_1, others=>'-');
    xFfast7x7_0_2160_3840_0_1_2_2_1_3843_7_49_3_U0_ap_continue <= ap_const_logic_1;
    xFfast7x7_0_2160_3840_0_1_2_2_1_3843_7_49_3_U0_ap_start <= ap_start;
    xFfastnms_0_2160_3840_0_1_2_2_1_3841_3_9_4_U0_ap_continue <= ap_continue;
    xFfastnms_0_2160_3840_0_1_2_2_1_3841_3_9_4_U0_ap_start <= start_for_xFfastnms_0_2160_3840_0_1_2_2_1_3841_3_9_4_U0_empty_n;
end behav;
