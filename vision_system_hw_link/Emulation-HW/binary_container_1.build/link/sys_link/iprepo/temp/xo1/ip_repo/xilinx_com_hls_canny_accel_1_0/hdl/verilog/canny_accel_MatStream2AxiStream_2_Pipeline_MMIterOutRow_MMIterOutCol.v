// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module canny_accel_MatStream2AxiStream_2_Pipeline_MMIterOutRow_MMIterOutCol (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        dst_mat_data2_dout,
        dst_mat_data2_num_data_valid,
        dst_mat_data2_fifo_cap,
        dst_mat_data2_empty_n,
        dst_mat_data2_read,
        ldata1_din,
        ldata1_num_data_valid,
        ldata1_fifo_cap,
        ldata1_full_n,
        ldata1_write,
        bound,
        cols_bound_per_npc,
        op2_assign,
        last_blk_width_load,
        localbuffer_V_3_out,
        localbuffer_V_3_out_ap_vld,
        filled_V_1_out,
        filled_V_1_out_ap_vld,
        ap_ext_blocking_n,
        ap_str_blocking_n,
        ap_int_blocking_n
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [63:0] dst_mat_data2_dout;
input  [1:0] dst_mat_data2_num_data_valid;
input  [1:0] dst_mat_data2_fifo_cap;
input   dst_mat_data2_empty_n;
output   dst_mat_data2_read;
output  [63:0] ldata1_din;
input  [1:0] ldata1_num_data_valid;
input  [1:0] ldata1_fifo_cap;
input   ldata1_full_n;
output   ldata1_write;
input  [22:0] bound;
input  [6:0] cols_bound_per_npc;
input  [7:0] op2_assign;
input  [6:0] last_blk_width_load;
output  [63:0] localbuffer_V_3_out;
output   localbuffer_V_3_out_ap_vld;
output  [6:0] filled_V_1_out;
output   filled_V_1_out_ap_vld;
output   ap_ext_blocking_n;
output   ap_str_blocking_n;
output   ap_int_blocking_n;

reg ap_idle;
reg dst_mat_data2_read;
reg ldata1_write;
reg localbuffer_V_3_out_ap_vld;
reg filled_V_1_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
reg   [0:0] icmp_ln1027_reg_421;
reg   [0:0] icmp_ln1027_3_reg_430;
reg    ap_predicate_op42_read_state2;
reg    ap_block_state2_pp0_stage0_iter1;
reg   [0:0] icmp_ln1027_reg_421_pp0_iter1_reg;
reg   [0:0] icmp_ln1027_4_reg_449;
reg    ap_predicate_op60_write_state3;
reg    ap_block_state3_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln1027_fu_188_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    dst_mat_data2_blk_n;
wire    ap_block_pp0_stage0;
reg    ldata1_blk_n;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] bLast_fu_221_p2;
reg   [0:0] bLast_reg_425;
wire   [0:0] icmp_ln1027_3_fu_227_p2;
reg   [6:0] filled_V_3_reg_434;
wire   [7:0] zext_ln930_2_fu_264_p1;
reg   [7:0] zext_ln930_2_reg_444;
wire   [0:0] icmp_ln1027_4_fu_274_p2;
reg    ap_condition_exit_pp0_iter1_stage0;
reg   [6:0] ap_phi_mux_conv3_i12_i_i923_pn_phi_fu_148_p4;
wire   [6:0] xor_ln186_fu_280_p2;
wire   [6:0] ap_phi_reg_pp0_iter1_conv3_i12_i_i923_pn_reg_145;
wire   [6:0] xf_bits_per_clock_fu_253_p3;
wire   [63:0] ap_phi_reg_pp0_iter0_val_V_96_reg_154;
reg   [63:0] ap_phi_reg_pp0_iter1_val_V_96_reg_154;
reg   [63:0] ap_phi_reg_pp0_iter2_val_V_96_reg_154;
reg   [6:0] filled_V_fu_78;
wire   [6:0] filled_next_fu_287_p2;
wire    ap_loop_init;
reg   [63:0] localbuffer_V_fu_82;
wire   [63:0] localbuffer_V_3_fu_364_p3;
wire   [63:0] ret_V_fu_310_p2;
reg   [6:0] j_V_fu_86;
wire   [6:0] add_ln840_fu_233_p2;
reg   [6:0] ap_sig_allocacmp_j_V_load;
reg   [22:0] indvar_flatten_fu_90;
wire   [22:0] add_ln1027_fu_194_p2;
reg   [22:0] ap_sig_allocacmp_indvar_flatten_load;
reg    ap_block_pp0_stage0_01001;
wire   [0:0] icmp_ln1027_5_fu_203_p2;
wire   [6:0] select_ln1295_fu_209_p3;
wire   [7:0] zext_ln1027_fu_217_p1;
wire   [7:0] zext_ln1314_fu_260_p1;
wire   [7:0] sub_ln1325_fu_268_p2;
wire   [63:0] zext_ln930_fu_301_p1;
wire   [63:0] r_V_6_fu_304_p2;
wire   [7:0] ret_V_6_fu_317_p2;
wire   [5:0] trunc_ln938_fu_334_p1;
wire   [5:0] sub_ln553_fu_338_p2;
wire   [63:0] zext_ln930_1_fu_344_p1;
wire   [6:0] trunc_ln455_fu_330_p1;
wire   [63:0] zext_ln948_fu_354_p1;
wire   [0:0] p_Result_s_fu_322_p3;
wire   [63:0] r_V_fu_348_p2;
wire   [63:0] r_V_5_fu_358_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_int_blocking_cur_n;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_155;
reg    ap_condition_126;
reg    ap_condition_370;
reg    ap_condition_373;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_done_reg = 1'b0;
end

canny_accel_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_155)) begin
        if (((icmp_ln1027_fu_188_p2 == 1'd0) & (icmp_ln1027_3_fu_227_p2 == 1'd0))) begin
            ap_phi_reg_pp0_iter1_val_V_96_reg_154 <= 64'd0;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter1_val_V_96_reg_154 <= ap_phi_reg_pp0_iter0_val_V_96_reg_154;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_126)) begin
        if (((icmp_ln1027_3_reg_430 == 1'd1) & (icmp_ln1027_reg_421 == 1'd0))) begin
            ap_phi_reg_pp0_iter2_val_V_96_reg_154 <= dst_mat_data2_dout;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter2_val_V_96_reg_154 <= ap_phi_reg_pp0_iter1_val_V_96_reg_154;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            filled_V_fu_78 <= 7'd0;
        end else if (((icmp_ln1027_reg_421 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            filled_V_fu_78 <= filled_next_fu_287_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln1027_fu_188_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten_fu_90 <= add_ln1027_fu_194_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_90 <= 23'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln1027_fu_188_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            j_V_fu_86 <= add_ln840_fu_233_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            j_V_fu_86 <= 7'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            localbuffer_V_fu_82 <= 64'd0;
        end else if ((1'b1 == ap_condition_373)) begin
            localbuffer_V_fu_82 <= ret_V_fu_310_p2;
        end else if ((1'b1 == ap_condition_370)) begin
            localbuffer_V_fu_82 <= localbuffer_V_3_fu_364_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        icmp_ln1027_reg_421 <= icmp_ln1027_fu_188_p2;
        icmp_ln1027_reg_421_pp0_iter1_reg <= icmp_ln1027_reg_421;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1027_fu_188_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        bLast_reg_425 <= bLast_fu_221_p2;
        icmp_ln1027_3_reg_430 <= icmp_ln1027_3_fu_227_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        filled_V_3_reg_434 <= filled_V_fu_78;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln1027_reg_421 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln1027_4_reg_449 <= icmp_ln1027_4_fu_274_p2;
        zext_ln930_2_reg_444[6 : 0] <= zext_ln930_2_fu_264_p1[6 : 0];
    end
end

always @ (*) begin
    if (((icmp_ln1027_fu_188_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln1027_reg_421 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln1027_reg_421 == 1'd0)) begin
        if ((icmp_ln1027_4_fu_274_p2 == 1'd1)) begin
            ap_phi_mux_conv3_i12_i_i923_pn_phi_fu_148_p4 = xf_bits_per_clock_fu_253_p3;
        end else if ((icmp_ln1027_4_fu_274_p2 == 1'd0)) begin
            ap_phi_mux_conv3_i12_i_i923_pn_phi_fu_148_p4 = xor_ln186_fu_280_p2;
        end else begin
            ap_phi_mux_conv3_i12_i_i923_pn_phi_fu_148_p4 = ap_phi_reg_pp0_iter1_conv3_i12_i_i923_pn_reg_145;
        end
    end else begin
        ap_phi_mux_conv3_i12_i_i923_pn_phi_fu_148_p4 = ap_phi_reg_pp0_iter1_conv3_i12_i_i923_pn_reg_145;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten_load = 23'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_90;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_j_V_load = 7'd0;
    end else begin
        ap_sig_allocacmp_j_V_load = j_V_fu_86;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_predicate_op42_read_state2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        dst_mat_data2_blk_n = dst_mat_data2_empty_n;
    end else begin
        dst_mat_data2_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op42_read_state2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        dst_mat_data2_read = 1'b1;
    end else begin
        dst_mat_data2_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln1027_reg_421 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        filled_V_1_out_ap_vld = 1'b1;
    end else begin
        filled_V_1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_predicate_op60_write_state3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        ldata1_blk_n = ldata1_full_n;
    end else begin
        ldata1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op60_write_state3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        ldata1_write = 1'b1;
    end else begin
        ldata1_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln1027_reg_421 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        localbuffer_V_3_out_ap_vld = 1'b1;
    end else begin
        localbuffer_V_3_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln1027_fu_194_p2 = (ap_sig_allocacmp_indvar_flatten_load + 23'd1);

assign add_ln840_fu_233_p2 = (select_ln1295_fu_209_p3 + 7'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_predicate_op60_write_state3 == 1'b1) & (ldata1_full_n == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((ap_predicate_op42_read_state2 == 1'b1) & (dst_mat_data2_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_predicate_op60_write_state3 == 1'b1) & (ldata1_full_n == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((ap_predicate_op42_read_state2 == 1'b1) & (dst_mat_data2_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_predicate_op60_write_state3 == 1'b1) & (ldata1_full_n == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((ap_predicate_op42_read_state2 == 1'b1) & (dst_mat_data2_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = ((ap_predicate_op42_read_state2 == 1'b1) & (dst_mat_data2_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter2 = ((ap_predicate_op60_write_state3 == 1'b1) & (ldata1_full_n == 1'b0));
end

always @ (*) begin
    ap_condition_126 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_condition_155 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_condition_370 = ((icmp_ln1027_4_reg_449 == 1'd0) & (icmp_ln1027_reg_421_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1));
end

always @ (*) begin
    ap_condition_373 = ((icmp_ln1027_4_reg_449 == 1'd1) & (icmp_ln1027_reg_421_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_ext_blocking_n = (1'b1 & 1'b1);

assign ap_int_blocking_cur_n = (ldata1_blk_n & dst_mat_data2_blk_n);

assign ap_int_blocking_n = (ap_int_blocking_cur_n & 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_phi_reg_pp0_iter0_val_V_96_reg_154 = 'bx;

assign ap_phi_reg_pp0_iter1_conv3_i12_i_i923_pn_reg_145 = 'bx;

always @ (*) begin
    ap_predicate_op42_read_state2 = ((icmp_ln1027_3_reg_430 == 1'd1) & (icmp_ln1027_reg_421 == 1'd0));
end

always @ (*) begin
    ap_predicate_op60_write_state3 = ((icmp_ln1027_4_reg_449 == 1'd0) & (icmp_ln1027_reg_421_pp0_iter1_reg == 1'd0));
end

assign ap_str_blocking_n = (1'b1 & 1'b1);

assign bLast_fu_221_p2 = ((op2_assign == zext_ln1027_fu_217_p1) ? 1'b1 : 1'b0);

assign filled_V_1_out = filled_V_fu_78;

assign filled_next_fu_287_p2 = (ap_phi_mux_conv3_i12_i_i923_pn_phi_fu_148_p4 + filled_V_fu_78);

assign icmp_ln1027_3_fu_227_p2 = ((select_ln1295_fu_209_p3 < cols_bound_per_npc) ? 1'b1 : 1'b0);

assign icmp_ln1027_4_fu_274_p2 = (($signed(sub_ln1325_fu_268_p2) > $signed(zext_ln930_2_fu_264_p1)) ? 1'b1 : 1'b0);

assign icmp_ln1027_5_fu_203_p2 = ((ap_sig_allocacmp_j_V_load == cols_bound_per_npc) ? 1'b1 : 1'b0);

assign icmp_ln1027_fu_188_p2 = ((ap_sig_allocacmp_indvar_flatten_load == bound) ? 1'b1 : 1'b0);

assign ldata1_din = (r_V_6_fu_304_p2 | localbuffer_V_fu_82);

assign localbuffer_V_3_fu_364_p3 = ((p_Result_s_fu_322_p3[0:0] == 1'b1) ? r_V_fu_348_p2 : r_V_5_fu_358_p2);

assign localbuffer_V_3_out = localbuffer_V_fu_82;

assign p_Result_s_fu_322_p3 = ret_V_6_fu_317_p2[32'd7];

assign r_V_5_fu_358_p2 = ap_phi_reg_pp0_iter2_val_V_96_reg_154 >> zext_ln948_fu_354_p1;

assign r_V_6_fu_304_p2 = ap_phi_reg_pp0_iter2_val_V_96_reg_154 << zext_ln930_fu_301_p1;

assign r_V_fu_348_p2 = ap_phi_reg_pp0_iter2_val_V_96_reg_154 << zext_ln930_1_fu_344_p1;

assign ret_V_6_fu_317_p2 = (8'd64 - zext_ln930_2_reg_444);

assign ret_V_fu_310_p2 = (r_V_6_fu_304_p2 | localbuffer_V_fu_82);

assign select_ln1295_fu_209_p3 = ((icmp_ln1027_5_fu_203_p2[0:0] == 1'b1) ? 7'd0 : ap_sig_allocacmp_j_V_load);

assign sub_ln1325_fu_268_p2 = (8'd64 - zext_ln1314_fu_260_p1);

assign sub_ln553_fu_338_p2 = (6'd0 - trunc_ln938_fu_334_p1);

assign trunc_ln455_fu_330_p1 = ret_V_6_fu_317_p2[6:0];

assign trunc_ln938_fu_334_p1 = ret_V_6_fu_317_p2[5:0];

assign xf_bits_per_clock_fu_253_p3 = ((bLast_reg_425[0:0] == 1'b1) ? last_blk_width_load : 7'd64);

assign xor_ln186_fu_280_p2 = (xf_bits_per_clock_fu_253_p3 ^ 7'd64);

assign zext_ln1027_fu_217_p1 = select_ln1295_fu_209_p3;

assign zext_ln1314_fu_260_p1 = xf_bits_per_clock_fu_253_p3;

assign zext_ln930_1_fu_344_p1 = sub_ln553_fu_338_p2;

assign zext_ln930_2_fu_264_p1 = filled_V_fu_78;

assign zext_ln930_fu_301_p1 = filled_V_3_reg_434;

assign zext_ln948_fu_354_p1 = trunc_ln455_fu_330_p1;

always @ (posedge ap_clk) begin
    zext_ln930_2_reg_444[7] <= 1'b0;
end

endmodule //canny_accel_MatStream2AxiStream_2_Pipeline_MMIterOutRow_MMIterOutCol
