// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module canny_accel_xFSuppression3x3_Pipeline_colLoop1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        magnitude_mat_data8_dout,
        magnitude_mat_data8_num_data_valid,
        magnitude_mat_data8_fifo_cap,
        magnitude_mat_data8_empty_n,
        magnitude_mat_data8_read,
        phase_mat_data9_dout,
        phase_mat_data9_num_data_valid,
        phase_mat_data9_fifo_cap,
        phase_mat_data9_empty_n,
        phase_mat_data9_read,
        nms_mat_data10_din,
        nms_mat_data10_num_data_valid,
        nms_mat_data10_fifo_cap,
        nms_mat_data10_full_n,
        nms_mat_data10_write,
        imgwidth_load,
        zext_ln1035,
        zext_ln1035_1,
        buf_V_address0,
        buf_V_ce0,
        buf_V_we0,
        buf_V_d0,
        buf_V_address1,
        buf_V_ce1,
        buf_V_q1,
        buf_V_1_address0,
        buf_V_1_ce0,
        buf_V_1_we0,
        buf_V_1_d0,
        buf_V_1_address1,
        buf_V_1_ce1,
        buf_V_1_q1,
        buf_V_2_address0,
        buf_V_2_ce0,
        buf_V_2_we0,
        buf_V_2_d0,
        buf_V_2_address1,
        buf_V_2_ce1,
        buf_V_2_q1,
        top_V,
        mid_V,
        bottom_V,
        angle_V_address0,
        angle_V_ce0,
        angle_V_we0,
        angle_V_d0,
        angle_V_address1,
        angle_V_ce1,
        angle_V_q1,
        angle_V_1_address0,
        angle_V_1_ce0,
        angle_V_1_we0,
        angle_V_1_d0,
        angle_V_1_address1,
        angle_V_1_ce1,
        angle_V_1_q1,
        write_ind_V_cast,
        read_ind_V_cast,
        row_ind_V_cast,
        cmp_i_i163_i,
        agg_tmp31_i_i_0_out,
        agg_tmp31_i_i_0_out_ap_vld,
        agg_tmp23_i_i_0_out,
        agg_tmp23_i_i_0_out_ap_vld,
        agg_tmp20_i_i_0_out,
        agg_tmp20_i_i_0_out_ap_vld,
        agg_tmp12_i_i_0_out,
        agg_tmp12_i_i_0_out_ap_vld,
        agg_tmp9_i_i_0_out,
        agg_tmp9_i_i_0_out_ap_vld,
        agg_tmp2_i_i_0_out,
        agg_tmp2_i_i_0_out_ap_vld,
        agg_tmp131_0_out,
        agg_tmp131_0_out_ap_vld,
        ap_ext_blocking_n,
        ap_str_blocking_n,
        ap_int_blocking_n
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [15:0] magnitude_mat_data8_dout;
input  [1:0] magnitude_mat_data8_num_data_valid;
input  [1:0] magnitude_mat_data8_fifo_cap;
input   magnitude_mat_data8_empty_n;
output   magnitude_mat_data8_read;
input  [7:0] phase_mat_data9_dout;
input  [13:0] phase_mat_data9_num_data_valid;
input  [13:0] phase_mat_data9_fifo_cap;
input   phase_mat_data9_empty_n;
output   phase_mat_data9_read;
output  [1:0] nms_mat_data10_din;
input  [1:0] nms_mat_data10_num_data_valid;
input  [1:0] nms_mat_data10_fifo_cap;
input   nms_mat_data10_full_n;
output   nms_mat_data10_write;
input  [15:0] imgwidth_load;
input  [7:0] zext_ln1035;
input  [7:0] zext_ln1035_1;
output  [10:0] buf_V_address0;
output   buf_V_ce0;
output   buf_V_we0;
output  [15:0] buf_V_d0;
output  [10:0] buf_V_address1;
output   buf_V_ce1;
input  [15:0] buf_V_q1;
output  [10:0] buf_V_1_address0;
output   buf_V_1_ce0;
output   buf_V_1_we0;
output  [15:0] buf_V_1_d0;
output  [10:0] buf_V_1_address1;
output   buf_V_1_ce1;
input  [15:0] buf_V_1_q1;
output  [10:0] buf_V_2_address0;
output   buf_V_2_ce0;
output   buf_V_2_we0;
output  [15:0] buf_V_2_d0;
output  [10:0] buf_V_2_address1;
output   buf_V_2_ce1;
input  [15:0] buf_V_2_q1;
input  [1:0] top_V;
input  [1:0] mid_V;
input  [1:0] bottom_V;
output  [10:0] angle_V_address0;
output   angle_V_ce0;
output   angle_V_we0;
output  [7:0] angle_V_d0;
output  [10:0] angle_V_address1;
output   angle_V_ce1;
input  [7:0] angle_V_q1;
output  [10:0] angle_V_1_address0;
output   angle_V_1_ce0;
output   angle_V_1_we0;
output  [7:0] angle_V_1_d0;
output  [10:0] angle_V_1_address1;
output   angle_V_1_ce1;
input  [7:0] angle_V_1_q1;
input  [0:0] write_ind_V_cast;
input  [0:0] read_ind_V_cast;
input  [1:0] row_ind_V_cast;
input  [0:0] cmp_i_i163_i;
output  [7:0] agg_tmp31_i_i_0_out;
output   agg_tmp31_i_i_0_out_ap_vld;
output  [15:0] agg_tmp23_i_i_0_out;
output   agg_tmp23_i_i_0_out_ap_vld;
output  [15:0] agg_tmp20_i_i_0_out;
output   agg_tmp20_i_i_0_out_ap_vld;
output  [15:0] agg_tmp12_i_i_0_out;
output   agg_tmp12_i_i_0_out_ap_vld;
output  [15:0] agg_tmp9_i_i_0_out;
output   agg_tmp9_i_i_0_out_ap_vld;
output  [15:0] agg_tmp2_i_i_0_out;
output   agg_tmp2_i_i_0_out_ap_vld;
output  [15:0] agg_tmp131_0_out;
output   agg_tmp131_0_out_ap_vld;
output   ap_ext_blocking_n;
output   ap_str_blocking_n;
output   ap_int_blocking_n;

reg ap_idle;
reg magnitude_mat_data8_read;
reg phase_mat_data9_read;
reg nms_mat_data10_write;
reg[10:0] buf_V_address0;
reg buf_V_ce0;
reg buf_V_we0;
reg[15:0] buf_V_d0;
reg buf_V_ce1;
reg[10:0] buf_V_1_address0;
reg buf_V_1_ce0;
reg buf_V_1_we0;
reg[15:0] buf_V_1_d0;
reg buf_V_1_ce1;
reg[10:0] buf_V_2_address0;
reg buf_V_2_ce0;
reg buf_V_2_we0;
reg[15:0] buf_V_2_d0;
reg buf_V_2_ce1;
reg[10:0] angle_V_address0;
reg angle_V_ce0;
reg angle_V_we0;
reg[7:0] angle_V_d0;
reg angle_V_ce1;
reg[10:0] angle_V_1_address0;
reg angle_V_1_ce0;
reg angle_V_1_we0;
reg[7:0] angle_V_1_d0;
reg angle_V_1_ce1;
reg agg_tmp31_i_i_0_out_ap_vld;
reg agg_tmp23_i_i_0_out_ap_vld;
reg agg_tmp20_i_i_0_out_ap_vld;
reg agg_tmp12_i_i_0_out_ap_vld;
reg agg_tmp9_i_i_0_out_ap_vld;
reg agg_tmp2_i_i_0_out_ap_vld;
reg agg_tmp131_0_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
reg   [0:0] icmp_ln1027_reg_1022;
wire   [0:0] cmp_i_i163_i_read_reg_973;
reg    ap_predicate_op73_read_state2;
reg    ap_predicate_op84_read_state2;
reg    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
reg   [0:0] icmp_ln1019_3_reg_1051;
reg   [0:0] icmp_ln1019_3_reg_1051_pp0_iter3_reg;
reg    ap_block_state5_pp0_stage0_iter4;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln1027_fu_547_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    phase_mat_data9_blk_n;
wire    ap_block_pp0_stage0;
reg    magnitude_mat_data8_blk_n;
reg    nms_mat_data10_blk_n;
wire   [7:0] grp_xfExtractPixels_1_1_0_s_fu_479_ap_return;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln1027_reg_1022_pp0_iter2_reg;
wire   [0:0] write_ind_V_cast_read_reg_985;
wire   [1:0] row_ind_V_cast_read_reg_977;
wire   [0:0] read_ind_V_cast_read_reg_981;
wire   [15:0] zext_ln1035_1_cast_fu_492_p1;
reg   [15:0] zext_ln1035_1_cast_reg_1004;
wire   [15:0] zext_ln1035_cast_fu_496_p1;
reg   [15:0] zext_ln1035_cast_reg_1009;
reg   [12:0] col_V_1_reg_1014;
reg   [12:0] col_V_1_reg_1014_pp0_iter1_reg;
reg   [0:0] icmp_ln1027_reg_1022_pp0_iter1_reg;
wire   [0:0] icmp_ln1019_3_fu_588_p2;
reg   [15:0] l00_buf_V_1_load_reg_1055;
reg   [15:0] l10_buf_V_1_load_reg_1061;
reg   [15:0] l20_buf_V_1_load_reg_1071;
wire   [0:0] icmp_ln1035_fu_641_p2;
reg   [0:0] icmp_ln1035_reg_1077;
wire   [0:0] icmp_ln1031_fu_646_p2;
reg   [0:0] icmp_ln1031_reg_1083;
wire   [0:0] icmp_ln1035_2_fu_652_p2;
reg   [0:0] icmp_ln1035_2_reg_1088;
wire   [0:0] icmp_ln1035_3_fu_657_p2;
reg   [0:0] icmp_ln1035_3_reg_1093;
wire   [0:0] icmp_ln1035_7_fu_663_p2;
reg   [0:0] icmp_ln1035_7_reg_1098;
reg    ap_condition_exit_pp0_iter3_stage0;
wire    l00_buf_V_xfExtractPixels_1_5_3_s_fu_464_ap_ready;
wire   [15:0] l00_buf_V_xfExtractPixels_1_5_3_s_fu_464_ap_return;
wire    l00_buf_V_xfExtractPixels_1_5_3_s_fu_464_ap_ext_blocking_n;
wire    l00_buf_V_xfExtractPixels_1_5_3_s_fu_464_ap_str_blocking_n;
wire    l00_buf_V_xfExtractPixels_1_5_3_s_fu_464_ap_int_blocking_n;
wire    l10_buf_V_xfExtractPixels_1_5_3_s_fu_469_ap_ready;
wire   [15:0] l10_buf_V_xfExtractPixels_1_5_3_s_fu_469_ap_return;
wire    l10_buf_V_xfExtractPixels_1_5_3_s_fu_469_ap_ext_blocking_n;
wire    l10_buf_V_xfExtractPixels_1_5_3_s_fu_469_ap_str_blocking_n;
wire    l10_buf_V_xfExtractPixels_1_5_3_s_fu_469_ap_int_blocking_n;
wire    l20_buf_V_xfExtractPixels_1_5_3_s_fu_474_ap_ready;
wire   [15:0] l20_buf_V_xfExtractPixels_1_5_3_s_fu_474_ap_return;
wire    l20_buf_V_xfExtractPixels_1_5_3_s_fu_474_ap_ext_blocking_n;
wire    l20_buf_V_xfExtractPixels_1_5_3_s_fu_474_ap_str_blocking_n;
wire    l20_buf_V_xfExtractPixels_1_5_3_s_fu_474_ap_int_blocking_n;
wire    grp_xfExtractPixels_1_1_0_s_fu_479_ap_ready;
reg   [7:0] grp_xfExtractPixels_1_1_0_s_fu_479_p_read1;
wire    grp_xfExtractPixels_1_1_0_s_fu_479_ap_ext_blocking_n;
wire    grp_xfExtractPixels_1_1_0_s_fu_479_ap_str_blocking_n;
wire    grp_xfExtractPixels_1_1_0_s_fu_479_ap_int_blocking_n;
wire   [7:0] ap_phi_reg_pp0_iter0_angle_buf_V_2_reg_455;
reg   [7:0] ap_phi_reg_pp0_iter1_angle_buf_V_2_reg_455;
reg   [7:0] ap_phi_reg_pp0_iter2_angle_buf_V_2_reg_455;
reg   [7:0] ap_phi_reg_pp0_iter3_angle_buf_V_2_reg_455;
reg   [7:0] ap_phi_reg_pp0_iter4_angle_buf_V_2_reg_455;
wire   [15:0] buf0_V_fu_605_p5;
wire   [15:0] buf1_V_fu_617_p5;
wire   [15:0] buf2_V_fu_629_p5;
wire   [63:0] zext_ln541_1_fu_564_p1;
wire   [63:0] zext_ln541_fu_572_p1;
wire   [63:0] zext_ln541_2_fu_580_p1;
reg   [12:0] col_V_fu_120;
wire   [12:0] col_V_2_fu_553_p2;
wire    ap_loop_init;
reg   [12:0] ap_sig_allocacmp_col_V_1;
reg   [15:0] agg_tmp131_0_fu_124;
reg   [15:0] agg_tmp9_i_i_0_fu_128;
reg   [15:0] agg_tmp20_i_i_0_fu_132;
reg   [7:0] angle_buf_V_3_fu_136;
reg   [15:0] l00_buf_V_1_fu_140;
reg   [15:0] l10_buf_V_1_fu_144;
reg   [15:0] l20_buf_V_1_fu_148;
reg    ap_block_pp0_stage0_01001;
wire   [15:0] zext_ln1027_fu_543_p1;
wire   [0:0] xor_ln1031_fu_707_p2;
wire   [0:0] icmp_ln1019_fu_696_p2;
wire   [0:0] and_ln46_fu_719_p2;
wire   [0:0] icmp_ln1035_1_fu_702_p2;
wire   [0:0] and_ln46_1_fu_725_p2;
wire   [1:0] select_ln211_fu_712_p3;
wire   [0:0] icmp_ln1035_4_fu_745_p2;
wire   [0:0] icmp_ln1019_1_fu_739_p2;
wire   [0:0] and_ln65_fu_750_p2;
wire   [0:0] and_ln65_1_fu_756_p2;
wire   [1:0] select_ln65_fu_761_p3;
wire   [1:0] select_ln46_fu_731_p3;
wire   [0:0] icmp_ln1031_1_fu_787_p2;
wire   [0:0] xor_ln1031_1_fu_791_p2;
wire   [0:0] icmp_ln1019_2_fu_777_p2;
wire   [0:0] and_ln85_fu_797_p2;
wire   [0:0] icmp_ln1035_5_fu_783_p2;
wire   [0:0] and_ln85_1_fu_803_p2;
wire   [1:0] select_ln85_fu_809_p3;
wire   [1:0] select_ln1019_fu_769_p3;
wire   [0:0] icmp_ln1019_4_fu_825_p2;
wire   [0:0] icmp_ln1035_6_fu_831_p2;
wire   [0:0] and_ln105_1_fu_841_p2;
wire   [0:0] and_ln105_fu_836_p2;
wire   [0:0] and_ln105_2_fu_846_p2;
wire   [0:0] xor_ln1019_fu_860_p2;
wire   [0:0] and_ln1019_fu_866_p2;
wire   [1:0] select_ln1019_1_fu_817_p3;
wire   [1:0] select_ln105_fu_852_p3;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_int_blocking_cur_n;
reg    ap_ext_blocking_sub_n;
reg    ap_wait_0;
reg    ap_sub_ext_blocking_0;
reg    ap_wait_1;
reg    ap_sub_ext_blocking_1;
reg    ap_wait_2;
reg    ap_sub_ext_blocking_2;
reg    ap_wait_3;
reg    ap_sub_ext_blocking_3;
reg    ap_str_blocking_sub_n;
reg    ap_sub_str_blocking_0;
reg    ap_sub_str_blocking_1;
reg    ap_sub_str_blocking_2;
reg    ap_sub_str_blocking_3;
reg    ap_int_blocking_sub_n;
reg    ap_sub_int_blocking_0;
reg    ap_sub_int_blocking_1;
reg    ap_sub_int_blocking_2;
reg    ap_sub_int_blocking_3;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_795;
reg    ap_condition_798;
reg    ap_condition_801;
reg    ap_condition_805;
reg    ap_condition_808;
reg    ap_condition_359;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_done_reg = 1'b0;
end

canny_accel_xfExtractPixels_1_5_3_s l00_buf_V_xfExtractPixels_1_5_3_s_fu_464(
    .ap_ready(l00_buf_V_xfExtractPixels_1_5_3_s_fu_464_ap_ready),
    .p_read1(buf0_V_fu_605_p5),
    .ap_return(l00_buf_V_xfExtractPixels_1_5_3_s_fu_464_ap_return),
    .ap_ext_blocking_n(l00_buf_V_xfExtractPixels_1_5_3_s_fu_464_ap_ext_blocking_n),
    .ap_str_blocking_n(l00_buf_V_xfExtractPixels_1_5_3_s_fu_464_ap_str_blocking_n),
    .ap_int_blocking_n(l00_buf_V_xfExtractPixels_1_5_3_s_fu_464_ap_int_blocking_n)
);

canny_accel_xfExtractPixels_1_5_3_s l10_buf_V_xfExtractPixels_1_5_3_s_fu_469(
    .ap_ready(l10_buf_V_xfExtractPixels_1_5_3_s_fu_469_ap_ready),
    .p_read1(buf1_V_fu_617_p5),
    .ap_return(l10_buf_V_xfExtractPixels_1_5_3_s_fu_469_ap_return),
    .ap_ext_blocking_n(l10_buf_V_xfExtractPixels_1_5_3_s_fu_469_ap_ext_blocking_n),
    .ap_str_blocking_n(l10_buf_V_xfExtractPixels_1_5_3_s_fu_469_ap_str_blocking_n),
    .ap_int_blocking_n(l10_buf_V_xfExtractPixels_1_5_3_s_fu_469_ap_int_blocking_n)
);

canny_accel_xfExtractPixels_1_5_3_s l20_buf_V_xfExtractPixels_1_5_3_s_fu_474(
    .ap_ready(l20_buf_V_xfExtractPixels_1_5_3_s_fu_474_ap_ready),
    .p_read1(buf2_V_fu_629_p5),
    .ap_return(l20_buf_V_xfExtractPixels_1_5_3_s_fu_474_ap_return),
    .ap_ext_blocking_n(l20_buf_V_xfExtractPixels_1_5_3_s_fu_474_ap_ext_blocking_n),
    .ap_str_blocking_n(l20_buf_V_xfExtractPixels_1_5_3_s_fu_474_ap_str_blocking_n),
    .ap_int_blocking_n(l20_buf_V_xfExtractPixels_1_5_3_s_fu_474_ap_int_blocking_n)
);

canny_accel_xfExtractPixels_1_1_0_s grp_xfExtractPixels_1_1_0_s_fu_479(
    .ap_ready(grp_xfExtractPixels_1_1_0_s_fu_479_ap_ready),
    .p_read1(grp_xfExtractPixels_1_1_0_s_fu_479_p_read1),
    .ap_return(grp_xfExtractPixels_1_1_0_s_fu_479_ap_return),
    .ap_ext_blocking_n(grp_xfExtractPixels_1_1_0_s_fu_479_ap_ext_blocking_n),
    .ap_str_blocking_n(grp_xfExtractPixels_1_1_0_s_fu_479_ap_str_blocking_n),
    .ap_int_blocking_n(grp_xfExtractPixels_1_1_0_s_fu_479_ap_int_blocking_n)
);

canny_accel_mux_32_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 16 ))
mux_32_16_1_1_U202(
    .din0(buf_V_q1),
    .din1(buf_V_1_q1),
    .din2(buf_V_2_q1),
    .din3(top_V),
    .dout(buf0_V_fu_605_p5)
);

canny_accel_mux_32_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 16 ))
mux_32_16_1_1_U203(
    .din0(buf_V_q1),
    .din1(buf_V_1_q1),
    .din2(buf_V_2_q1),
    .din3(mid_V),
    .dout(buf1_V_fu_617_p5)
);

canny_accel_mux_32_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 16 ))
mux_32_16_1_1_U204(
    .din0(buf_V_q1),
    .din1(buf_V_1_q1),
    .din2(buf_V_2_q1),
    .din3(bottom_V),
    .dout(buf2_V_fu_629_p5)
);

canny_accel_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter3_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter3_stage0)) begin
            ap_enable_reg_pp0_iter4 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            agg_tmp131_0_fu_124 <= 16'd0;
        end else if ((ap_enable_reg_pp0_iter4 == 1'b1)) begin
            agg_tmp131_0_fu_124 <= l00_buf_V_1_load_reg_1055;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            agg_tmp20_i_i_0_fu_132 <= 16'd0;
        end else if ((ap_enable_reg_pp0_iter4 == 1'b1)) begin
            agg_tmp20_i_i_0_fu_132 <= l20_buf_V_1_load_reg_1071;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            agg_tmp9_i_i_0_fu_128 <= 16'd0;
        end else if ((ap_enable_reg_pp0_iter4 == 1'b1)) begin
            agg_tmp9_i_i_0_fu_128 <= l10_buf_V_1_load_reg_1061;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            angle_buf_V_3_fu_136 <= 8'd0;
        end else if ((ap_enable_reg_pp0_iter4 == 1'b1)) begin
            angle_buf_V_3_fu_136 <= ap_phi_reg_pp0_iter4_angle_buf_V_2_reg_455;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (write_ind_V_cast_read_reg_985 == 1'd1) & (icmp_ln1027_reg_1022_pp0_iter2_reg == 1'd1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (write_ind_V_cast_read_reg_985 == 1'd0) & (icmp_ln1027_reg_1022_pp0_iter2_reg == 1'd1)))) begin
        ap_phi_reg_pp0_iter4_angle_buf_V_2_reg_455 <= grp_xfExtractPixels_1_1_0_s_fu_479_ap_return;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        ap_phi_reg_pp0_iter4_angle_buf_V_2_reg_455 <= ap_phi_reg_pp0_iter3_angle_buf_V_2_reg_455;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln1027_fu_547_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            col_V_fu_120 <= col_V_2_fu_553_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            col_V_fu_120 <= 13'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            l00_buf_V_1_fu_140 <= 16'd0;
        end else if (((ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln1027_reg_1022_pp0_iter2_reg == 1'd1))) begin
            l00_buf_V_1_fu_140 <= l00_buf_V_xfExtractPixels_1_5_3_s_fu_464_ap_return;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            l10_buf_V_1_fu_144 <= 16'd0;
        end else if (((ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln1027_reg_1022_pp0_iter2_reg == 1'd1))) begin
            l10_buf_V_1_fu_144 <= l10_buf_V_xfExtractPixels_1_5_3_s_fu_469_ap_return;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            l20_buf_V_1_fu_148 <= 16'd0;
        end else if (((ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln1027_reg_1022_pp0_iter2_reg == 1'd1))) begin
            l20_buf_V_1_fu_148 <= l20_buf_V_xfExtractPixels_1_5_3_s_fu_474_ap_return;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        col_V_1_reg_1014 <= ap_sig_allocacmp_col_V_1;
        col_V_1_reg_1014_pp0_iter1_reg <= col_V_1_reg_1014;
        icmp_ln1027_reg_1022 <= icmp_ln1027_fu_547_p2;
        icmp_ln1027_reg_1022_pp0_iter1_reg <= icmp_ln1027_reg_1022;
        zext_ln1035_1_cast_reg_1004[7 : 0] <= zext_ln1035_1_cast_fu_492_p1[7 : 0];
        zext_ln1035_cast_reg_1009[7 : 0] <= zext_ln1035_cast_fu_496_p1[7 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        icmp_ln1019_3_reg_1051_pp0_iter3_reg <= icmp_ln1019_3_reg_1051;
        icmp_ln1027_reg_1022_pp0_iter2_reg <= icmp_ln1027_reg_1022_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_angle_buf_V_2_reg_455 <= ap_phi_reg_pp0_iter0_angle_buf_V_2_reg_455;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter2_angle_buf_V_2_reg_455 <= ap_phi_reg_pp0_iter1_angle_buf_V_2_reg_455;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        ap_phi_reg_pp0_iter3_angle_buf_V_2_reg_455 <= ap_phi_reg_pp0_iter2_angle_buf_V_2_reg_455;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln1027_reg_1022_pp0_iter1_reg == 1'd1))) begin
        icmp_ln1019_3_reg_1051 <= icmp_ln1019_3_fu_588_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln1027_reg_1022_pp0_iter2_reg == 1'd1))) begin
        icmp_ln1031_reg_1083 <= icmp_ln1031_fu_646_p2;
        icmp_ln1035_2_reg_1088 <= icmp_ln1035_2_fu_652_p2;
        icmp_ln1035_3_reg_1093 <= icmp_ln1035_3_fu_657_p2;
        icmp_ln1035_7_reg_1098 <= icmp_ln1035_7_fu_663_p2;
        icmp_ln1035_reg_1077 <= icmp_ln1035_fu_641_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        l00_buf_V_1_load_reg_1055 <= l00_buf_V_1_fu_140;
        l10_buf_V_1_load_reg_1061 <= l10_buf_V_1_fu_144;
        l20_buf_V_1_load_reg_1071 <= l20_buf_V_1_fu_148;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln1027_reg_1022_pp0_iter2_reg == 1'd0))) begin
        agg_tmp12_i_i_0_out_ap_vld = 1'b1;
    end else begin
        agg_tmp12_i_i_0_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln1027_reg_1022_pp0_iter2_reg == 1'd0))) begin
        agg_tmp131_0_out_ap_vld = 1'b1;
    end else begin
        agg_tmp131_0_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln1027_reg_1022_pp0_iter2_reg == 1'd0))) begin
        agg_tmp20_i_i_0_out_ap_vld = 1'b1;
    end else begin
        agg_tmp20_i_i_0_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln1027_reg_1022_pp0_iter2_reg == 1'd0))) begin
        agg_tmp23_i_i_0_out_ap_vld = 1'b1;
    end else begin
        agg_tmp23_i_i_0_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln1027_reg_1022_pp0_iter2_reg == 1'd0))) begin
        agg_tmp2_i_i_0_out_ap_vld = 1'b1;
    end else begin
        agg_tmp2_i_i_0_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln1027_reg_1022_pp0_iter2_reg == 1'd0))) begin
        agg_tmp31_i_i_0_out_ap_vld = 1'b1;
    end else begin
        agg_tmp31_i_i_0_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln1027_reg_1022_pp0_iter2_reg == 1'd0))) begin
        agg_tmp9_i_i_0_out_ap_vld = 1'b1;
    end else begin
        agg_tmp9_i_i_0_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_795)) begin
        if ((cmp_i_i163_i == 1'd1)) begin
            angle_V_1_address0 = zext_ln541_fu_572_p1;
        end else if ((cmp_i_i163_i_read_reg_973 == 1'd0)) begin
            angle_V_1_address0 = zext_ln541_1_fu_564_p1;
        end else begin
            angle_V_1_address0 = 'bx;
        end
    end else begin
        angle_V_1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (cmp_i_i163_i == 1'd1) & (icmp_ln1027_reg_1022 == 1'd1) & (read_ind_V_cast_read_reg_981 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage0_11001) & (cmp_i_i163_i_read_reg_973 == 1'd0) & (icmp_ln1027_reg_1022 == 1'd1) & (read_ind_V_cast_read_reg_981 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        angle_V_1_ce0 = 1'b1;
    end else begin
        angle_V_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        angle_V_1_ce1 = 1'b1;
    end else begin
        angle_V_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_795)) begin
        if ((cmp_i_i163_i == 1'd1)) begin
            angle_V_1_d0 = phase_mat_data9_dout;
        end else if ((cmp_i_i163_i_read_reg_973 == 1'd0)) begin
            angle_V_1_d0 = 8'd0;
        end else begin
            angle_V_1_d0 = 'bx;
        end
    end else begin
        angle_V_1_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (cmp_i_i163_i == 1'd1) & (icmp_ln1027_reg_1022 == 1'd1) & (read_ind_V_cast_read_reg_981 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage0_11001) & (cmp_i_i163_i_read_reg_973 == 1'd0) & (icmp_ln1027_reg_1022 == 1'd1) & (read_ind_V_cast_read_reg_981 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        angle_V_1_we0 = 1'b1;
    end else begin
        angle_V_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_798)) begin
        if ((cmp_i_i163_i == 1'd1)) begin
            angle_V_address0 = zext_ln541_fu_572_p1;
        end else if ((cmp_i_i163_i_read_reg_973 == 1'd0)) begin
            angle_V_address0 = zext_ln541_1_fu_564_p1;
        end else begin
            angle_V_address0 = 'bx;
        end
    end else begin
        angle_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (cmp_i_i163_i == 1'd1) & (icmp_ln1027_reg_1022 == 1'd1) & (read_ind_V_cast_read_reg_981 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage0_11001) & (cmp_i_i163_i_read_reg_973 == 1'd0) & (icmp_ln1027_reg_1022 == 1'd1) & (read_ind_V_cast_read_reg_981 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        angle_V_ce0 = 1'b1;
    end else begin
        angle_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        angle_V_ce1 = 1'b1;
    end else begin
        angle_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_798)) begin
        if ((cmp_i_i163_i == 1'd1)) begin
            angle_V_d0 = phase_mat_data9_dout;
        end else if ((cmp_i_i163_i_read_reg_973 == 1'd0)) begin
            angle_V_d0 = 8'd0;
        end else begin
            angle_V_d0 = 'bx;
        end
    end else begin
        angle_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (cmp_i_i163_i == 1'd1) & (icmp_ln1027_reg_1022 == 1'd1) & (read_ind_V_cast_read_reg_981 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage0_11001) & (cmp_i_i163_i_read_reg_973 == 1'd0) & (icmp_ln1027_reg_1022 == 1'd1) & (read_ind_V_cast_read_reg_981 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        angle_V_we0 = 1'b1;
    end else begin
        angle_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln1027_fu_547_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln1027_reg_1022_pp0_iter2_reg == 1'd0))) begin
        ap_condition_exit_pp0_iter3_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter3_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter3_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((((ap_wait_3 & ap_sub_ext_blocking_3) == 1'b1) & ((ap_wait_2 & ap_sub_ext_blocking_2) == 1'b1) & ((ap_wait_1 & ap_sub_ext_blocking_1) == 1'b1) & ((ap_wait_0 & ap_sub_ext_blocking_0) == 1'b1))) begin
        ap_ext_blocking_sub_n = 1'b0;
    end else begin
        ap_ext_blocking_sub_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_wait_3 & ap_sub_int_blocking_3) == 1'b1) & ((ap_wait_2 & ap_sub_int_blocking_2) == 1'b1) & ((ap_wait_1 & ap_sub_int_blocking_1) == 1'b1) & ((ap_wait_0 & ap_sub_int_blocking_0) == 1'b1))) begin
        ap_int_blocking_sub_n = 1'b0;
    end else begin
        ap_int_blocking_sub_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_col_V_1 = 13'd0;
    end else begin
        ap_sig_allocacmp_col_V_1 = col_V_fu_120;
    end
end

always @ (*) begin
    if ((((ap_wait_3 & ap_sub_str_blocking_3) == 1'b1) & ((ap_wait_2 & ap_sub_str_blocking_2) == 1'b1) & ((ap_wait_1 & ap_sub_str_blocking_1) == 1'b1) & ((ap_wait_0 & ap_sub_str_blocking_0) == 1'b1))) begin
        ap_str_blocking_sub_n = 1'b0;
    end else begin
        ap_str_blocking_sub_n = 1'b1;
    end
end

always @ (*) begin
    if ((l00_buf_V_xfExtractPixels_1_5_3_s_fu_464_ap_ext_blocking_n == 1'b0)) begin
        ap_sub_ext_blocking_0 = 1'b1;
    end else begin
        ap_sub_ext_blocking_0 = 1'b0;
    end
end

always @ (*) begin
    if ((l10_buf_V_xfExtractPixels_1_5_3_s_fu_469_ap_ext_blocking_n == 1'b0)) begin
        ap_sub_ext_blocking_1 = 1'b1;
    end else begin
        ap_sub_ext_blocking_1 = 1'b0;
    end
end

always @ (*) begin
    if ((l20_buf_V_xfExtractPixels_1_5_3_s_fu_474_ap_ext_blocking_n == 1'b0)) begin
        ap_sub_ext_blocking_2 = 1'b1;
    end else begin
        ap_sub_ext_blocking_2 = 1'b0;
    end
end

always @ (*) begin
    if ((grp_xfExtractPixels_1_1_0_s_fu_479_ap_ext_blocking_n == 1'b0)) begin
        ap_sub_ext_blocking_3 = 1'b1;
    end else begin
        ap_sub_ext_blocking_3 = 1'b0;
    end
end

always @ (*) begin
    if ((l00_buf_V_xfExtractPixels_1_5_3_s_fu_464_ap_int_blocking_n == 1'b0)) begin
        ap_sub_int_blocking_0 = 1'b1;
    end else begin
        ap_sub_int_blocking_0 = 1'b0;
    end
end

always @ (*) begin
    if ((l10_buf_V_xfExtractPixels_1_5_3_s_fu_469_ap_int_blocking_n == 1'b0)) begin
        ap_sub_int_blocking_1 = 1'b1;
    end else begin
        ap_sub_int_blocking_1 = 1'b0;
    end
end

always @ (*) begin
    if ((l20_buf_V_xfExtractPixels_1_5_3_s_fu_474_ap_int_blocking_n == 1'b0)) begin
        ap_sub_int_blocking_2 = 1'b1;
    end else begin
        ap_sub_int_blocking_2 = 1'b0;
    end
end

always @ (*) begin
    if ((grp_xfExtractPixels_1_1_0_s_fu_479_ap_int_blocking_n == 1'b0)) begin
        ap_sub_int_blocking_3 = 1'b1;
    end else begin
        ap_sub_int_blocking_3 = 1'b0;
    end
end

always @ (*) begin
    if ((l00_buf_V_xfExtractPixels_1_5_3_s_fu_464_ap_str_blocking_n == 1'b0)) begin
        ap_sub_str_blocking_0 = 1'b1;
    end else begin
        ap_sub_str_blocking_0 = 1'b0;
    end
end

always @ (*) begin
    if ((l10_buf_V_xfExtractPixels_1_5_3_s_fu_469_ap_str_blocking_n == 1'b0)) begin
        ap_sub_str_blocking_1 = 1'b1;
    end else begin
        ap_sub_str_blocking_1 = 1'b0;
    end
end

always @ (*) begin
    if ((l20_buf_V_xfExtractPixels_1_5_3_s_fu_474_ap_str_blocking_n == 1'b0)) begin
        ap_sub_str_blocking_2 = 1'b1;
    end else begin
        ap_sub_str_blocking_2 = 1'b0;
    end
end

always @ (*) begin
    if ((grp_xfExtractPixels_1_1_0_s_fu_479_ap_str_blocking_n == 1'b0)) begin
        ap_sub_str_blocking_3 = 1'b1;
    end else begin
        ap_sub_str_blocking_3 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_ST_fsm_pp0_stage0 == ap_CS_fsm)) begin
        ap_wait_0 = 1'b1;
    end else begin
        ap_wait_0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_ST_fsm_pp0_stage0 == ap_CS_fsm)) begin
        ap_wait_1 = 1'b1;
    end else begin
        ap_wait_1 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_ST_fsm_pp0_stage0 == ap_CS_fsm)) begin
        ap_wait_2 = 1'b1;
    end else begin
        ap_wait_2 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_ST_fsm_pp0_stage0 == ap_CS_fsm)) begin
        ap_wait_3 = 1'b1;
    end else begin
        ap_wait_3 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_801)) begin
        if ((cmp_i_i163_i == 1'd1)) begin
            buf_V_1_address0 = zext_ln541_fu_572_p1;
        end else if ((cmp_i_i163_i_read_reg_973 == 1'd0)) begin
            buf_V_1_address0 = zext_ln541_1_fu_564_p1;
        end else begin
            buf_V_1_address0 = 'bx;
        end
    end else begin
        buf_V_1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (cmp_i_i163_i == 1'd1) & (icmp_ln1027_reg_1022 == 1'd1) & (row_ind_V_cast_read_reg_977 == 2'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage0_11001) & (cmp_i_i163_i_read_reg_973 == 1'd0) & (icmp_ln1027_reg_1022 == 1'd1) & (row_ind_V_cast_read_reg_977 == 2'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        buf_V_1_ce0 = 1'b1;
    end else begin
        buf_V_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        buf_V_1_ce1 = 1'b1;
    end else begin
        buf_V_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_801)) begin
        if ((cmp_i_i163_i == 1'd1)) begin
            buf_V_1_d0 = magnitude_mat_data8_dout;
        end else if ((cmp_i_i163_i_read_reg_973 == 1'd0)) begin
            buf_V_1_d0 = 16'd0;
        end else begin
            buf_V_1_d0 = 'bx;
        end
    end else begin
        buf_V_1_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (cmp_i_i163_i == 1'd1) & (icmp_ln1027_reg_1022 == 1'd1) & (row_ind_V_cast_read_reg_977 == 2'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage0_11001) & (cmp_i_i163_i_read_reg_973 == 1'd0) & (icmp_ln1027_reg_1022 == 1'd1) & (row_ind_V_cast_read_reg_977 == 2'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        buf_V_1_we0 = 1'b1;
    end else begin
        buf_V_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_805)) begin
        if ((cmp_i_i163_i == 1'd1)) begin
            buf_V_2_address0 = zext_ln541_fu_572_p1;
        end else if ((cmp_i_i163_i_read_reg_973 == 1'd0)) begin
            buf_V_2_address0 = zext_ln541_1_fu_564_p1;
        end else begin
            buf_V_2_address0 = 'bx;
        end
    end else begin
        buf_V_2_address0 = 'bx;
    end
end

always @ (*) begin
    if (((~(row_ind_V_cast_read_reg_977 == 2'd0) & ~(row_ind_V_cast_read_reg_977 == 2'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (cmp_i_i163_i == 1'd1) & (icmp_ln1027_reg_1022 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | (~(row_ind_V_cast_read_reg_977 == 2'd0) & ~(row_ind_V_cast_read_reg_977 == 2'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (cmp_i_i163_i_read_reg_973 == 1'd0) & (icmp_ln1027_reg_1022 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        buf_V_2_ce0 = 1'b1;
    end else begin
        buf_V_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        buf_V_2_ce1 = 1'b1;
    end else begin
        buf_V_2_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_805)) begin
        if ((cmp_i_i163_i == 1'd1)) begin
            buf_V_2_d0 = magnitude_mat_data8_dout;
        end else if ((cmp_i_i163_i_read_reg_973 == 1'd0)) begin
            buf_V_2_d0 = 16'd0;
        end else begin
            buf_V_2_d0 = 'bx;
        end
    end else begin
        buf_V_2_d0 = 'bx;
    end
end

always @ (*) begin
    if (((~(row_ind_V_cast_read_reg_977 == 2'd0) & ~(row_ind_V_cast_read_reg_977 == 2'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (cmp_i_i163_i == 1'd1) & (icmp_ln1027_reg_1022 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | (~(row_ind_V_cast_read_reg_977 == 2'd0) & ~(row_ind_V_cast_read_reg_977 == 2'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (cmp_i_i163_i_read_reg_973 == 1'd0) & (icmp_ln1027_reg_1022 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        buf_V_2_we0 = 1'b1;
    end else begin
        buf_V_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_808)) begin
        if ((cmp_i_i163_i == 1'd1)) begin
            buf_V_address0 = zext_ln541_fu_572_p1;
        end else if ((cmp_i_i163_i_read_reg_973 == 1'd0)) begin
            buf_V_address0 = zext_ln541_1_fu_564_p1;
        end else begin
            buf_V_address0 = 'bx;
        end
    end else begin
        buf_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (cmp_i_i163_i == 1'd1) & (icmp_ln1027_reg_1022 == 1'd1) & (row_ind_V_cast_read_reg_977 == 2'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage0_11001) & (cmp_i_i163_i_read_reg_973 == 1'd0) & (icmp_ln1027_reg_1022 == 1'd1) & (row_ind_V_cast_read_reg_977 == 2'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        buf_V_ce0 = 1'b1;
    end else begin
        buf_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        buf_V_ce1 = 1'b1;
    end else begin
        buf_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_808)) begin
        if ((cmp_i_i163_i == 1'd1)) begin
            buf_V_d0 = magnitude_mat_data8_dout;
        end else if ((cmp_i_i163_i_read_reg_973 == 1'd0)) begin
            buf_V_d0 = 16'd0;
        end else begin
            buf_V_d0 = 'bx;
        end
    end else begin
        buf_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (cmp_i_i163_i == 1'd1) & (icmp_ln1027_reg_1022 == 1'd1) & (row_ind_V_cast_read_reg_977 == 2'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage0_11001) & (cmp_i_i163_i_read_reg_973 == 1'd0) & (icmp_ln1027_reg_1022 == 1'd1) & (row_ind_V_cast_read_reg_977 == 2'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        buf_V_we0 = 1'b1;
    end else begin
        buf_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_359)) begin
        if ((write_ind_V_cast_read_reg_985 == 1'd1)) begin
            grp_xfExtractPixels_1_1_0_s_fu_479_p_read1 = angle_V_1_q1;
        end else if ((write_ind_V_cast_read_reg_985 == 1'd0)) begin
            grp_xfExtractPixels_1_1_0_s_fu_479_p_read1 = angle_V_q1;
        end else begin
            grp_xfExtractPixels_1_1_0_s_fu_479_p_read1 = 'bx;
        end
    end else begin
        grp_xfExtractPixels_1_1_0_s_fu_479_p_read1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_predicate_op73_read_state2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        magnitude_mat_data8_blk_n = magnitude_mat_data8_empty_n;
    end else begin
        magnitude_mat_data8_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op73_read_state2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        magnitude_mat_data8_read = 1'b1;
    end else begin
        magnitude_mat_data8_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln1019_3_reg_1051_pp0_iter3_reg == 1'd0) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        nms_mat_data10_blk_n = nms_mat_data10_full_n;
    end else begin
        nms_mat_data10_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln1019_3_reg_1051_pp0_iter3_reg == 1'd0) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        nms_mat_data10_write = 1'b1;
    end else begin
        nms_mat_data10_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_predicate_op84_read_state2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        phase_mat_data9_blk_n = phase_mat_data9_empty_n;
    end else begin
        phase_mat_data9_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op84_read_state2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        phase_mat_data9_read = 1'b1;
    end else begin
        phase_mat_data9_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign agg_tmp12_i_i_0_out = l10_buf_V_1_fu_144;

assign agg_tmp131_0_out = agg_tmp131_0_fu_124;

assign agg_tmp20_i_i_0_out = agg_tmp20_i_i_0_fu_132;

assign agg_tmp23_i_i_0_out = l20_buf_V_1_fu_148;

assign agg_tmp2_i_i_0_out = l00_buf_V_1_fu_140;

assign agg_tmp31_i_i_0_out = angle_buf_V_3_fu_136;

assign agg_tmp9_i_i_0_out = agg_tmp9_i_i_0_fu_128;

assign and_ln1019_fu_866_p2 = (xor_ln1019_fu_860_p2 & icmp_ln1035_reg_1077);

assign and_ln105_1_fu_841_p2 = (icmp_ln1035_7_reg_1098 & icmp_ln1035_6_fu_831_p2);

assign and_ln105_2_fu_846_p2 = (and_ln105_fu_836_p2 & and_ln105_1_fu_841_p2);

assign and_ln105_fu_836_p2 = (icmp_ln1035_reg_1077 & icmp_ln1019_4_fu_825_p2);

assign and_ln46_1_fu_725_p2 = (icmp_ln1035_1_fu_702_p2 & and_ln46_fu_719_p2);

assign and_ln46_fu_719_p2 = (xor_ln1031_fu_707_p2 & icmp_ln1019_fu_696_p2);

assign and_ln65_1_fu_756_p2 = (icmp_ln1035_3_reg_1093 & and_ln65_fu_750_p2);

assign and_ln65_fu_750_p2 = (icmp_ln1035_4_fu_745_p2 & icmp_ln1019_1_fu_739_p2);

assign and_ln85_1_fu_803_p2 = (icmp_ln1035_5_fu_783_p2 & and_ln85_fu_797_p2);

assign and_ln85_fu_797_p2 = (xor_ln1031_1_fu_791_p2 & icmp_ln1019_2_fu_777_p2);

assign angle_V_1_address1 = zext_ln541_2_fu_580_p1;

assign angle_V_address1 = zext_ln541_2_fu_580_p1;

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((icmp_ln1019_3_reg_1051_pp0_iter3_reg == 1'd0) & (nms_mat_data10_full_n == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((ap_predicate_op84_read_state2 == 1'b1) & (phase_mat_data9_empty_n == 1'b0)) | ((ap_predicate_op73_read_state2 == 1'b1) & (magnitude_mat_data8_empty_n == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((icmp_ln1019_3_reg_1051_pp0_iter3_reg == 1'd0) & (nms_mat_data10_full_n == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((ap_predicate_op84_read_state2 == 1'b1) & (phase_mat_data9_empty_n == 1'b0)) | ((ap_predicate_op73_read_state2 == 1'b1) & (magnitude_mat_data8_empty_n == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((icmp_ln1019_3_reg_1051_pp0_iter3_reg == 1'd0) & (nms_mat_data10_full_n == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((ap_predicate_op84_read_state2 == 1'b1) & (phase_mat_data9_empty_n == 1'b0)) | ((ap_predicate_op73_read_state2 == 1'b1) & (magnitude_mat_data8_empty_n == 1'b0)))));
end

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = (((ap_predicate_op84_read_state2 == 1'b1) & (phase_mat_data9_empty_n == 1'b0)) | ((ap_predicate_op73_read_state2 == 1'b1) & (magnitude_mat_data8_empty_n == 1'b0)));
end

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state5_pp0_stage0_iter4 = ((icmp_ln1019_3_reg_1051_pp0_iter3_reg == 1'd0) & (nms_mat_data10_full_n == 1'b0));
end

always @ (*) begin
    ap_condition_359 = ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln1027_reg_1022_pp0_iter2_reg == 1'd1));
end

always @ (*) begin
    ap_condition_795 = ((1'b0 == ap_block_pp0_stage0) & (icmp_ln1027_reg_1022 == 1'd1) & (read_ind_V_cast_read_reg_981 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_condition_798 = ((1'b0 == ap_block_pp0_stage0) & (icmp_ln1027_reg_1022 == 1'd1) & (read_ind_V_cast_read_reg_981 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_condition_801 = ((1'b0 == ap_block_pp0_stage0) & (icmp_ln1027_reg_1022 == 1'd1) & (row_ind_V_cast_read_reg_977 == 2'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_condition_805 = (~(row_ind_V_cast_read_reg_977 == 2'd0) & ~(row_ind_V_cast_read_reg_977 == 2'd1) & (1'b0 == ap_block_pp0_stage0) & (icmp_ln1027_reg_1022 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_condition_808 = ((1'b0 == ap_block_pp0_stage0) & (icmp_ln1027_reg_1022 == 1'd1) & (row_ind_V_cast_read_reg_977 == 2'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_ext_blocking_n = (ap_ext_blocking_sub_n & 1'b1);

assign ap_int_blocking_cur_n = (phase_mat_data9_blk_n & nms_mat_data10_blk_n & magnitude_mat_data8_blk_n);

assign ap_int_blocking_n = (ap_int_blocking_sub_n & ap_int_blocking_cur_n);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_phi_reg_pp0_iter0_angle_buf_V_2_reg_455 = 'bx;

always @ (*) begin
    ap_predicate_op73_read_state2 = ((cmp_i_i163_i == 1'd1) & (icmp_ln1027_reg_1022 == 1'd1));
end

always @ (*) begin
    ap_predicate_op84_read_state2 = ((cmp_i_i163_i == 1'd1) & (icmp_ln1027_reg_1022 == 1'd1));
end

assign ap_str_blocking_n = (ap_str_blocking_sub_n & 1'b1);

assign buf_V_1_address1 = zext_ln541_2_fu_580_p1;

assign buf_V_2_address1 = zext_ln541_2_fu_580_p1;

assign buf_V_address1 = zext_ln541_2_fu_580_p1;

assign cmp_i_i163_i_read_reg_973 = cmp_i_i163_i;

assign col_V_2_fu_553_p2 = (ap_sig_allocacmp_col_V_1 + 13'd1);

assign icmp_ln1019_1_fu_739_p2 = ((angle_buf_V_3_fu_136 == 8'd45) ? 1'b1 : 1'b0);

assign icmp_ln1019_2_fu_777_p2 = ((angle_buf_V_3_fu_136 == 8'd90) ? 1'b1 : 1'b0);

assign icmp_ln1019_3_fu_588_p2 = ((col_V_1_reg_1014_pp0_iter1_reg == 13'd0) ? 1'b1 : 1'b0);

assign icmp_ln1019_4_fu_825_p2 = ((angle_buf_V_3_fu_136 == 8'd135) ? 1'b1 : 1'b0);

assign icmp_ln1019_fu_696_p2 = ((angle_buf_V_3_fu_136 == 8'd0) ? 1'b1 : 1'b0);

assign icmp_ln1027_fu_547_p2 = ((zext_ln1027_fu_543_p1 < imgwidth_load) ? 1'b1 : 1'b0);

assign icmp_ln1031_1_fu_787_p2 = (($signed(l10_buf_V_1_load_reg_1061) < $signed(l20_buf_V_1_load_reg_1071)) ? 1'b1 : 1'b0);

assign icmp_ln1031_fu_646_p2 = (($signed(l10_buf_V_1_fu_144) < $signed(l10_buf_V_xfExtractPixels_1_5_3_s_fu_469_ap_return)) ? 1'b1 : 1'b0);

assign icmp_ln1035_1_fu_702_p2 = (($signed(agg_tmp9_i_i_0_fu_128) < $signed(l10_buf_V_1_load_reg_1061)) ? 1'b1 : 1'b0);

assign icmp_ln1035_2_fu_652_p2 = (($signed(zext_ln1035_1_cast_reg_1004) < $signed(l10_buf_V_1_fu_144)) ? 1'b1 : 1'b0);

assign icmp_ln1035_3_fu_657_p2 = (($signed(l00_buf_V_xfExtractPixels_1_5_3_s_fu_464_ap_return) < $signed(l10_buf_V_1_fu_144)) ? 1'b1 : 1'b0);

assign icmp_ln1035_4_fu_745_p2 = (($signed(agg_tmp20_i_i_0_fu_132) < $signed(l10_buf_V_1_load_reg_1061)) ? 1'b1 : 1'b0);

assign icmp_ln1035_5_fu_783_p2 = (($signed(l00_buf_V_1_load_reg_1055) < $signed(l10_buf_V_1_load_reg_1061)) ? 1'b1 : 1'b0);

assign icmp_ln1035_6_fu_831_p2 = (($signed(agg_tmp131_0_fu_124) < $signed(l10_buf_V_1_load_reg_1061)) ? 1'b1 : 1'b0);

assign icmp_ln1035_7_fu_663_p2 = (($signed(l20_buf_V_xfExtractPixels_1_5_3_s_fu_474_ap_return) < $signed(l10_buf_V_1_fu_144)) ? 1'b1 : 1'b0);

assign icmp_ln1035_fu_641_p2 = (($signed(zext_ln1035_cast_reg_1009) < $signed(l10_buf_V_1_fu_144)) ? 1'b1 : 1'b0);

assign nms_mat_data10_din = ((and_ln1019_fu_866_p2[0:0] == 1'b1) ? select_ln1019_1_fu_817_p3 : select_ln105_fu_852_p3);

assign read_ind_V_cast_read_reg_981 = read_ind_V_cast;

assign row_ind_V_cast_read_reg_977 = row_ind_V_cast;

assign select_ln1019_1_fu_817_p3 = ((icmp_ln1019_2_fu_777_p2[0:0] == 1'b1) ? select_ln85_fu_809_p3 : select_ln1019_fu_769_p3);

assign select_ln1019_fu_769_p3 = ((icmp_ln1019_1_fu_739_p2[0:0] == 1'b1) ? select_ln65_fu_761_p3 : select_ln46_fu_731_p3);

assign select_ln105_fu_852_p3 = ((and_ln105_2_fu_846_p2[0:0] == 1'b1) ? select_ln211_fu_712_p3 : 2'd0);

assign select_ln211_fu_712_p3 = ((icmp_ln1035_2_reg_1088[0:0] == 1'b1) ? 2'd3 : 2'd1);

assign select_ln46_fu_731_p3 = ((and_ln46_1_fu_725_p2[0:0] == 1'b1) ? select_ln211_fu_712_p3 : 2'd0);

assign select_ln65_fu_761_p3 = ((and_ln65_1_fu_756_p2[0:0] == 1'b1) ? select_ln211_fu_712_p3 : 2'd0);

assign select_ln85_fu_809_p3 = ((and_ln85_1_fu_803_p2[0:0] == 1'b1) ? select_ln211_fu_712_p3 : 2'd0);

assign write_ind_V_cast_read_reg_985 = write_ind_V_cast;

assign xor_ln1019_fu_860_p2 = (icmp_ln1019_4_fu_825_p2 ^ 1'd1);

assign xor_ln1031_1_fu_791_p2 = (icmp_ln1031_1_fu_787_p2 ^ 1'd1);

assign xor_ln1031_fu_707_p2 = (icmp_ln1031_reg_1083 ^ 1'd1);

assign zext_ln1027_fu_543_p1 = ap_sig_allocacmp_col_V_1;

assign zext_ln1035_1_cast_fu_492_p1 = zext_ln1035_1;

assign zext_ln1035_cast_fu_496_p1 = zext_ln1035;

assign zext_ln541_1_fu_564_p1 = col_V_1_reg_1014;

assign zext_ln541_2_fu_580_p1 = col_V_1_reg_1014_pp0_iter1_reg;

assign zext_ln541_fu_572_p1 = col_V_1_reg_1014;

always @ (posedge ap_clk) begin
    zext_ln1035_1_cast_reg_1004[15:8] <= 8'b00000000;
    zext_ln1035_cast_reg_1009[15:8] <= 8'b00000000;
end

endmodule //canny_accel_xFSuppression3x3_Pipeline_colLoop1
