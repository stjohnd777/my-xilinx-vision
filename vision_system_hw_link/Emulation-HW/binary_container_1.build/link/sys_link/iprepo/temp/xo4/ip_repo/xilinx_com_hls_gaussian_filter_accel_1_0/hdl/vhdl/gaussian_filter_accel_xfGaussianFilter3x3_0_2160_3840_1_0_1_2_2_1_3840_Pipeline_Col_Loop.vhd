-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity gaussian_filter_accel_xfGaussianFilter3x3_0_2160_3840_1_0_1_2_2_1_3840_Pipeline_Col_Loop is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    in_mat_data1_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    in_mat_data1_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    in_mat_data1_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    in_mat_data1_empty_n : IN STD_LOGIC;
    in_mat_data1_read : OUT STD_LOGIC;
    out_mat_data2_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_mat_data2_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    out_mat_data2_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    out_mat_data2_full_n : IN STD_LOGIC;
    out_mat_data2_write : OUT STD_LOGIC;
    img_width : IN STD_LOGIC_VECTOR (15 downto 0);
    tp_V : IN STD_LOGIC_VECTOR (1 downto 0);
    mid_V : IN STD_LOGIC_VECTOR (1 downto 0);
    bottom_V : IN STD_LOGIC_VECTOR (1 downto 0);
    p_read : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read1 : IN STD_LOGIC_VECTOR (7 downto 0);
    buf_V_2_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    buf_V_2_ce0 : OUT STD_LOGIC;
    buf_V_2_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buf_V_2_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
    buf_V_2_ce1 : OUT STD_LOGIC;
    buf_V_2_we1 : OUT STD_LOGIC;
    buf_V_2_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    buf_V_1_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    buf_V_1_ce0 : OUT STD_LOGIC;
    buf_V_1_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buf_V_1_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
    buf_V_1_ce1 : OUT STD_LOGIC;
    buf_V_1_we1 : OUT STD_LOGIC;
    buf_V_1_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    buf_V_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    buf_V_ce0 : OUT STD_LOGIC;
    buf_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buf_V_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
    buf_V_ce1 : OUT STD_LOGIC;
    buf_V_we1 : OUT STD_LOGIC;
    buf_V_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    cmp_i_i201_i : IN STD_LOGIC_VECTOR (0 downto 0);
    p_Val2_7_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    p_Val2_7_out_ap_vld : OUT STD_LOGIC;
    p_Val2_6_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    p_Val2_6_out_ap_vld : OUT STD_LOGIC;
    p_Val2_4_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    p_Val2_4_out_ap_vld : OUT STD_LOGIC;
    p_Val2_3_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    p_Val2_3_out_ap_vld : OUT STD_LOGIC;
    p_Val2_1_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    p_Val2_1_out_ap_vld : OUT STD_LOGIC;
    p_Val2_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    p_Val2_out_ap_vld : OUT STD_LOGIC;
    ap_ext_blocking_n : OUT STD_LOGIC;
    ap_str_blocking_n : OUT STD_LOGIC;
    ap_int_blocking_n : OUT STD_LOGIC;
    grp_xFapplygaussian3x3_0_s_fu_192_p_din1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    grp_xFapplygaussian3x3_0_s_fu_192_p_din2 : OUT STD_LOGIC_VECTOR (7 downto 0);
    grp_xFapplygaussian3x3_0_s_fu_192_p_din3 : OUT STD_LOGIC_VECTOR (7 downto 0);
    grp_xFapplygaussian3x3_0_s_fu_192_p_din4 : OUT STD_LOGIC_VECTOR (7 downto 0);
    grp_xFapplygaussian3x3_0_s_fu_192_p_din5 : OUT STD_LOGIC_VECTOR (7 downto 0);
    grp_xFapplygaussian3x3_0_s_fu_192_p_din6 : OUT STD_LOGIC_VECTOR (7 downto 0);
    grp_xFapplygaussian3x3_0_s_fu_192_p_din7 : OUT STD_LOGIC_VECTOR (7 downto 0);
    grp_xFapplygaussian3x3_0_s_fu_192_p_din8 : OUT STD_LOGIC_VECTOR (7 downto 0);
    grp_xFapplygaussian3x3_0_s_fu_192_p_din9 : OUT STD_LOGIC_VECTOR (7 downto 0);
    grp_xFapplygaussian3x3_0_s_fu_192_p_din10 : OUT STD_LOGIC_VECTOR (7 downto 0);
    grp_xFapplygaussian3x3_0_s_fu_192_p_din11 : OUT STD_LOGIC_VECTOR (7 downto 0);
    grp_xFapplygaussian3x3_0_s_fu_192_p_dout0 : IN STD_LOGIC_VECTOR (7 downto 0);
    grp_xFapplygaussian3x3_0_s_fu_192_p_ce : OUT STD_LOGIC );
end;


architecture behav of gaussian_filter_accel_xfGaussianFilter3x3_0_2160_3840_1_0_1_2_2_1_3840_Pipeline_Col_Loop is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv13_1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal icmp_ln1027_reg_544 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp_i_i201_i_read_reg_509 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_predicate_op66_read_state2 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter11 : BOOLEAN;
    signal icmp_ln1019_reg_563 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1019_reg_563_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state13_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln1027_fu_336_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal in_mat_data1_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal out_mat_data2_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal bottom_V_read_reg_523 : STD_LOGIC_VECTOR (1 downto 0);
    signal col_V_reg_538 : STD_LOGIC_VECTOR (12 downto 0);
    signal icmp_ln1027_reg_544_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1027_reg_544_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1027_reg_544_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1027_reg_544_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1027_reg_544_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1027_reg_544_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1027_reg_544_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1027_reg_544_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1027_reg_544_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1027_reg_544_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal buf_V_addr_reg_548 : STD_LOGIC_VECTOR (11 downto 0);
    signal buf_V_1_addr_reg_553 : STD_LOGIC_VECTOR (11 downto 0);
    signal buf_V_2_addr_reg_558 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln1019_fu_359_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1019_reg_563_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1019_reg_563_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1019_reg_563_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1019_reg_563_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1019_reg_563_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1019_reg_563_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1019_reg_563_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1019_reg_563_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1019_reg_563_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_s_reg_567 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_s_reg_567_pp0_iter4_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_s_reg_567_pp0_iter5_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_s_reg_567_pp0_iter6_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_s_reg_567_pp0_iter7_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_s_reg_567_pp0_iter8_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_s_reg_567_pp0_iter9_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_s_reg_567_pp0_iter10_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_2_reg_574 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_2_reg_574_pp0_iter4_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_2_reg_574_pp0_iter5_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_2_reg_574_pp0_iter6_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_2_reg_574_pp0_iter7_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_2_reg_574_pp0_iter8_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_2_reg_574_pp0_iter9_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_2_reg_574_pp0_iter10_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_4_reg_581 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_4_reg_581_pp0_iter4_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_4_reg_581_pp0_iter5_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_4_reg_581_pp0_iter6_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_4_reg_581_pp0_iter7_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_4_reg_581_pp0_iter8_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_4_reg_581_pp0_iter9_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_4_reg_581_pp0_iter10_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_1_fu_373_p5 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_1_reg_588 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_3_fu_384_p5 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_3_reg_593 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_5_fu_395_p5 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_5_reg_598 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_condition_exit_pp0_iter3_stage0 : STD_LOGIC;
    signal grp_xFapplygaussian3x3_0_s_fu_278_ap_ce : STD_LOGIC;
    signal grp_xFapplygaussian3x3_0_s_fu_278_ap_ext_blocking_n : STD_LOGIC;
    signal grp_xFapplygaussian3x3_0_s_fu_278_ap_str_blocking_n : STD_LOGIC;
    signal grp_xFapplygaussian3x3_0_s_fu_278_ap_int_blocking_n : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0_ignore_call9 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1_ignore_call9 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2_ignore_call9 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3_ignore_call9 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4_ignore_call9 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5_ignore_call9 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6_ignore_call9 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7_ignore_call9 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter8_ignore_call9 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter9_ignore_call9 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter10_ignore_call9 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter11_ignore_call9 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter12_ignore_call9 : BOOLEAN;
    signal ap_block_pp0_stage0_11001_ignoreCallOp94 : BOOLEAN;
    signal zext_ln541_fu_353_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal col_V_2_fu_96 : STD_LOGIC_VECTOR (12 downto 0);
    signal col_V_3_fu_342_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_col_V : STD_LOGIC_VECTOR (12 downto 0);
    signal ret_fu_100 : STD_LOGIC_VECTOR (7 downto 0);
    signal ret_1_fu_104 : STD_LOGIC_VECTOR (7 downto 0);
    signal ret_2_fu_108 : STD_LOGIC_VECTOR (7 downto 0);
    signal ret_3_fu_112 : STD_LOGIC_VECTOR (7 downto 0);
    signal ret_4_fu_116 : STD_LOGIC_VECTOR (7 downto 0);
    signal ret_5_fu_120 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal zext_ln1027_fu_332_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter9_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter10_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter11_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_int_blocking_cur_n : STD_LOGIC;
    signal ap_ext_blocking_sub_n : STD_LOGIC;
    signal ap_wait_0 : STD_LOGIC;
    signal ap_sub_ext_blocking_0 : STD_LOGIC;
    signal ap_str_blocking_sub_n : STD_LOGIC;
    signal ap_sub_str_blocking_0 : STD_LOGIC;
    signal ap_int_blocking_sub_n : STD_LOGIC;
    signal ap_sub_int_blocking_0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_condition_678 : BOOLEAN;
    signal ap_condition_682 : BOOLEAN;
    signal ap_condition_685 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component gaussian_filter_accel_xFapplygaussian3x3_0_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        D1 : IN STD_LOGIC_VECTOR (7 downto 0);
        D2 : IN STD_LOGIC_VECTOR (7 downto 0);
        D3 : IN STD_LOGIC_VECTOR (7 downto 0);
        D4 : IN STD_LOGIC_VECTOR (7 downto 0);
        D5 : IN STD_LOGIC_VECTOR (7 downto 0);
        D6 : IN STD_LOGIC_VECTOR (7 downto 0);
        D7 : IN STD_LOGIC_VECTOR (7 downto 0);
        D8 : IN STD_LOGIC_VECTOR (7 downto 0);
        D9 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_read1 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_read2 : IN STD_LOGIC_VECTOR (7 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (7 downto 0);
        ap_ce : IN STD_LOGIC;
        ap_ext_blocking_n : OUT STD_LOGIC;
        ap_str_blocking_n : OUT STD_LOGIC;
        ap_int_blocking_n : OUT STD_LOGIC );
    end component;


    component gaussian_filter_accel_mux_32_8_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (7 downto 0);
        din3 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component gaussian_filter_accel_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mux_32_8_1_1_U111 : component gaussian_filter_accel_mux_32_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 2,
        dout_WIDTH => 8)
    port map (
        din0 => buf_V_q0,
        din1 => buf_V_1_q0,
        din2 => buf_V_2_q0,
        din3 => tp_V,
        dout => p_Val2_1_fu_373_p5);

    mux_32_8_1_1_U112 : component gaussian_filter_accel_mux_32_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 2,
        dout_WIDTH => 8)
    port map (
        din0 => buf_V_q0,
        din1 => buf_V_1_q0,
        din2 => buf_V_2_q0,
        din3 => mid_V,
        dout => p_Val2_3_fu_384_p5);

    mux_32_8_1_1_U113 : component gaussian_filter_accel_mux_32_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 2,
        dout_WIDTH => 8)
    port map (
        din0 => buf_V_q0,
        din1 => buf_V_1_q0,
        din2 => buf_V_2_q0,
        din3 => bottom_V,
        dout => p_Val2_5_fu_395_p5);

    flow_control_loop_pipe_sequential_init_U : component gaussian_filter_accel_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter11_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter3_stage0)) then 
                    ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    col_V_2_fu_96_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln1027_fu_336_p2 = ap_const_lv1_1))) then 
                    col_V_2_fu_96 <= col_V_3_fu_342_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    col_V_2_fu_96 <= ap_const_lv13_0;
                end if;
            end if; 
        end if;
    end process;

    ret_1_fu_104_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ret_1_fu_104 <= ap_const_lv8_0;
                elsif ((ap_enable_reg_pp0_iter4 = ap_const_logic_1)) then 
                    ret_1_fu_104 <= p_Val2_2_reg_574;
                end if;
            end if; 
        end if;
    end process;

    ret_2_fu_108_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ret_2_fu_108 <= ap_const_lv8_0;
                elsif ((ap_enable_reg_pp0_iter4 = ap_const_logic_1)) then 
                    ret_2_fu_108 <= p_Val2_4_reg_581;
                end if;
            end if; 
        end if;
    end process;

    ret_3_fu_112_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ret_3_fu_112 <= ap_const_lv8_0;
                elsif (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (icmp_ln1027_reg_544_pp0_iter2_reg = ap_const_lv1_1))) then 
                    ret_3_fu_112 <= p_Val2_1_fu_373_p5;
                end if;
            end if; 
        end if;
    end process;

    ret_4_fu_116_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ret_4_fu_116 <= ap_const_lv8_0;
                elsif (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (icmp_ln1027_reg_544_pp0_iter2_reg = ap_const_lv1_1))) then 
                    ret_4_fu_116 <= p_Val2_3_fu_384_p5;
                end if;
            end if; 
        end if;
    end process;

    ret_5_fu_120_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ret_5_fu_120 <= ap_const_lv8_0;
                elsif (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (icmp_ln1027_reg_544_pp0_iter2_reg = ap_const_lv1_1))) then 
                    ret_5_fu_120 <= p_Val2_5_fu_395_p5;
                end if;
            end if; 
        end if;
    end process;

    ret_fu_100_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ret_fu_100 <= ap_const_lv8_0;
                elsif ((ap_enable_reg_pp0_iter4 = ap_const_logic_1)) then 
                    ret_fu_100 <= p_Val2_s_reg_567;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
                ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
                ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
                icmp_ln1019_reg_563_pp0_iter10_reg <= icmp_ln1019_reg_563_pp0_iter9_reg;
                icmp_ln1019_reg_563_pp0_iter11_reg <= icmp_ln1019_reg_563_pp0_iter10_reg;
                icmp_ln1019_reg_563_pp0_iter2_reg <= icmp_ln1019_reg_563;
                icmp_ln1019_reg_563_pp0_iter3_reg <= icmp_ln1019_reg_563_pp0_iter2_reg;
                icmp_ln1019_reg_563_pp0_iter4_reg <= icmp_ln1019_reg_563_pp0_iter3_reg;
                icmp_ln1019_reg_563_pp0_iter5_reg <= icmp_ln1019_reg_563_pp0_iter4_reg;
                icmp_ln1019_reg_563_pp0_iter6_reg <= icmp_ln1019_reg_563_pp0_iter5_reg;
                icmp_ln1019_reg_563_pp0_iter7_reg <= icmp_ln1019_reg_563_pp0_iter6_reg;
                icmp_ln1019_reg_563_pp0_iter8_reg <= icmp_ln1019_reg_563_pp0_iter7_reg;
                icmp_ln1019_reg_563_pp0_iter9_reg <= icmp_ln1019_reg_563_pp0_iter8_reg;
                icmp_ln1027_reg_544_pp0_iter10_reg <= icmp_ln1027_reg_544_pp0_iter9_reg;
                icmp_ln1027_reg_544_pp0_iter2_reg <= icmp_ln1027_reg_544_pp0_iter1_reg;
                icmp_ln1027_reg_544_pp0_iter3_reg <= icmp_ln1027_reg_544_pp0_iter2_reg;
                icmp_ln1027_reg_544_pp0_iter4_reg <= icmp_ln1027_reg_544_pp0_iter3_reg;
                icmp_ln1027_reg_544_pp0_iter5_reg <= icmp_ln1027_reg_544_pp0_iter4_reg;
                icmp_ln1027_reg_544_pp0_iter6_reg <= icmp_ln1027_reg_544_pp0_iter5_reg;
                icmp_ln1027_reg_544_pp0_iter7_reg <= icmp_ln1027_reg_544_pp0_iter6_reg;
                icmp_ln1027_reg_544_pp0_iter8_reg <= icmp_ln1027_reg_544_pp0_iter7_reg;
                icmp_ln1027_reg_544_pp0_iter9_reg <= icmp_ln1027_reg_544_pp0_iter8_reg;
                p_Val2_2_reg_574_pp0_iter10_reg <= p_Val2_2_reg_574_pp0_iter9_reg;
                p_Val2_2_reg_574_pp0_iter4_reg <= p_Val2_2_reg_574;
                p_Val2_2_reg_574_pp0_iter5_reg <= p_Val2_2_reg_574_pp0_iter4_reg;
                p_Val2_2_reg_574_pp0_iter6_reg <= p_Val2_2_reg_574_pp0_iter5_reg;
                p_Val2_2_reg_574_pp0_iter7_reg <= p_Val2_2_reg_574_pp0_iter6_reg;
                p_Val2_2_reg_574_pp0_iter8_reg <= p_Val2_2_reg_574_pp0_iter7_reg;
                p_Val2_2_reg_574_pp0_iter9_reg <= p_Val2_2_reg_574_pp0_iter8_reg;
                p_Val2_4_reg_581_pp0_iter10_reg <= p_Val2_4_reg_581_pp0_iter9_reg;
                p_Val2_4_reg_581_pp0_iter4_reg <= p_Val2_4_reg_581;
                p_Val2_4_reg_581_pp0_iter5_reg <= p_Val2_4_reg_581_pp0_iter4_reg;
                p_Val2_4_reg_581_pp0_iter6_reg <= p_Val2_4_reg_581_pp0_iter5_reg;
                p_Val2_4_reg_581_pp0_iter7_reg <= p_Val2_4_reg_581_pp0_iter6_reg;
                p_Val2_4_reg_581_pp0_iter8_reg <= p_Val2_4_reg_581_pp0_iter7_reg;
                p_Val2_4_reg_581_pp0_iter9_reg <= p_Val2_4_reg_581_pp0_iter8_reg;
                p_Val2_s_reg_567_pp0_iter10_reg <= p_Val2_s_reg_567_pp0_iter9_reg;
                p_Val2_s_reg_567_pp0_iter4_reg <= p_Val2_s_reg_567;
                p_Val2_s_reg_567_pp0_iter5_reg <= p_Val2_s_reg_567_pp0_iter4_reg;
                p_Val2_s_reg_567_pp0_iter6_reg <= p_Val2_s_reg_567_pp0_iter5_reg;
                p_Val2_s_reg_567_pp0_iter7_reg <= p_Val2_s_reg_567_pp0_iter6_reg;
                p_Val2_s_reg_567_pp0_iter8_reg <= p_Val2_s_reg_567_pp0_iter7_reg;
                p_Val2_s_reg_567_pp0_iter9_reg <= p_Val2_s_reg_567_pp0_iter8_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                col_V_reg_538 <= ap_sig_allocacmp_col_V;
                icmp_ln1027_reg_544 <= icmp_ln1027_fu_336_p2;
                icmp_ln1027_reg_544_pp0_iter1_reg <= icmp_ln1027_reg_544;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1027_reg_544 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                buf_V_1_addr_reg_553 <= zext_ln541_fu_353_p1(12 - 1 downto 0);
                buf_V_2_addr_reg_558 <= zext_ln541_fu_353_p1(12 - 1 downto 0);
                buf_V_addr_reg_548 <= zext_ln541_fu_353_p1(12 - 1 downto 0);
                icmp_ln1019_reg_563 <= icmp_ln1019_fu_359_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1027_reg_544_pp0_iter2_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                p_Val2_1_reg_588 <= p_Val2_1_fu_373_p5;
                p_Val2_3_reg_593 <= p_Val2_3_fu_384_p5;
                p_Val2_5_reg_598 <= p_Val2_5_fu_395_p5;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                p_Val2_2_reg_574 <= ret_4_fu_116;
                p_Val2_4_reg_581 <= ret_5_fu_120;
                p_Val2_s_reg_567 <= ret_3_fu_112;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter12, in_mat_data1_empty_n, ap_predicate_op66_read_state2, out_mat_data2_full_n, icmp_ln1019_reg_563_pp0_iter11_reg)
    begin
                ap_block_pp0_stage0_01001 <= (((out_mat_data2_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (icmp_ln1019_reg_563_pp0_iter11_reg = ap_const_lv1_0)) or ((ap_predicate_op66_read_state2 = ap_const_boolean_1) and (in_mat_data1_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter12, in_mat_data1_empty_n, ap_predicate_op66_read_state2, out_mat_data2_full_n, icmp_ln1019_reg_563_pp0_iter11_reg)
    begin
                ap_block_pp0_stage0_11001 <= (((out_mat_data2_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (icmp_ln1019_reg_563_pp0_iter11_reg = ap_const_lv1_0)) or ((ap_predicate_op66_read_state2 = ap_const_boolean_1) and (in_mat_data1_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_11001_ignoreCallOp94_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter12, in_mat_data1_empty_n, ap_predicate_op66_read_state2, out_mat_data2_full_n, icmp_ln1019_reg_563_pp0_iter11_reg)
    begin
                ap_block_pp0_stage0_11001_ignoreCallOp94 <= (((out_mat_data2_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (icmp_ln1019_reg_563_pp0_iter11_reg = ap_const_lv1_0)) or ((ap_predicate_op66_read_state2 = ap_const_boolean_1) and (in_mat_data1_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter12, in_mat_data1_empty_n, ap_predicate_op66_read_state2, out_mat_data2_full_n, icmp_ln1019_reg_563_pp0_iter11_reg)
    begin
                ap_block_pp0_stage0_subdone <= (((out_mat_data2_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (icmp_ln1019_reg_563_pp0_iter11_reg = ap_const_lv1_0)) or ((ap_predicate_op66_read_state2 = ap_const_boolean_1) and (in_mat_data1_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;

        ap_block_state10_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage0_iter9_ignore_call9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter10_ignore_call9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter11_ignore_call9 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state13_pp0_stage0_iter12_assign_proc : process(out_mat_data2_full_n, icmp_ln1019_reg_563_pp0_iter11_reg)
    begin
                ap_block_state13_pp0_stage0_iter12 <= ((out_mat_data2_full_n = ap_const_logic_0) and (icmp_ln1019_reg_563_pp0_iter11_reg = ap_const_lv1_0));
    end process;


    ap_block_state13_pp0_stage0_iter12_ignore_call9_assign_proc : process(out_mat_data2_full_n, icmp_ln1019_reg_563_pp0_iter11_reg)
    begin
                ap_block_state13_pp0_stage0_iter12_ignore_call9 <= ((out_mat_data2_full_n = ap_const_logic_0) and (icmp_ln1019_reg_563_pp0_iter11_reg = ap_const_lv1_0));
    end process;

        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0_ignore_call9 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state2_pp0_stage0_iter1_assign_proc : process(in_mat_data1_empty_n, ap_predicate_op66_read_state2)
    begin
                ap_block_state2_pp0_stage0_iter1 <= ((ap_predicate_op66_read_state2 = ap_const_boolean_1) and (in_mat_data1_empty_n = ap_const_logic_0));
    end process;


    ap_block_state2_pp0_stage0_iter1_ignore_call9_assign_proc : process(in_mat_data1_empty_n, ap_predicate_op66_read_state2)
    begin
                ap_block_state2_pp0_stage0_iter1_ignore_call9 <= ((ap_predicate_op66_read_state2 = ap_const_boolean_1) and (in_mat_data1_empty_n = ap_const_logic_0));
    end process;

        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2_ignore_call9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3_ignore_call9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4_ignore_call9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5_ignore_call9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6_ignore_call9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7_ignore_call9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter8_ignore_call9 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_678_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln1027_reg_544, ap_block_pp0_stage0, bottom_V_read_reg_523)
    begin
                ap_condition_678 <= ((icmp_ln1027_reg_544 = ap_const_lv1_1) and (bottom_V_read_reg_523 = ap_const_lv2_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0));
    end process;


    ap_condition_682_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln1027_reg_544, ap_block_pp0_stage0, bottom_V_read_reg_523)
    begin
                ap_condition_682 <= (not((bottom_V_read_reg_523 = ap_const_lv2_0)) and not((bottom_V_read_reg_523 = ap_const_lv2_1)) and (icmp_ln1027_reg_544 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0));
    end process;


    ap_condition_685_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln1027_reg_544, ap_block_pp0_stage0, bottom_V_read_reg_523)
    begin
                ap_condition_685 <= ((icmp_ln1027_reg_544 = ap_const_lv1_1) and (bottom_V_read_reg_523 = ap_const_lv2_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0));
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln1027_fu_336_p2)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln1027_fu_336_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_exit_pp0_iter3_stage0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_subdone, icmp_ln1027_reg_544_pp0_iter2_reg)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (icmp_ln1027_reg_544_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_condition_exit_pp0_iter3_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter3_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter11_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter11_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;
    ap_ext_blocking_n <= (ap_ext_blocking_sub_n and ap_const_logic_1);

    ap_ext_blocking_sub_n_assign_proc : process(ap_wait_0, ap_sub_ext_blocking_0)
    begin
        if (((ap_wait_0 and ap_sub_ext_blocking_0) = ap_const_logic_1)) then 
            ap_ext_blocking_sub_n <= ap_const_logic_0;
        else 
            ap_ext_blocking_sub_n <= ap_const_logic_1;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12)
    begin
        if (((ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_int_blocking_cur_n <= (out_mat_data2_blk_n and in_mat_data1_blk_n);
    ap_int_blocking_n <= (ap_int_blocking_sub_n and ap_int_blocking_cur_n);

    ap_int_blocking_sub_n_assign_proc : process(ap_wait_0, ap_sub_int_blocking_0)
    begin
        if (((ap_wait_0 and ap_sub_int_blocking_0) = ap_const_logic_1)) then 
            ap_int_blocking_sub_n <= ap_const_logic_0;
        else 
            ap_int_blocking_sub_n <= ap_const_logic_1;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_predicate_op66_read_state2_assign_proc : process(icmp_ln1027_reg_544, cmp_i_i201_i)
    begin
                ap_predicate_op66_read_state2 <= ((cmp_i_i201_i = ap_const_lv1_1) and (icmp_ln1027_reg_544 = ap_const_lv1_1));
    end process;


    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_col_V_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, col_V_2_fu_96, ap_loop_init)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_sig_allocacmp_col_V <= ap_const_lv13_0;
        else 
            ap_sig_allocacmp_col_V <= col_V_2_fu_96;
        end if; 
    end process;

    ap_str_blocking_n <= (ap_str_blocking_sub_n and ap_const_logic_1);

    ap_str_blocking_sub_n_assign_proc : process(ap_wait_0, ap_sub_str_blocking_0)
    begin
        if (((ap_wait_0 and ap_sub_str_blocking_0) = ap_const_logic_1)) then 
            ap_str_blocking_sub_n <= ap_const_logic_0;
        else 
            ap_str_blocking_sub_n <= ap_const_logic_1;
        end if; 
    end process;


    ap_sub_ext_blocking_0_assign_proc : process(grp_xFapplygaussian3x3_0_s_fu_278_ap_ext_blocking_n)
    begin
        if ((grp_xFapplygaussian3x3_0_s_fu_278_ap_ext_blocking_n = ap_const_logic_0)) then 
            ap_sub_ext_blocking_0 <= ap_const_logic_1;
        else 
            ap_sub_ext_blocking_0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sub_int_blocking_0_assign_proc : process(grp_xFapplygaussian3x3_0_s_fu_278_ap_int_blocking_n)
    begin
        if ((grp_xFapplygaussian3x3_0_s_fu_278_ap_int_blocking_n = ap_const_logic_0)) then 
            ap_sub_int_blocking_0 <= ap_const_logic_1;
        else 
            ap_sub_int_blocking_0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sub_str_blocking_0_assign_proc : process(grp_xFapplygaussian3x3_0_s_fu_278_ap_str_blocking_n)
    begin
        if ((grp_xFapplygaussian3x3_0_s_fu_278_ap_str_blocking_n = ap_const_logic_0)) then 
            ap_sub_str_blocking_0 <= ap_const_logic_1;
        else 
            ap_sub_str_blocking_0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_wait_0_assign_proc : process(ap_CS_fsm)
    begin
        if ((ap_ST_fsm_pp0_stage0 = ap_CS_fsm)) then 
            ap_wait_0 <= ap_const_logic_1;
        else 
            ap_wait_0 <= ap_const_logic_0;
        end if; 
    end process;

    bottom_V_read_reg_523 <= bottom_V;
    buf_V_1_address0 <= buf_V_1_addr_reg_553;
    buf_V_1_address1 <= zext_ln541_fu_353_p1(12 - 1 downto 0);

    buf_V_1_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            buf_V_1_ce0 <= ap_const_logic_1;
        else 
            buf_V_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buf_V_1_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln1027_reg_544, cmp_i_i201_i_read_reg_509, cmp_i_i201_i, ap_block_pp0_stage0_11001, bottom_V_read_reg_523)
    begin
        if ((((cmp_i_i201_i = ap_const_lv1_1) and (icmp_ln1027_reg_544 = ap_const_lv1_1) and (bottom_V_read_reg_523 = ap_const_lv2_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((cmp_i_i201_i_read_reg_509 = ap_const_lv1_0) and (icmp_ln1027_reg_544 = ap_const_lv1_1) and (bottom_V_read_reg_523 = ap_const_lv2_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            buf_V_1_ce1 <= ap_const_logic_1;
        else 
            buf_V_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    buf_V_1_d1_assign_proc : process(in_mat_data1_dout, cmp_i_i201_i_read_reg_509, cmp_i_i201_i, ap_condition_678)
    begin
        if ((ap_const_boolean_1 = ap_condition_678)) then
            if ((cmp_i_i201_i = ap_const_lv1_1)) then 
                buf_V_1_d1 <= in_mat_data1_dout;
            elsif ((cmp_i_i201_i_read_reg_509 = ap_const_lv1_0)) then 
                buf_V_1_d1 <= ap_const_lv8_0;
            else 
                buf_V_1_d1 <= "XXXXXXXX";
            end if;
        else 
            buf_V_1_d1 <= "XXXXXXXX";
        end if; 
    end process;


    buf_V_1_we1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln1027_reg_544, cmp_i_i201_i_read_reg_509, cmp_i_i201_i, ap_block_pp0_stage0_11001, bottom_V_read_reg_523)
    begin
        if ((((cmp_i_i201_i = ap_const_lv1_1) and (icmp_ln1027_reg_544 = ap_const_lv1_1) and (bottom_V_read_reg_523 = ap_const_lv2_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((cmp_i_i201_i_read_reg_509 = ap_const_lv1_0) and (icmp_ln1027_reg_544 = ap_const_lv1_1) and (bottom_V_read_reg_523 = ap_const_lv2_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            buf_V_1_we1 <= ap_const_logic_1;
        else 
            buf_V_1_we1 <= ap_const_logic_0;
        end if; 
    end process;

    buf_V_2_address0 <= buf_V_2_addr_reg_558;
    buf_V_2_address1 <= zext_ln541_fu_353_p1(12 - 1 downto 0);

    buf_V_2_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            buf_V_2_ce0 <= ap_const_logic_1;
        else 
            buf_V_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buf_V_2_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln1027_reg_544, cmp_i_i201_i_read_reg_509, cmp_i_i201_i, ap_block_pp0_stage0_11001, bottom_V_read_reg_523)
    begin
        if (((not((bottom_V_read_reg_523 = ap_const_lv2_0)) and not((bottom_V_read_reg_523 = ap_const_lv2_1)) and (cmp_i_i201_i = ap_const_lv1_1) and (icmp_ln1027_reg_544 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or (not((bottom_V_read_reg_523 = ap_const_lv2_0)) and not((bottom_V_read_reg_523 = ap_const_lv2_1)) and (cmp_i_i201_i_read_reg_509 = ap_const_lv1_0) and (icmp_ln1027_reg_544 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            buf_V_2_ce1 <= ap_const_logic_1;
        else 
            buf_V_2_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    buf_V_2_d1_assign_proc : process(in_mat_data1_dout, cmp_i_i201_i_read_reg_509, cmp_i_i201_i, ap_condition_682)
    begin
        if ((ap_const_boolean_1 = ap_condition_682)) then
            if ((cmp_i_i201_i = ap_const_lv1_1)) then 
                buf_V_2_d1 <= in_mat_data1_dout;
            elsif ((cmp_i_i201_i_read_reg_509 = ap_const_lv1_0)) then 
                buf_V_2_d1 <= ap_const_lv8_0;
            else 
                buf_V_2_d1 <= "XXXXXXXX";
            end if;
        else 
            buf_V_2_d1 <= "XXXXXXXX";
        end if; 
    end process;


    buf_V_2_we1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln1027_reg_544, cmp_i_i201_i_read_reg_509, cmp_i_i201_i, ap_block_pp0_stage0_11001, bottom_V_read_reg_523)
    begin
        if (((not((bottom_V_read_reg_523 = ap_const_lv2_0)) and not((bottom_V_read_reg_523 = ap_const_lv2_1)) and (cmp_i_i201_i = ap_const_lv1_1) and (icmp_ln1027_reg_544 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or (not((bottom_V_read_reg_523 = ap_const_lv2_0)) and not((bottom_V_read_reg_523 = ap_const_lv2_1)) and (cmp_i_i201_i_read_reg_509 = ap_const_lv1_0) and (icmp_ln1027_reg_544 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            buf_V_2_we1 <= ap_const_logic_1;
        else 
            buf_V_2_we1 <= ap_const_logic_0;
        end if; 
    end process;

    buf_V_address0 <= buf_V_addr_reg_548;
    buf_V_address1 <= zext_ln541_fu_353_p1(12 - 1 downto 0);

    buf_V_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            buf_V_ce0 <= ap_const_logic_1;
        else 
            buf_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buf_V_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln1027_reg_544, cmp_i_i201_i_read_reg_509, cmp_i_i201_i, ap_block_pp0_stage0_11001, bottom_V_read_reg_523)
    begin
        if ((((cmp_i_i201_i = ap_const_lv1_1) and (icmp_ln1027_reg_544 = ap_const_lv1_1) and (bottom_V_read_reg_523 = ap_const_lv2_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((cmp_i_i201_i_read_reg_509 = ap_const_lv1_0) and (icmp_ln1027_reg_544 = ap_const_lv1_1) and (bottom_V_read_reg_523 = ap_const_lv2_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            buf_V_ce1 <= ap_const_logic_1;
        else 
            buf_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    buf_V_d1_assign_proc : process(in_mat_data1_dout, cmp_i_i201_i_read_reg_509, cmp_i_i201_i, ap_condition_685)
    begin
        if ((ap_const_boolean_1 = ap_condition_685)) then
            if ((cmp_i_i201_i = ap_const_lv1_1)) then 
                buf_V_d1 <= in_mat_data1_dout;
            elsif ((cmp_i_i201_i_read_reg_509 = ap_const_lv1_0)) then 
                buf_V_d1 <= ap_const_lv8_0;
            else 
                buf_V_d1 <= "XXXXXXXX";
            end if;
        else 
            buf_V_d1 <= "XXXXXXXX";
        end if; 
    end process;


    buf_V_we1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln1027_reg_544, cmp_i_i201_i_read_reg_509, cmp_i_i201_i, ap_block_pp0_stage0_11001, bottom_V_read_reg_523)
    begin
        if ((((cmp_i_i201_i = ap_const_lv1_1) and (icmp_ln1027_reg_544 = ap_const_lv1_1) and (bottom_V_read_reg_523 = ap_const_lv2_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((cmp_i_i201_i_read_reg_509 = ap_const_lv1_0) and (icmp_ln1027_reg_544 = ap_const_lv1_1) and (bottom_V_read_reg_523 = ap_const_lv2_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            buf_V_we1 <= ap_const_logic_1;
        else 
            buf_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    cmp_i_i201_i_read_reg_509 <= cmp_i_i201_i;
    col_V_3_fu_342_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_col_V) + unsigned(ap_const_lv13_1));
    grp_xFapplygaussian3x3_0_s_fu_192_p_ce <= grp_xFapplygaussian3x3_0_s_fu_278_ap_ce;
    grp_xFapplygaussian3x3_0_s_fu_192_p_din1 <= ret_fu_100;
    grp_xFapplygaussian3x3_0_s_fu_192_p_din10 <= p_read;
    grp_xFapplygaussian3x3_0_s_fu_192_p_din11 <= p_read1;
    grp_xFapplygaussian3x3_0_s_fu_192_p_din2 <= p_Val2_s_reg_567;
    grp_xFapplygaussian3x3_0_s_fu_192_p_din3 <= p_Val2_1_reg_588;
    grp_xFapplygaussian3x3_0_s_fu_192_p_din4 <= ret_1_fu_104;
    grp_xFapplygaussian3x3_0_s_fu_192_p_din5 <= p_Val2_2_reg_574;
    grp_xFapplygaussian3x3_0_s_fu_192_p_din6 <= p_Val2_3_reg_593;
    grp_xFapplygaussian3x3_0_s_fu_192_p_din7 <= ret_2_fu_108;
    grp_xFapplygaussian3x3_0_s_fu_192_p_din8 <= p_Val2_4_reg_581;
    grp_xFapplygaussian3x3_0_s_fu_192_p_din9 <= p_Val2_5_reg_598;

    grp_xFapplygaussian3x3_0_s_fu_278_ap_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001_ignoreCallOp94)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001_ignoreCallOp94))) then 
            grp_xFapplygaussian3x3_0_s_fu_278_ap_ce <= ap_const_logic_1;
        else 
            grp_xFapplygaussian3x3_0_s_fu_278_ap_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_xFapplygaussian3x3_0_s_fu_278_ap_ext_blocking_n <= ap_const_logic_0;
    grp_xFapplygaussian3x3_0_s_fu_278_ap_int_blocking_n <= ap_const_logic_0;
    grp_xFapplygaussian3x3_0_s_fu_278_ap_str_blocking_n <= ap_const_logic_0;
    icmp_ln1019_fu_359_p2 <= "1" when (col_V_reg_538 = ap_const_lv13_0) else "0";
    icmp_ln1027_fu_336_p2 <= "1" when (unsigned(zext_ln1027_fu_332_p1) < unsigned(img_width)) else "0";

    in_mat_data1_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, in_mat_data1_empty_n, ap_predicate_op66_read_state2, ap_block_pp0_stage0)
    begin
        if (((ap_predicate_op66_read_state2 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            in_mat_data1_blk_n <= in_mat_data1_empty_n;
        else 
            in_mat_data1_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    in_mat_data1_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_predicate_op66_read_state2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_predicate_op66_read_state2 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            in_mat_data1_read <= ap_const_logic_1;
        else 
            in_mat_data1_read <= ap_const_logic_0;
        end if; 
    end process;


    out_mat_data2_blk_n_assign_proc : process(ap_enable_reg_pp0_iter12, out_mat_data2_full_n, icmp_ln1019_reg_563_pp0_iter11_reg, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln1019_reg_563_pp0_iter11_reg = ap_const_lv1_0))) then 
            out_mat_data2_blk_n <= out_mat_data2_full_n;
        else 
            out_mat_data2_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    out_mat_data2_din <= grp_xFapplygaussian3x3_0_s_fu_192_p_dout0;

    out_mat_data2_write_assign_proc : process(ap_enable_reg_pp0_iter12, icmp_ln1019_reg_563_pp0_iter11_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln1019_reg_563_pp0_iter11_reg = ap_const_lv1_0))) then 
            out_mat_data2_write <= ap_const_logic_1;
        else 
            out_mat_data2_write <= ap_const_logic_0;
        end if; 
    end process;

    p_Val2_1_out <= p_Val2_s_reg_567_pp0_iter10_reg;

    p_Val2_1_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln1027_reg_544_pp0_iter10_reg)
    begin
        if (((icmp_ln1027_reg_544_pp0_iter10_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            p_Val2_1_out_ap_vld <= ap_const_logic_1;
        else 
            p_Val2_1_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    p_Val2_3_out <= ret_1_fu_104;

    p_Val2_3_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln1027_reg_544_pp0_iter10_reg)
    begin
        if (((icmp_ln1027_reg_544_pp0_iter10_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            p_Val2_3_out_ap_vld <= ap_const_logic_1;
        else 
            p_Val2_3_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    p_Val2_4_out <= p_Val2_2_reg_574_pp0_iter10_reg;

    p_Val2_4_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln1027_reg_544_pp0_iter10_reg)
    begin
        if (((icmp_ln1027_reg_544_pp0_iter10_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            p_Val2_4_out_ap_vld <= ap_const_logic_1;
        else 
            p_Val2_4_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    p_Val2_6_out <= ret_2_fu_108;

    p_Val2_6_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln1027_reg_544_pp0_iter10_reg)
    begin
        if (((icmp_ln1027_reg_544_pp0_iter10_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            p_Val2_6_out_ap_vld <= ap_const_logic_1;
        else 
            p_Val2_6_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    p_Val2_7_out <= p_Val2_4_reg_581_pp0_iter10_reg;

    p_Val2_7_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln1027_reg_544_pp0_iter10_reg)
    begin
        if (((icmp_ln1027_reg_544_pp0_iter10_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            p_Val2_7_out_ap_vld <= ap_const_logic_1;
        else 
            p_Val2_7_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    p_Val2_out <= ret_fu_100;

    p_Val2_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln1027_reg_544_pp0_iter10_reg)
    begin
        if (((icmp_ln1027_reg_544_pp0_iter10_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            p_Val2_out_ap_vld <= ap_const_logic_1;
        else 
            p_Val2_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln1027_fu_332_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_col_V),16));
    zext_ln541_fu_353_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(col_V_reg_538),64));
end behav;
