// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module canny_accel_xFAngleKernel_2_0_1080_1920_3_0_1_2_2_5_1_1920_5760_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        gradx2_mat_data4_dout,
        gradx2_mat_data4_num_data_valid,
        gradx2_mat_data4_fifo_cap,
        gradx2_mat_data4_empty_n,
        gradx2_mat_data4_read,
        grady2_mat_data7_dout,
        grady2_mat_data7_num_data_valid,
        grady2_mat_data7_fifo_cap,
        grady2_mat_data7_empty_n,
        grady2_mat_data7_read,
        phase_mat_data9_din,
        phase_mat_data9_num_data_valid,
        phase_mat_data9_fifo_cap,
        phase_mat_data9_full_n,
        phase_mat_data9_write,
        imgheight_dout,
        imgheight_num_data_valid,
        imgheight_fifo_cap,
        imgheight_empty_n,
        imgheight_read,
        imgwidth_dout,
        imgwidth_num_data_valid,
        imgwidth_fifo_cap,
        imgwidth_empty_n,
        imgwidth_read,
        img_height_c19_din,
        img_height_c19_num_data_valid,
        img_height_c19_fifo_cap,
        img_height_c19_full_n,
        img_height_c19_write,
        img_width_c23_din,
        img_width_c23_num_data_valid,
        img_width_c23_fifo_cap,
        img_width_c23_full_n,
        img_width_c23_write,
        ap_ext_blocking_n,
        ap_str_blocking_n,
        ap_int_blocking_n
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_state2 = 3'd2;
parameter    ap_ST_fsm_state3 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [15:0] gradx2_mat_data4_dout;
input  [1:0] gradx2_mat_data4_num_data_valid;
input  [1:0] gradx2_mat_data4_fifo_cap;
input   gradx2_mat_data4_empty_n;
output   gradx2_mat_data4_read;
input  [15:0] grady2_mat_data7_dout;
input  [1:0] grady2_mat_data7_num_data_valid;
input  [1:0] grady2_mat_data7_fifo_cap;
input   grady2_mat_data7_empty_n;
output   grady2_mat_data7_read;
output  [7:0] phase_mat_data9_din;
input  [13:0] phase_mat_data9_num_data_valid;
input  [13:0] phase_mat_data9_fifo_cap;
input   phase_mat_data9_full_n;
output   phase_mat_data9_write;
input  [15:0] imgheight_dout;
input  [1:0] imgheight_num_data_valid;
input  [1:0] imgheight_fifo_cap;
input   imgheight_empty_n;
output   imgheight_read;
input  [15:0] imgwidth_dout;
input  [1:0] imgwidth_num_data_valid;
input  [1:0] imgwidth_fifo_cap;
input   imgwidth_empty_n;
output   imgwidth_read;
output  [15:0] img_height_c19_din;
input  [1:0] img_height_c19_num_data_valid;
input  [1:0] img_height_c19_fifo_cap;
input   img_height_c19_full_n;
output   img_height_c19_write;
output  [15:0] img_width_c23_din;
input  [1:0] img_width_c23_num_data_valid;
input  [1:0] img_width_c23_fifo_cap;
input   img_width_c23_full_n;
output   img_width_c23_write;
output   ap_ext_blocking_n;
output   ap_str_blocking_n;
output   ap_int_blocking_n;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg gradx2_mat_data4_read;
reg grady2_mat_data7_read;
reg phase_mat_data9_write;
reg imgheight_read;
reg imgwidth_read;
reg img_height_c19_write;
reg img_width_c23_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    imgheight_blk_n;
reg    imgwidth_blk_n;
reg    img_height_c19_blk_n;
reg    img_width_c23_blk_n;
reg   [15:0] imgwidth_read_reg_134;
reg   [15:0] imgheight_read_reg_139;
wire    grp_xFAngleKernel_Pipeline_colLoop_fu_88_ap_start;
wire    grp_xFAngleKernel_Pipeline_colLoop_fu_88_ap_done;
wire    grp_xFAngleKernel_Pipeline_colLoop_fu_88_ap_idle;
wire    grp_xFAngleKernel_Pipeline_colLoop_fu_88_ap_ready;
wire    grp_xFAngleKernel_Pipeline_colLoop_fu_88_gradx2_mat_data4_read;
wire    grp_xFAngleKernel_Pipeline_colLoop_fu_88_grady2_mat_data7_read;
wire   [7:0] grp_xFAngleKernel_Pipeline_colLoop_fu_88_phase_mat_data9_din;
wire    grp_xFAngleKernel_Pipeline_colLoop_fu_88_phase_mat_data9_write;
wire    grp_xFAngleKernel_Pipeline_colLoop_fu_88_ap_ext_blocking_n;
wire    grp_xFAngleKernel_Pipeline_colLoop_fu_88_ap_str_blocking_n;
wire    grp_xFAngleKernel_Pipeline_colLoop_fu_88_ap_int_blocking_n;
reg    grp_xFAngleKernel_Pipeline_colLoop_fu_88_ap_start_reg;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln1027_fu_111_p2;
wire    ap_CS_fsm_state3;
reg   [12:0] i_V_fu_56;
wire   [12:0] i_V_2_fu_116_p2;
reg    ap_block_state1;
wire   [15:0] zext_ln1027_fu_107_p1;
reg   [2:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
reg    ap_ST_fsm_state3_blk;
wire    ap_int_blocking_cur_n;
reg    ap_ext_blocking_sub_n;
reg    ap_wait_0;
reg    ap_sub_ext_blocking_0;
reg    ap_str_blocking_sub_n;
reg    ap_sub_str_blocking_0;
reg    ap_int_blocking_sub_n;
reg    ap_sub_int_blocking_0;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 grp_xFAngleKernel_Pipeline_colLoop_fu_88_ap_start_reg = 1'b0;
end

canny_accel_xFAngleKernel_Pipeline_colLoop grp_xFAngleKernel_Pipeline_colLoop_fu_88(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_xFAngleKernel_Pipeline_colLoop_fu_88_ap_start),
    .ap_done(grp_xFAngleKernel_Pipeline_colLoop_fu_88_ap_done),
    .ap_idle(grp_xFAngleKernel_Pipeline_colLoop_fu_88_ap_idle),
    .ap_ready(grp_xFAngleKernel_Pipeline_colLoop_fu_88_ap_ready),
    .gradx2_mat_data4_dout(gradx2_mat_data4_dout),
    .gradx2_mat_data4_num_data_valid(2'd0),
    .gradx2_mat_data4_fifo_cap(2'd0),
    .gradx2_mat_data4_empty_n(gradx2_mat_data4_empty_n),
    .gradx2_mat_data4_read(grp_xFAngleKernel_Pipeline_colLoop_fu_88_gradx2_mat_data4_read),
    .grady2_mat_data7_dout(grady2_mat_data7_dout),
    .grady2_mat_data7_num_data_valid(2'd0),
    .grady2_mat_data7_fifo_cap(2'd0),
    .grady2_mat_data7_empty_n(grady2_mat_data7_empty_n),
    .grady2_mat_data7_read(grp_xFAngleKernel_Pipeline_colLoop_fu_88_grady2_mat_data7_read),
    .phase_mat_data9_din(grp_xFAngleKernel_Pipeline_colLoop_fu_88_phase_mat_data9_din),
    .phase_mat_data9_num_data_valid(14'd0),
    .phase_mat_data9_fifo_cap(14'd0),
    .phase_mat_data9_full_n(phase_mat_data9_full_n),
    .phase_mat_data9_write(grp_xFAngleKernel_Pipeline_colLoop_fu_88_phase_mat_data9_write),
    .imgwidth_load(imgwidth_read_reg_134),
    .ap_ext_blocking_n(grp_xFAngleKernel_Pipeline_colLoop_fu_88_ap_ext_blocking_n),
    .ap_str_blocking_n(grp_xFAngleKernel_Pipeline_colLoop_fu_88_ap_str_blocking_n),
    .ap_int_blocking_n(grp_xFAngleKernel_Pipeline_colLoop_fu_88_ap_int_blocking_n)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln1027_fu_111_p2 == 1'd0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_xFAngleKernel_Pipeline_colLoop_fu_88_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln1027_fu_111_p2 == 1'd1))) begin
            grp_xFAngleKernel_Pipeline_colLoop_fu_88_ap_start_reg <= 1'b1;
        end else if ((grp_xFAngleKernel_Pipeline_colLoop_fu_88_ap_ready == 1'b1)) begin
            grp_xFAngleKernel_Pipeline_colLoop_fu_88_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) | (img_width_c23_full_n == 1'b0) | (img_height_c19_full_n == 1'b0) | (imgwidth_empty_n == 1'b0) | (imgheight_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_V_fu_56 <= 13'd0;
    end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln1027_fu_111_p2 == 1'd1))) begin
        i_V_fu_56 <= i_V_2_fu_116_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        imgheight_read_reg_139 <= imgheight_dout;
        imgwidth_read_reg_134 <= imgwidth_dout;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) | (img_width_c23_full_n == 1'b0) | (img_height_c19_full_n == 1'b0) | (imgwidth_empty_n == 1'b0) | (imgheight_empty_n == 1'b0) | (ap_done_reg == 1'b1))) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

always @ (*) begin
    if ((grp_xFAngleKernel_Pipeline_colLoop_fu_88_ap_done == 1'b0)) begin
        ap_ST_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_fsm_state3_blk = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln1027_fu_111_p2 == 1'd0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_wait_0 & ap_sub_ext_blocking_0) == 1'b1)) begin
        ap_ext_blocking_sub_n = 1'b0;
    end else begin
        ap_ext_blocking_sub_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_wait_0 & ap_sub_int_blocking_0) == 1'b1)) begin
        ap_int_blocking_sub_n = 1'b0;
    end else begin
        ap_int_blocking_sub_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln1027_fu_111_p2 == 1'd0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_wait_0 & ap_sub_str_blocking_0) == 1'b1)) begin
        ap_str_blocking_sub_n = 1'b0;
    end else begin
        ap_str_blocking_sub_n = 1'b1;
    end
end

always @ (*) begin
    if ((grp_xFAngleKernel_Pipeline_colLoop_fu_88_ap_ext_blocking_n == 1'b0)) begin
        ap_sub_ext_blocking_0 = 1'b1;
    end else begin
        ap_sub_ext_blocking_0 = 1'b0;
    end
end

always @ (*) begin
    if ((grp_xFAngleKernel_Pipeline_colLoop_fu_88_ap_int_blocking_n == 1'b0)) begin
        ap_sub_int_blocking_0 = 1'b1;
    end else begin
        ap_sub_int_blocking_0 = 1'b0;
    end
end

always @ (*) begin
    if ((grp_xFAngleKernel_Pipeline_colLoop_fu_88_ap_str_blocking_n == 1'b0)) begin
        ap_sub_str_blocking_0 = 1'b1;
    end else begin
        ap_sub_str_blocking_0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_ST_fsm_state3 == ap_CS_fsm)) begin
        ap_wait_0 = 1'b1;
    end else begin
        ap_wait_0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        gradx2_mat_data4_read = grp_xFAngleKernel_Pipeline_colLoop_fu_88_gradx2_mat_data4_read;
    end else begin
        gradx2_mat_data4_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        grady2_mat_data7_read = grp_xFAngleKernel_Pipeline_colLoop_fu_88_grady2_mat_data7_read;
    end else begin
        grady2_mat_data7_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        img_height_c19_blk_n = img_height_c19_full_n;
    end else begin
        img_height_c19_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (img_width_c23_full_n == 1'b0) | (img_height_c19_full_n == 1'b0) | (imgwidth_empty_n == 1'b0) | (imgheight_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        img_height_c19_write = 1'b1;
    end else begin
        img_height_c19_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        img_width_c23_blk_n = img_width_c23_full_n;
    end else begin
        img_width_c23_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (img_width_c23_full_n == 1'b0) | (img_height_c19_full_n == 1'b0) | (imgwidth_empty_n == 1'b0) | (imgheight_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        img_width_c23_write = 1'b1;
    end else begin
        img_width_c23_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        imgheight_blk_n = imgheight_empty_n;
    end else begin
        imgheight_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (img_width_c23_full_n == 1'b0) | (img_height_c19_full_n == 1'b0) | (imgwidth_empty_n == 1'b0) | (imgheight_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        imgheight_read = 1'b1;
    end else begin
        imgheight_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        imgwidth_blk_n = imgwidth_empty_n;
    end else begin
        imgwidth_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (img_width_c23_full_n == 1'b0) | (img_height_c19_full_n == 1'b0) | (imgwidth_empty_n == 1'b0) | (imgheight_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        imgwidth_read = 1'b1;
    end else begin
        imgwidth_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        phase_mat_data9_write = grp_xFAngleKernel_Pipeline_colLoop_fu_88_phase_mat_data9_write;
    end else begin
        phase_mat_data9_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (img_width_c23_full_n == 1'b0) | (img_height_c19_full_n == 1'b0) | (imgwidth_empty_n == 1'b0) | (imgheight_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln1027_fu_111_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((grp_xFAngleKernel_Pipeline_colLoop_fu_88_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (img_width_c23_full_n == 1'b0) | (img_height_c19_full_n == 1'b0) | (imgwidth_empty_n == 1'b0) | (imgheight_empty_n == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_ext_blocking_n = (ap_ext_blocking_sub_n & 1'b1);

assign ap_int_blocking_cur_n = (imgwidth_blk_n & imgheight_blk_n & img_width_c23_blk_n & img_height_c19_blk_n);

assign ap_int_blocking_n = (ap_int_blocking_sub_n & ap_int_blocking_cur_n);

assign ap_str_blocking_n = (ap_str_blocking_sub_n & 1'b1);

assign grp_xFAngleKernel_Pipeline_colLoop_fu_88_ap_start = grp_xFAngleKernel_Pipeline_colLoop_fu_88_ap_start_reg;

assign i_V_2_fu_116_p2 = (i_V_fu_56 + 13'd1);

assign icmp_ln1027_fu_111_p2 = ((zext_ln1027_fu_107_p1 < imgheight_read_reg_139) ? 1'b1 : 1'b0);

assign img_height_c19_din = imgheight_dout;

assign img_width_c23_din = imgwidth_dout;

assign phase_mat_data9_din = grp_xFAngleKernel_Pipeline_colLoop_fu_88_phase_mat_data9_din;

assign zext_ln1027_fu_107_p1 = i_V_fu_56;

endmodule //canny_accel_xFAngleKernel_2_0_1080_1920_3_0_1_2_2_5_1_1920_5760_s
