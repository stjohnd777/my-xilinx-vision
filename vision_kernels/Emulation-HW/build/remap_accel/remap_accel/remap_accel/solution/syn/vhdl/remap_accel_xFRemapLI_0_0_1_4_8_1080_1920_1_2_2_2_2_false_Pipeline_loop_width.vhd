-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity remap_accel_xFRemapLI_0_0_1_4_8_1080_1920_1_2_2_2_2_false_Pipeline_loop_width is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    imgInput_data1_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    imgInput_data1_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    imgInput_data1_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    imgInput_data1_empty_n : IN STD_LOGIC;
    imgInput_data1_read : OUT STD_LOGIC;
    mapX_data2_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    mapX_data2_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    mapX_data2_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    mapX_data2_empty_n : IN STD_LOGIC;
    mapX_data2_read : OUT STD_LOGIC;
    mapY_data3_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    mapY_data3_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    mapY_data3_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    mapY_data3_empty_n : IN STD_LOGIC;
    mapY_data3_read : OUT STD_LOGIC;
    imgOutput_data4_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    imgOutput_data4_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    imgOutput_data4_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    imgOutput_data4_full_n : IN STD_LOGIC;
    imgOutput_data4_write : OUT STD_LOGIC;
    r2_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    r2_ce0 : OUT STD_LOGIC;
    r2_we0 : OUT STD_LOGIC;
    r2_d0 : OUT STD_LOGIC_VECTOR (16 downto 0);
    r2_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    r2_ce1 : OUT STD_LOGIC;
    r2_q1 : IN STD_LOGIC_VECTOR (16 downto 0);
    idxprom2582_i : IN STD_LOGIC_VECTOR (2 downto 0);
    r1_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    r1_ce0 : OUT STD_LOGIC;
    r1_we0 : OUT STD_LOGIC;
    r1_d0 : OUT STD_LOGIC_VECTOR (16 downto 0);
    r1_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    r1_ce1 : OUT STD_LOGIC;
    r1_q1 : IN STD_LOGIC_VECTOR (16 downto 0);
    add106_i : IN STD_LOGIC_VECTOR (16 downto 0);
    i : IN STD_LOGIC_VECTOR (16 downto 0);
    cmp263_i : IN STD_LOGIC_VECTOR (0 downto 0);
    mul_ln315 : IN STD_LOGIC_VECTOR (11 downto 0);
    i_cast9_i : IN STD_LOGIC_VECTOR (0 downto 0);
    cols_cast_i : IN STD_LOGIC_VECTOR (15 downto 0);
    cmp111_i : IN STD_LOGIC_VECTOR (0 downto 0);
    bitcast_ln348 : IN STD_LOGIC_VECTOR (30 downto 0);
    icmp_ln348_6 : IN STD_LOGIC_VECTOR (0 downto 0);
    conv1_i : IN STD_LOGIC_VECTOR (31 downto 0);
    bitcast_ln349 : IN STD_LOGIC_VECTOR (30 downto 0);
    icmp_ln349_4 : IN STD_LOGIC_VECTOR (0 downto 0);
    conv2_i : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_ext_blocking_n : OUT STD_LOGIC;
    ap_str_blocking_n : OUT STD_LOGIC;
    ap_int_blocking_n : OUT STD_LOGIC );
end;


architecture behav of remap_accel_xFRemapLI_0_0_1_4_8_1080_1920_1_2_2_2_2_false_Pipeline_loop_width is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv17_0 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_42000000 : STD_LOGIC_VECTOR (31 downto 0) := "01000010000000000000000000000000";
    constant ap_const_lv17_1 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv9_181 : STD_LOGIC_VECTOR (8 downto 0) := "110000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv28_0 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000000000";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv13_3C1 : STD_LOGIC_VECTOR (12 downto 0) := "0001111000001";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv28_1 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000000001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv5_5 : STD_LOGIC_VECTOR (4 downto 0) := "00101";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal icmp_ln258_reg_1728 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln269_reg_1732 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_predicate_op75_read_state2 : BOOLEAN;
    signal and_ln324_reg_1745 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter12 : BOOLEAN;
    signal and_ln324_reg_1745_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state14_pp0_stage0_iter13 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln258_fu_531_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal imgInput_data1_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal mapX_data2_blk_n : STD_LOGIC;
    signal mapY_data3_blk_n : STD_LOGIC;
    signal imgOutput_data4_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal and_ln269_fu_549_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln315_fu_565_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln315_reg_1736 : STD_LOGIC_VECTOR (12 downto 0);
    signal trunc_ln315_fu_571_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln315_reg_1741 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln324_fu_575_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln324_reg_1745_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln324_reg_1745_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln324_reg_1745_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln324_reg_1745_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln324_reg_1745_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln324_reg_1745_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln324_reg_1745_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln324_reg_1745_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln324_reg_1745_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln324_reg_1745_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln324_reg_1745_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln348_4_fu_591_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln348_4_reg_1749 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln348_4_reg_1749_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln348_4_reg_1749_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln348_4_reg_1749_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln348_4_reg_1749_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln348_4_reg_1749_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln348_4_reg_1749_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln348_4_reg_1749_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln348_4_reg_1749_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln348_4_reg_1749_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln348_4_reg_1749_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln348_4_reg_1749_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln348_4_reg_1749_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln349_2_fu_607_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln349_2_reg_1754 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln349_2_reg_1754_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal x_fl_fu_625_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_fl_reg_1759 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_fl_fu_630_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_fl_reg_1765 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln348_fu_649_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln348_reg_1771 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln348_reg_1771_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln348_reg_1771_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln348_reg_1771_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln348_reg_1771_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln348_reg_1771_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln348_reg_1771_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln348_reg_1771_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln348_reg_1771_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln348_reg_1771_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln348_reg_1771_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln348_reg_1771_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln348_3_fu_655_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln348_3_reg_1776 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln348_3_reg_1776_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln348_3_reg_1776_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln348_3_reg_1776_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln348_3_reg_1776_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln348_3_reg_1776_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln348_3_reg_1776_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln348_3_reg_1776_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln348_3_reg_1776_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln348_3_reg_1776_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln348_3_reg_1776_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln348_3_reg_1776_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln349_fu_675_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln349_reg_1781 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln349_1_fu_681_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln349_1_reg_1786 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_501_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_reg_1791 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_reg_1791_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_reg_1791_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_reg_1791_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_reg_1791_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_reg_1791_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_reg_1791_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_reg_1791_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_reg_1791_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_reg_1791_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_reg_1791_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln349_1_fu_701_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln349_1_reg_1796 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln349_1_reg_1796_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln349_1_reg_1796_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln349_1_reg_1796_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln349_1_reg_1796_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln349_1_reg_1796_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln349_1_reg_1796_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln349_1_reg_1796_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln349_1_reg_1796_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln349_1_reg_1796_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln349_1_reg_1796_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_491_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal dc_reg_1801 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_496_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal dc_1_reg_1806 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_s_reg_1811 : STD_LOGIC_VECTOR (0 downto 0);
    signal val_4_fu_824_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal val_4_reg_1816 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_V_fu_963_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_V_reg_1822 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_V_reg_1822_pp0_iter7_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal result_V_reg_1822_pp0_iter8_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal result_V_reg_1822_pp0_iter9_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal result_V_reg_1822_pp0_iter10_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal result_V_reg_1822_pp0_iter11_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal result_V_reg_1822_pp0_iter12_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal y_reg_1827 : STD_LOGIC_VECTOR (26 downto 0);
    signal y_reg_1827_pp0_iter7_reg : STD_LOGIC_VECTOR (26 downto 0);
    signal y_reg_1827_pp0_iter8_reg : STD_LOGIC_VECTOR (26 downto 0);
    signal y_reg_1827_pp0_iter9_reg : STD_LOGIC_VECTOR (26 downto 0);
    signal y_reg_1827_pp0_iter10_reg : STD_LOGIC_VECTOR (26 downto 0);
    signal y_reg_1827_pp0_iter11_reg : STD_LOGIC_VECTOR (26 downto 0);
    signal y_reg_1827_pp0_iter12_reg : STD_LOGIC_VECTOR (26 downto 0);
    signal tmp_18_reg_1833 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln336_1_reg_1838 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln336_1_reg_1838_pp0_iter7_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln336_1_reg_1838_pp0_iter8_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln336_1_reg_1838_pp0_iter9_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln336_1_reg_1838_pp0_iter10_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln336_1_reg_1838_pp0_iter11_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal loc_1_fu_999_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal loc_1_reg_1844 : STD_LOGIC_VECTOR (4 downto 0);
    signal loc_1_reg_1844_pp0_iter7_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal loc_1_reg_1844_pp0_iter8_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal loc_1_reg_1844_pp0_iter9_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_22_reg_1851 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln371_1_reg_1857 : STD_LOGIC_VECTOR (25 downto 0);
    signal result_V_5_fu_1026_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_V_5_reg_1862 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_V_5_reg_1862_pp0_iter8_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal result_V_5_reg_1862_pp0_iter9_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal result_V_5_reg_1862_pp0_iter10_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal result_V_5_reg_1862_pp0_iter11_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal result_V_5_reg_1862_pp0_iter12_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_17_reg_1867 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln336_fu_1040_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal sext_ln336_reg_1872 : STD_LOGIC_VECTOR (27 downto 0);
    signal sext_ln336_reg_1872_pp0_iter8_reg : STD_LOGIC_VECTOR (27 downto 0);
    signal sext_ln336_reg_1872_pp0_iter9_reg : STD_LOGIC_VECTOR (27 downto 0);
    signal sext_ln336_reg_1872_pp0_iter10_reg : STD_LOGIC_VECTOR (27 downto 0);
    signal sext_ln336_reg_1872_pp0_iter11_reg : STD_LOGIC_VECTOR (27 downto 0);
    signal sext_ln336_reg_1872_pp0_iter12_reg : STD_LOGIC_VECTOR (27 downto 0);
    signal loc_fu_1043_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal loc_reg_1877 : STD_LOGIC_VECTOR (4 downto 0);
    signal loc_reg_1877_pp0_iter8_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal loc_reg_1877_pp0_iter9_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_21_fu_1057_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_21_reg_1884 : STD_LOGIC_VECTOR (0 downto 0);
    signal xa1_fu_1097_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal xa1_reg_1889 : STD_LOGIC_VECTOR (12 downto 0);
    signal ya0_fu_1239_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal ya0_reg_1896 : STD_LOGIC_VECTOR (3 downto 0);
    signal ya1_fu_1291_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal ya1_reg_1901 : STD_LOGIC_VECTOR (3 downto 0);
    signal tobool437_i_fu_1299_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tobool437_i_reg_1906 : STD_LOGIC_VECTOR (0 downto 0);
    signal tobool437_i_reg_1906_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tobool428_i_fu_1394_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tobool428_i_reg_1933 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_i_i682_i_fu_1406_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal sub_i_i682_i_reg_1940 : STD_LOGIC_VECTOR (5 downto 0);
    signal k01_V_fu_1422_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal k01_V_reg_1945 : STD_LOGIC_VECTOR (10 downto 0);
    signal buf_V_3_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_8_reg_1960 : STD_LOGIC_VECTOR (7 downto 0);
    signal d00_V_4_fu_1473_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal d00_V_4_reg_1965 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1666_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_1672_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal buf_V_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal buf_V_ce0 : STD_LOGIC;
    signal buf_V_we0 : STD_LOGIC;
    signal buf_V_address1 : STD_LOGIC_VECTOR (12 downto 0);
    signal buf_V_ce1 : STD_LOGIC;
    signal buf_V_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal buf_V_1_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal buf_V_1_ce0 : STD_LOGIC;
    signal buf_V_1_we0 : STD_LOGIC;
    signal buf_V_1_address1 : STD_LOGIC_VECTOR (12 downto 0);
    signal buf_V_1_ce1 : STD_LOGIC;
    signal buf_V_1_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal buf_V_2_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal buf_V_2_ce0 : STD_LOGIC;
    signal buf_V_2_we0 : STD_LOGIC;
    signal buf_V_2_address1 : STD_LOGIC_VECTOR (12 downto 0);
    signal buf_V_2_ce1 : STD_LOGIC;
    signal buf_V_2_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal buf_V_3_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal buf_V_3_ce0 : STD_LOGIC;
    signal buf_V_3_we0 : STD_LOGIC;
    signal buf_V_3_address1 : STD_LOGIC_VECTOR (12 downto 0);
    signal buf_V_3_ce1 : STD_LOGIC;
    signal ap_phi_mux_s_1_phi_fu_479_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_reg_pp0_iter1_s_1_reg_475 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_reg_pp0_iter0_s_1_reg_475 : STD_LOGIC_VECTOR (7 downto 0);
    signal idxprom2582_i_cast_fu_513_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln315_fu_618_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast5_fu_1349_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast6_fu_1359_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast7_fu_1379_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast8_fu_1389_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln348_fu_1536_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln348_1_fu_1540_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_fu_202 : STD_LOGIC_VECTOR (16 downto 0);
    signal j_2_fu_537_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_j_1 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal grp_fu_501_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_505_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal cols_cast_i_cast_fu_509_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal icmp_ln269_fu_543_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal mul_ln315_cast_fu_519_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal div235_udiv_i_fu_555_p4 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_4_fu_581_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_7_fu_597_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_3_fu_635_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln348_fu_645_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_6_fu_661_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln349_fu_671_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal or_ln349_fu_687_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln349_1_fu_691_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln349_fu_695_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_505_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal data_V_fu_707_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_1_fu_728_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal mantissa_fu_732_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal xs_exp_V_fu_718_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln346_fu_746_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln346_fu_750_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln1512_fu_764_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal isNeg_fu_756_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln1512_fu_770_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal ush_fu_774_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln1488_fu_782_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln15_fu_742_p1 : STD_LOGIC_VECTOR (78 downto 0);
    signal zext_ln1488_fu_786_p1 : STD_LOGIC_VECTOR (78 downto 0);
    signal r_V_fu_790_p2 : STD_LOGIC_VECTOR (78 downto 0);
    signal tmp_11_fu_802_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_1_fu_796_p2 : STD_LOGIC_VECTOR (78 downto 0);
    signal zext_ln818_fu_810_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_fu_814_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal data_V_1_fu_832_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_3_fu_853_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal mantissa_1_fu_857_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal xs_exp_V_1_fu_843_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln346_1_fu_871_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln346_1_fu_875_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln1512_1_fu_889_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal isNeg_1_fu_881_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln1512_1_fu_895_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal ush_1_fu_899_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln1488_1_fu_907_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln15_1_fu_867_p1 : STD_LOGIC_VECTOR (78 downto 0);
    signal zext_ln1488_1_fu_911_p1 : STD_LOGIC_VECTOR (78 downto 0);
    signal r_V_2_fu_915_p2 : STD_LOGIC_VECTOR (78 downto 0);
    signal tmp_16_fu_927_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_3_fu_921_p2 : STD_LOGIC_VECTOR (78 downto 0);
    signal zext_ln818_1_fu_935_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_939_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal val_5_fu_949_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_2_fu_835_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal result_V_3_fu_957_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_V_2_fu_1021_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln4_fu_1047_p4 : STD_LOGIC_VECTOR (13 downto 0);
    signal sub_ln369_fu_1065_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal trunc_ln369_2_fu_1071_p4 : STD_LOGIC_VECTOR (12 downto 0);
    signal sub_ln369_1_fu_1081_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal trunc_ln369_3_fu_1087_p4 : STD_LOGIC_VECTOR (12 downto 0);
    signal sub_ln371_fu_1105_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal lshr_ln371_1_fu_1111_p4 : STD_LOGIC_VECTOR (26 downto 0);
    signal zext_ln371_fu_1121_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal sext_ln371_fu_1131_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal sub_ln371_1_fu_1125_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal zext_ln371_1_fu_1134_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal select_ln371_fu_1138_p3 : STD_LOGIC_VECTOR (27 downto 0);
    signal p_and_f9_fu_1153_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln371_2_fu_1160_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal sub_ln371_2_fu_1164_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln371_1_fu_1170_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal sext_ln371_1_fu_1149_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal sext_ln371_2_fu_1181_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal add_ln371_fu_1185_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal trunc_ln371_3_fu_1191_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_and_f3_fu_1203_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal sub_ln371_3_fu_1215_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_and_t5_fu_1221_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln371_4_fu_1229_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_23_fu_1195_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln371_4_fu_1233_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln371_3_fu_1211_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln371_fu_1145_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_and_f_fu_1255_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal sub_ln372_fu_1267_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_and_t_fu_1273_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln372_1_fu_1281_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_24_fu_1247_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln372_1_fu_1285_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln372_fu_1263_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln371_2_fu_1177_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_and_t1_fu_1305_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal sub_ln369_2_fu_1312_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln369_1_fu_1318_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal sext_ln369_fu_1325_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal empty_fu_1337_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal empty_fu_1337_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal xa0_fu_1329_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal empty_54_fu_1343_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal empty_55_fu_1354_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal empty_56_fu_1367_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal empty_56_fu_1367_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal empty_57_fu_1373_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal empty_58_fu_1384_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal loc_1_cast_i_fu_1403_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal k01_V_fu_1422_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal k01_V_fu_1422_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal loc_cast_i_fu_1419_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal sub_i_i569_i_fu_1428_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal k10_V_fu_1438_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal k10_V_fu_1438_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal k10_V_fu_1438_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal d10_V_4_fu_1466_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal d00_V_fu_1452_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal d01_V_3_fu_1459_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal d01_V_fu_1480_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal d10_V_fu_1487_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_i_i_fu_1508_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_i_i_fu_1508_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_i_i_fu_1508_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln339_1_fu_1531_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_19_fu_1550_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln348_fu_1563_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln348_1_fu_1567_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln348_fu_1571_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal r1_load_cast_i_fu_1582_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal r2_load_cast_i_fu_1591_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal ynext_fu_1545_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal tmp_20_fu_1601_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln348_1_fu_1577_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln348_1_fu_1586_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln348_2_fu_1614_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln348_fu_1557_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln348_2_fu_1595_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln349_fu_1608_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln348_4_fu_1626_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln348_5_fu_1632_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln348_3_fu_1620_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_1688_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_1678_p4 : STD_LOGIC_VECTOR (17 downto 0);
    signal ret_V_fu_1643_p2 : STD_LOGIC_VECTOR (17 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of ret_V_fu_1643_p2 : signal is "no";
    signal in_range_fu_1637_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_1647_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1666_p0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_1666_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1672_p0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_1672_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1678_p0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_1678_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1688_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_1688_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_491_ce : STD_LOGIC;
    signal grp_fu_496_ce : STD_LOGIC;
    signal grp_fu_501_ce : STD_LOGIC;
    signal ap_block_pp0_stage0_00001 : BOOLEAN;
    signal grp_fu_505_ce : STD_LOGIC;
    signal grp_fu_1666_ce : STD_LOGIC;
    signal grp_fu_1672_ce : STD_LOGIC;
    signal grp_fu_1678_ce : STD_LOGIC;
    signal grp_fu_1688_ce : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter9_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter10_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter11_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter12_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_int_blocking_cur_n : STD_LOGIC;
    signal ap_block_pp0 : BOOLEAN;
    signal ap_enable_operation_65 : BOOLEAN;
    signal ap_enable_state1_pp0_iter0_stage0 : BOOLEAN;
    signal ap_enable_operation_285 : BOOLEAN;
    signal ap_enable_state13_pp0_iter12_stage0 : BOOLEAN;
    signal ap_enable_operation_302 : BOOLEAN;
    signal ap_enable_state14_pp0_iter13_stage0 : BOOLEAN;
    signal ap_enable_operation_66 : BOOLEAN;
    signal ap_enable_operation_288 : BOOLEAN;
    signal ap_enable_operation_305 : BOOLEAN;
    signal ap_predicate_op83_store_state2 : BOOLEAN;
    signal ap_enable_operation_83 : BOOLEAN;
    signal ap_enable_state2_pp0_iter1_stage0 : BOOLEAN;
    signal ap_enable_operation_235 : BOOLEAN;
    signal ap_enable_state9_pp0_iter8_stage0 : BOOLEAN;
    signal ap_enable_operation_251 : BOOLEAN;
    signal ap_enable_state10_pp0_iter9_stage0 : BOOLEAN;
    signal ap_predicate_op85_store_state2 : BOOLEAN;
    signal ap_enable_operation_85 : BOOLEAN;
    signal ap_enable_operation_236 : BOOLEAN;
    signal ap_enable_operation_252 : BOOLEAN;
    signal ap_predicate_op87_store_state2 : BOOLEAN;
    signal ap_enable_operation_87 : BOOLEAN;
    signal ap_enable_operation_237 : BOOLEAN;
    signal ap_enable_operation_253 : BOOLEAN;
    signal ap_predicate_op89_store_state2 : BOOLEAN;
    signal ap_enable_operation_89 : BOOLEAN;
    signal ap_enable_operation_238 : BOOLEAN;
    signal ap_enable_operation_254 : BOOLEAN;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal grp_fu_1666_p00 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_1666_p10 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_1672_p00 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_1672_p10 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_1678_p20 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_1688_p00 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_1688_p10 : STD_LOGIC_VECTOR (17 downto 0);
    signal k01_V_fu_1422_p00 : STD_LOGIC_VECTOR (10 downto 0);
    signal k01_V_fu_1422_p10 : STD_LOGIC_VECTOR (10 downto 0);
    signal k10_V_fu_1438_p00 : STD_LOGIC_VECTOR (10 downto 0);
    signal k10_V_fu_1438_p10 : STD_LOGIC_VECTOR (10 downto 0);
    signal mul_i_i_fu_1508_p00 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_i_i_fu_1508_p10 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_condition_561 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component remap_accel_fmul_32ns_32ns_32_4_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component remap_accel_fcmp_32ns_32ns_1_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component remap_accel_mul_4s_11ns_13_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (3 downto 0);
        din1 : IN STD_LOGIC_VECTOR (10 downto 0);
        dout : OUT STD_LOGIC_VECTOR (12 downto 0) );
    end component;


    component remap_accel_mul_6ns_5ns_11_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (5 downto 0);
        din1 : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (10 downto 0) );
    end component;


    component remap_accel_mul_5ns_5ns_10_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (4 downto 0);
        din1 : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (9 downto 0) );
    end component;


    component remap_accel_mul_mul_11ns_8ns_18_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (10 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;


    component remap_accel_ama_submuladd_11ns_11ns_8ns_18ns_18_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (10 downto 0);
        din1 : IN STD_LOGIC_VECTOR (10 downto 0);
        din2 : IN STD_LOGIC_VECTOR (7 downto 0);
        din3 : IN STD_LOGIC_VECTOR (17 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;


    component remap_accel_mac_muladd_10ns_8ns_18ns_18_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (9 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (17 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;


    component remap_accel_xFRemapLI_0_0_1_4_8_1080_1920_1_2_2_2_2_false_Pipeline_loop_width_buf_V_RAM_Abkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component remap_accel_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    buf_V_U : component remap_accel_xFRemapLI_0_0_1_4_8_1080_1920_1_2_2_2_2_false_Pipeline_loop_width_buf_V_RAM_Abkb
    generic map (
        DataWidth => 8,
        AddressRange => 4805,
        AddressWidth => 13)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => buf_V_address0,
        ce0 => buf_V_ce0,
        we0 => buf_V_we0,
        d0 => ap_phi_mux_s_1_phi_fu_479_p4,
        address1 => buf_V_address1,
        ce1 => buf_V_ce1,
        q1 => buf_V_q1);

    buf_V_1_U : component remap_accel_xFRemapLI_0_0_1_4_8_1080_1920_1_2_2_2_2_false_Pipeline_loop_width_buf_V_RAM_Abkb
    generic map (
        DataWidth => 8,
        AddressRange => 4805,
        AddressWidth => 13)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => buf_V_1_address0,
        ce0 => buf_V_1_ce0,
        we0 => buf_V_1_we0,
        d0 => ap_phi_mux_s_1_phi_fu_479_p4,
        address1 => buf_V_1_address1,
        ce1 => buf_V_1_ce1,
        q1 => buf_V_1_q1);

    buf_V_2_U : component remap_accel_xFRemapLI_0_0_1_4_8_1080_1920_1_2_2_2_2_false_Pipeline_loop_width_buf_V_RAM_Abkb
    generic map (
        DataWidth => 8,
        AddressRange => 4805,
        AddressWidth => 13)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => buf_V_2_address0,
        ce0 => buf_V_2_ce0,
        we0 => buf_V_2_we0,
        d0 => ap_phi_mux_s_1_phi_fu_479_p4,
        address1 => buf_V_2_address1,
        ce1 => buf_V_2_ce1,
        q1 => buf_V_2_q1);

    buf_V_3_U : component remap_accel_xFRemapLI_0_0_1_4_8_1080_1920_1_2_2_2_2_false_Pipeline_loop_width_buf_V_RAM_Abkb
    generic map (
        DataWidth => 8,
        AddressRange => 4805,
        AddressWidth => 13)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => buf_V_3_address0,
        ce0 => buf_V_3_ce0,
        we0 => buf_V_3_we0,
        d0 => ap_phi_mux_s_1_phi_fu_479_p4,
        address1 => buf_V_3_address1,
        ce1 => buf_V_3_ce1,
        q1 => buf_V_3_q1);

    fmul_32ns_32ns_32_4_max_dsp_1_U85 : component remap_accel_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => x_fl_reg_1759,
        din1 => ap_const_lv32_42000000,
        ce => grp_fu_491_ce,
        dout => grp_fu_491_p2);

    fmul_32ns_32ns_32_4_max_dsp_1_U86 : component remap_accel_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => y_fl_reg_1765,
        din1 => ap_const_lv32_42000000,
        ce => grp_fu_496_ce,
        dout => grp_fu_496_p2);

    fcmp_32ns_32ns_1_2_no_dsp_1_U87 : component remap_accel_fcmp_32ns_32ns_1_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_501_p0,
        din1 => conv1_i,
        ce => grp_fu_501_ce,
        opcode => ap_const_lv5_5,
        dout => grp_fu_501_p2);

    fcmp_32ns_32ns_1_2_no_dsp_1_U88 : component remap_accel_fcmp_32ns_32ns_1_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_505_p0,
        din1 => conv2_i,
        ce => grp_fu_505_ce,
        opcode => ap_const_lv5_5,
        dout => grp_fu_505_p2);

    mul_4s_11ns_13_1_1_U89 : component remap_accel_mul_4s_11ns_13_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 4,
        din1_WIDTH => 11,
        dout_WIDTH => 13)
    port map (
        din0 => ya0_reg_1896,
        din1 => empty_fu_1337_p1,
        dout => empty_fu_1337_p2);

    mul_4s_11ns_13_1_1_U90 : component remap_accel_mul_4s_11ns_13_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 4,
        din1_WIDTH => 11,
        dout_WIDTH => 13)
    port map (
        din0 => ya1_reg_1901,
        din1 => empty_56_fu_1367_p1,
        dout => empty_56_fu_1367_p2);

    mul_6ns_5ns_11_1_1_U91 : component remap_accel_mul_6ns_5ns_11_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 5,
        dout_WIDTH => 11)
    port map (
        din0 => k01_V_fu_1422_p0,
        din1 => k01_V_fu_1422_p1,
        dout => k01_V_fu_1422_p2);

    mul_6ns_5ns_11_1_1_U92 : component remap_accel_mul_6ns_5ns_11_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 5,
        dout_WIDTH => 11)
    port map (
        din0 => k10_V_fu_1438_p0,
        din1 => k10_V_fu_1438_p1,
        dout => k10_V_fu_1438_p2);

    mul_5ns_5ns_10_1_1_U93 : component remap_accel_mul_5ns_5ns_10_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 5,
        din1_WIDTH => 5,
        dout_WIDTH => 10)
    port map (
        din0 => mul_i_i_fu_1508_p0,
        din1 => mul_i_i_fu_1508_p1,
        dout => mul_i_i_fu_1508_p2);

    mul_mul_11ns_8ns_18_4_1_U94 : component remap_accel_mul_mul_11ns_8ns_18_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 11,
        din1_WIDTH => 8,
        dout_WIDTH => 18)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1666_p0,
        din1 => grp_fu_1666_p1,
        ce => grp_fu_1666_ce,
        dout => grp_fu_1666_p2);

    mul_mul_11ns_8ns_18_4_1_U95 : component remap_accel_mul_mul_11ns_8ns_18_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 11,
        din1_WIDTH => 8,
        dout_WIDTH => 18)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1672_p0,
        din1 => grp_fu_1672_p1,
        ce => grp_fu_1672_ce,
        dout => grp_fu_1672_p2);

    ama_submuladd_11ns_11ns_8ns_18ns_18_4_1_U96 : component remap_accel_ama_submuladd_11ns_11ns_8ns_18ns_18_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 11,
        din1_WIDTH => 11,
        din2_WIDTH => 8,
        din3_WIDTH => 18,
        dout_WIDTH => 18)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1678_p0,
        din1 => k01_V_reg_1945,
        din2 => grp_fu_1678_p2,
        din3 => grp_fu_1666_p2,
        ce => grp_fu_1678_ce,
        dout => grp_fu_1678_p4);

    mac_muladd_10ns_8ns_18ns_18_4_1_U97 : component remap_accel_mac_muladd_10ns_8ns_18ns_18_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 10,
        din1_WIDTH => 8,
        din2_WIDTH => 18,
        dout_WIDTH => 18)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1688_p0,
        din1 => grp_fu_1688_p1,
        din2 => grp_fu_1672_p2,
        ce => grp_fu_1688_ce,
        dout => grp_fu_1688_p3);

    flow_control_loop_pipe_sequential_init_U : component remap_accel_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter12_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    ap_phi_reg_pp0_iter1_s_1_reg_475_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_561)) then
                if (((ap_const_lv1_0 = and_ln269_fu_549_p2) and (icmp_ln258_fu_531_p2 = ap_const_lv1_0))) then 
                    ap_phi_reg_pp0_iter1_s_1_reg_475 <= ap_const_lv8_0;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter1_s_1_reg_475 <= ap_phi_reg_pp0_iter0_s_1_reg_475;
                end if;
            end if; 
        end if;
    end process;

    j_fu_202_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if (((ap_start_int = ap_const_logic_1) and (icmp_ln258_fu_531_p2 = ap_const_lv1_0))) then 
                    j_fu_202 <= j_2_fu_537_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    j_fu_202 <= ap_const_lv17_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln258_fu_531_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln315_reg_1736 <= add_ln315_fu_565_p2;
                and_ln269_reg_1732 <= and_ln269_fu_549_p2;
                and_ln324_reg_1745 <= and_ln324_fu_575_p2;
                trunc_ln315_reg_1741 <= trunc_ln315_fu_571_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                and_ln324_reg_1745_pp0_iter10_reg <= and_ln324_reg_1745_pp0_iter9_reg;
                and_ln324_reg_1745_pp0_iter11_reg <= and_ln324_reg_1745_pp0_iter10_reg;
                and_ln324_reg_1745_pp0_iter12_reg <= and_ln324_reg_1745_pp0_iter11_reg;
                and_ln324_reg_1745_pp0_iter2_reg <= and_ln324_reg_1745_pp0_iter1_reg;
                and_ln324_reg_1745_pp0_iter3_reg <= and_ln324_reg_1745_pp0_iter2_reg;
                and_ln324_reg_1745_pp0_iter4_reg <= and_ln324_reg_1745_pp0_iter3_reg;
                and_ln324_reg_1745_pp0_iter5_reg <= and_ln324_reg_1745_pp0_iter4_reg;
                and_ln324_reg_1745_pp0_iter6_reg <= and_ln324_reg_1745_pp0_iter5_reg;
                and_ln324_reg_1745_pp0_iter7_reg <= and_ln324_reg_1745_pp0_iter6_reg;
                and_ln324_reg_1745_pp0_iter8_reg <= and_ln324_reg_1745_pp0_iter7_reg;
                and_ln324_reg_1745_pp0_iter9_reg <= and_ln324_reg_1745_pp0_iter8_reg;
                and_ln349_1_reg_1796_pp0_iter10_reg <= and_ln349_1_reg_1796_pp0_iter9_reg;
                and_ln349_1_reg_1796_pp0_iter11_reg <= and_ln349_1_reg_1796_pp0_iter10_reg;
                and_ln349_1_reg_1796_pp0_iter12_reg <= and_ln349_1_reg_1796_pp0_iter11_reg;
                and_ln349_1_reg_1796_pp0_iter3_reg <= and_ln349_1_reg_1796;
                and_ln349_1_reg_1796_pp0_iter4_reg <= and_ln349_1_reg_1796_pp0_iter3_reg;
                and_ln349_1_reg_1796_pp0_iter5_reg <= and_ln349_1_reg_1796_pp0_iter4_reg;
                and_ln349_1_reg_1796_pp0_iter6_reg <= and_ln349_1_reg_1796_pp0_iter5_reg;
                and_ln349_1_reg_1796_pp0_iter7_reg <= and_ln349_1_reg_1796_pp0_iter6_reg;
                and_ln349_1_reg_1796_pp0_iter8_reg <= and_ln349_1_reg_1796_pp0_iter7_reg;
                and_ln349_1_reg_1796_pp0_iter9_reg <= and_ln349_1_reg_1796_pp0_iter8_reg;
                ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
                ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
                ap_loop_exit_ready_pp0_iter12_reg <= ap_loop_exit_ready_pp0_iter11_reg;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
                ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
                icmp_ln348_3_reg_1776_pp0_iter10_reg <= icmp_ln348_3_reg_1776_pp0_iter9_reg;
                icmp_ln348_3_reg_1776_pp0_iter11_reg <= icmp_ln348_3_reg_1776_pp0_iter10_reg;
                icmp_ln348_3_reg_1776_pp0_iter12_reg <= icmp_ln348_3_reg_1776_pp0_iter11_reg;
                icmp_ln348_3_reg_1776_pp0_iter2_reg <= icmp_ln348_3_reg_1776;
                icmp_ln348_3_reg_1776_pp0_iter3_reg <= icmp_ln348_3_reg_1776_pp0_iter2_reg;
                icmp_ln348_3_reg_1776_pp0_iter4_reg <= icmp_ln348_3_reg_1776_pp0_iter3_reg;
                icmp_ln348_3_reg_1776_pp0_iter5_reg <= icmp_ln348_3_reg_1776_pp0_iter4_reg;
                icmp_ln348_3_reg_1776_pp0_iter6_reg <= icmp_ln348_3_reg_1776_pp0_iter5_reg;
                icmp_ln348_3_reg_1776_pp0_iter7_reg <= icmp_ln348_3_reg_1776_pp0_iter6_reg;
                icmp_ln348_3_reg_1776_pp0_iter8_reg <= icmp_ln348_3_reg_1776_pp0_iter7_reg;
                icmp_ln348_3_reg_1776_pp0_iter9_reg <= icmp_ln348_3_reg_1776_pp0_iter8_reg;
                icmp_ln348_4_reg_1749_pp0_iter10_reg <= icmp_ln348_4_reg_1749_pp0_iter9_reg;
                icmp_ln348_4_reg_1749_pp0_iter11_reg <= icmp_ln348_4_reg_1749_pp0_iter10_reg;
                icmp_ln348_4_reg_1749_pp0_iter12_reg <= icmp_ln348_4_reg_1749_pp0_iter11_reg;
                icmp_ln348_4_reg_1749_pp0_iter2_reg <= icmp_ln348_4_reg_1749_pp0_iter1_reg;
                icmp_ln348_4_reg_1749_pp0_iter3_reg <= icmp_ln348_4_reg_1749_pp0_iter2_reg;
                icmp_ln348_4_reg_1749_pp0_iter4_reg <= icmp_ln348_4_reg_1749_pp0_iter3_reg;
                icmp_ln348_4_reg_1749_pp0_iter5_reg <= icmp_ln348_4_reg_1749_pp0_iter4_reg;
                icmp_ln348_4_reg_1749_pp0_iter6_reg <= icmp_ln348_4_reg_1749_pp0_iter5_reg;
                icmp_ln348_4_reg_1749_pp0_iter7_reg <= icmp_ln348_4_reg_1749_pp0_iter6_reg;
                icmp_ln348_4_reg_1749_pp0_iter8_reg <= icmp_ln348_4_reg_1749_pp0_iter7_reg;
                icmp_ln348_4_reg_1749_pp0_iter9_reg <= icmp_ln348_4_reg_1749_pp0_iter8_reg;
                icmp_ln348_reg_1771_pp0_iter10_reg <= icmp_ln348_reg_1771_pp0_iter9_reg;
                icmp_ln348_reg_1771_pp0_iter11_reg <= icmp_ln348_reg_1771_pp0_iter10_reg;
                icmp_ln348_reg_1771_pp0_iter12_reg <= icmp_ln348_reg_1771_pp0_iter11_reg;
                icmp_ln348_reg_1771_pp0_iter2_reg <= icmp_ln348_reg_1771;
                icmp_ln348_reg_1771_pp0_iter3_reg <= icmp_ln348_reg_1771_pp0_iter2_reg;
                icmp_ln348_reg_1771_pp0_iter4_reg <= icmp_ln348_reg_1771_pp0_iter3_reg;
                icmp_ln348_reg_1771_pp0_iter5_reg <= icmp_ln348_reg_1771_pp0_iter4_reg;
                icmp_ln348_reg_1771_pp0_iter6_reg <= icmp_ln348_reg_1771_pp0_iter5_reg;
                icmp_ln348_reg_1771_pp0_iter7_reg <= icmp_ln348_reg_1771_pp0_iter6_reg;
                icmp_ln348_reg_1771_pp0_iter8_reg <= icmp_ln348_reg_1771_pp0_iter7_reg;
                icmp_ln348_reg_1771_pp0_iter9_reg <= icmp_ln348_reg_1771_pp0_iter8_reg;
                loc_1_reg_1844_pp0_iter7_reg <= loc_1_reg_1844;
                loc_1_reg_1844_pp0_iter8_reg <= loc_1_reg_1844_pp0_iter7_reg;
                loc_1_reg_1844_pp0_iter9_reg <= loc_1_reg_1844_pp0_iter8_reg;
                loc_reg_1877_pp0_iter8_reg <= loc_reg_1877;
                loc_reg_1877_pp0_iter9_reg <= loc_reg_1877_pp0_iter8_reg;
                result_V_5_reg_1862_pp0_iter10_reg <= result_V_5_reg_1862_pp0_iter9_reg;
                result_V_5_reg_1862_pp0_iter11_reg <= result_V_5_reg_1862_pp0_iter10_reg;
                result_V_5_reg_1862_pp0_iter12_reg <= result_V_5_reg_1862_pp0_iter11_reg;
                result_V_5_reg_1862_pp0_iter8_reg <= result_V_5_reg_1862;
                result_V_5_reg_1862_pp0_iter9_reg <= result_V_5_reg_1862_pp0_iter8_reg;
                result_V_reg_1822_pp0_iter10_reg <= result_V_reg_1822_pp0_iter9_reg;
                result_V_reg_1822_pp0_iter11_reg <= result_V_reg_1822_pp0_iter10_reg;
                result_V_reg_1822_pp0_iter12_reg <= result_V_reg_1822_pp0_iter11_reg;
                result_V_reg_1822_pp0_iter7_reg <= result_V_reg_1822;
                result_V_reg_1822_pp0_iter8_reg <= result_V_reg_1822_pp0_iter7_reg;
                result_V_reg_1822_pp0_iter9_reg <= result_V_reg_1822_pp0_iter8_reg;
                sext_ln336_reg_1872_pp0_iter10_reg <= sext_ln336_reg_1872_pp0_iter9_reg;
                sext_ln336_reg_1872_pp0_iter11_reg <= sext_ln336_reg_1872_pp0_iter10_reg;
                sext_ln336_reg_1872_pp0_iter12_reg <= sext_ln336_reg_1872_pp0_iter11_reg;
                sext_ln336_reg_1872_pp0_iter8_reg <= sext_ln336_reg_1872;
                sext_ln336_reg_1872_pp0_iter9_reg <= sext_ln336_reg_1872_pp0_iter8_reg;
                tmp_5_reg_1791_pp0_iter10_reg <= tmp_5_reg_1791_pp0_iter9_reg;
                tmp_5_reg_1791_pp0_iter11_reg <= tmp_5_reg_1791_pp0_iter10_reg;
                tmp_5_reg_1791_pp0_iter12_reg <= tmp_5_reg_1791_pp0_iter11_reg;
                tmp_5_reg_1791_pp0_iter3_reg <= tmp_5_reg_1791;
                tmp_5_reg_1791_pp0_iter4_reg <= tmp_5_reg_1791_pp0_iter3_reg;
                tmp_5_reg_1791_pp0_iter5_reg <= tmp_5_reg_1791_pp0_iter4_reg;
                tmp_5_reg_1791_pp0_iter6_reg <= tmp_5_reg_1791_pp0_iter5_reg;
                tmp_5_reg_1791_pp0_iter7_reg <= tmp_5_reg_1791_pp0_iter6_reg;
                tmp_5_reg_1791_pp0_iter8_reg <= tmp_5_reg_1791_pp0_iter7_reg;
                tmp_5_reg_1791_pp0_iter9_reg <= tmp_5_reg_1791_pp0_iter8_reg;
                tobool437_i_reg_1906_pp0_iter8_reg <= tobool437_i_reg_1906;
                trunc_ln336_1_reg_1838_pp0_iter10_reg <= trunc_ln336_1_reg_1838_pp0_iter9_reg;
                trunc_ln336_1_reg_1838_pp0_iter11_reg <= trunc_ln336_1_reg_1838_pp0_iter10_reg;
                trunc_ln336_1_reg_1838_pp0_iter7_reg <= trunc_ln336_1_reg_1838;
                trunc_ln336_1_reg_1838_pp0_iter8_reg <= trunc_ln336_1_reg_1838_pp0_iter7_reg;
                trunc_ln336_1_reg_1838_pp0_iter9_reg <= trunc_ln336_1_reg_1838_pp0_iter8_reg;
                y_reg_1827_pp0_iter10_reg <= y_reg_1827_pp0_iter9_reg;
                y_reg_1827_pp0_iter11_reg <= y_reg_1827_pp0_iter10_reg;
                y_reg_1827_pp0_iter12_reg <= y_reg_1827_pp0_iter11_reg;
                y_reg_1827_pp0_iter7_reg <= y_reg_1827;
                y_reg_1827_pp0_iter8_reg <= y_reg_1827_pp0_iter7_reg;
                y_reg_1827_pp0_iter9_reg <= y_reg_1827_pp0_iter8_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                and_ln324_reg_1745_pp0_iter1_reg <= and_ln324_reg_1745;
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                icmp_ln258_reg_1728 <= icmp_ln258_fu_531_p2;
                icmp_ln348_4_reg_1749_pp0_iter1_reg <= icmp_ln348_4_reg_1749;
                icmp_ln349_2_reg_1754_pp0_iter1_reg <= icmp_ln349_2_reg_1754;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = and_ln324_reg_1745_pp0_iter1_reg) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                and_ln349_1_reg_1796 <= and_ln349_1_fu_701_p2;
                tmp_5_reg_1791 <= grp_fu_501_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = and_ln324_reg_1745_pp0_iter8_reg) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                d00_V_4_reg_1965 <= d00_V_4_fu_1473_p3;
                k01_V_reg_1945 <= k01_V_fu_1422_p2;
                sub_i_i682_i_reg_1940 <= sub_i_i682_i_fu_1406_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = and_ln324_reg_1745_pp0_iter4_reg) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                dc_1_reg_1806 <= grp_fu_496_p2;
                dc_reg_1801 <= grp_fu_491_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = and_ln324_reg_1745) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln348_3_reg_1776 <= icmp_ln348_3_fu_655_p2;
                icmp_ln348_reg_1771 <= icmp_ln348_fu_649_p2;
                icmp_ln349_1_reg_1786 <= icmp_ln349_1_fu_681_p2;
                icmp_ln349_reg_1781 <= icmp_ln349_fu_675_p2;
                x_fl_reg_1759 <= x_fl_fu_625_p1;
                y_fl_reg_1765 <= y_fl_fu_630_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = and_ln324_fu_575_p2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln258_fu_531_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln348_4_reg_1749 <= icmp_ln348_4_fu_591_p2;
                icmp_ln349_2_reg_1754 <= icmp_ln349_2_fu_607_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = and_ln324_reg_1745_pp0_iter5_reg) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                loc_1_reg_1844 <= loc_1_fu_999_p1;
                p_Result_s_reg_1811 <= data_V_fu_707_p1(31 downto 31);
                result_V_reg_1822 <= result_V_fu_963_p3;
                tmp_18_reg_1833 <= result_V_fu_963_p3(5 downto 5);
                tmp_22_reg_1851 <= result_V_fu_963_p3(31 downto 31);
                trunc_ln336_1_reg_1838 <= result_V_fu_963_p3(7 downto 5);
                trunc_ln371_1_reg_1857 <= result_V_fu_963_p3(31 downto 6);
                val_4_reg_1816 <= val_4_fu_824_p3;
                y_reg_1827 <= result_V_fu_963_p3(31 downto 5);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = and_ln324_reg_1745_pp0_iter6_reg) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                loc_reg_1877 <= loc_fu_1043_p1;
                result_V_5_reg_1862 <= result_V_5_fu_1026_p3;
                sext_ln336_reg_1872 <= sext_ln336_fu_1040_p1;
                tmp_17_reg_1867 <= result_V_5_fu_1026_p3(5 downto 5);
                tmp_21_reg_1884 <= result_V_5_fu_1026_p3(31 downto 31);
                tobool437_i_reg_1906 <= tobool437_i_fu_1299_p2;
                xa1_reg_1889 <= xa1_fu_1097_p3;
                ya0_reg_1896 <= ya0_fu_1239_p3;
                ya1_reg_1901 <= ya1_fu_1291_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = and_ln324_reg_1745_pp0_iter8_reg) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                p_Val2_8_reg_1960 <= buf_V_3_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = and_ln324_reg_1745_pp0_iter7_reg) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tobool428_i_reg_1933 <= tobool428_i_fu_1394_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln315_fu_565_p2 <= std_logic_vector(unsigned(mul_ln315_cast_fu_519_p1) + unsigned(div235_udiv_i_fu_555_p4));
    add_ln339_1_fu_1531_p2 <= std_logic_vector(unsigned(trunc_ln336_1_reg_1838_pp0_iter11_reg) + unsigned(ap_const_lv3_1));
    add_ln346_1_fu_875_p2 <= std_logic_vector(unsigned(zext_ln346_1_fu_871_p1) + unsigned(ap_const_lv9_181));
    add_ln346_fu_750_p2 <= std_logic_vector(unsigned(zext_ln346_fu_746_p1) + unsigned(ap_const_lv9_181));
    add_ln371_fu_1185_p2 <= std_logic_vector(signed(sext_ln371_1_fu_1149_p1) + signed(sext_ln371_2_fu_1181_p1));
    and_ln269_fu_549_p2 <= (icmp_ln269_fu_543_p2 and cmp111_i);
    and_ln324_fu_575_p2 <= (icmp_ln269_fu_543_p2 and cmp263_i);
    and_ln348_1_fu_1577_p2 <= (tmp_5_reg_1791_pp0_iter12_reg and and_ln348_fu_1571_p2);
    and_ln348_2_fu_1614_p2 <= (icmp_ln348_1_fu_1586_p2 and and_ln348_1_fu_1577_p2);
    and_ln348_3_fu_1620_p2 <= (xor_ln348_fu_1557_p2 and and_ln348_2_fu_1614_p2);
    and_ln348_4_fu_1626_p2 <= (xor_ln349_fu_1608_p2 and icmp_ln348_2_fu_1595_p2);
    and_ln348_5_fu_1632_p2 <= (and_ln349_1_reg_1796_pp0_iter12_reg and and_ln348_4_fu_1626_p2);
    and_ln348_fu_1571_p2 <= (or_ln348_fu_1563_p2 and or_ln348_1_fu_1567_p2);
    and_ln349_1_fu_701_p2 <= (grp_fu_505_p2 and and_ln349_fu_695_p2);
    and_ln349_fu_695_p2 <= (or_ln349_fu_687_p2 and or_ln349_1_fu_691_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);

    ap_block_pp0_assign_proc : process(ap_CS_fsm, ap_block_pp0_stage0_subdone)
    begin
                ap_block_pp0 <= ((ap_ST_fsm_pp0_stage0 = ap_CS_fsm) and (ap_const_boolean_1 = ap_block_pp0_stage0_subdone));
    end process;

        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_00001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter13, imgInput_data1_empty_n, ap_predicate_op75_read_state2, mapX_data2_empty_n, and_ln324_reg_1745, mapY_data3_empty_n, imgOutput_data4_full_n, and_ln324_reg_1745_pp0_iter12_reg)
    begin
                ap_block_pp0_stage0_00001 <= (((ap_const_lv1_1 = and_ln324_reg_1745_pp0_iter12_reg) and (ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (imgOutput_data4_full_n = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((mapX_data2_empty_n = ap_const_logic_0) and (ap_const_lv1_1 = and_ln324_reg_1745)) or ((ap_predicate_op75_read_state2 = ap_const_boolean_1) and (imgInput_data1_empty_n = ap_const_logic_0)) or ((mapY_data3_empty_n = ap_const_logic_0) and (ap_const_lv1_1 = and_ln324_reg_1745)))));
    end process;


    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter13, imgInput_data1_empty_n, ap_predicate_op75_read_state2, mapX_data2_empty_n, and_ln324_reg_1745, mapY_data3_empty_n, imgOutput_data4_full_n, and_ln324_reg_1745_pp0_iter12_reg)
    begin
                ap_block_pp0_stage0_01001 <= (((ap_const_lv1_1 = and_ln324_reg_1745_pp0_iter12_reg) and (ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (imgOutput_data4_full_n = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((mapX_data2_empty_n = ap_const_logic_0) and (ap_const_lv1_1 = and_ln324_reg_1745)) or ((ap_predicate_op75_read_state2 = ap_const_boolean_1) and (imgInput_data1_empty_n = ap_const_logic_0)) or ((mapY_data3_empty_n = ap_const_logic_0) and (ap_const_lv1_1 = and_ln324_reg_1745)))));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter13, imgInput_data1_empty_n, ap_predicate_op75_read_state2, mapX_data2_empty_n, and_ln324_reg_1745, mapY_data3_empty_n, imgOutput_data4_full_n, and_ln324_reg_1745_pp0_iter12_reg)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_const_lv1_1 = and_ln324_reg_1745_pp0_iter12_reg) and (ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (imgOutput_data4_full_n = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((mapX_data2_empty_n = ap_const_logic_0) and (ap_const_lv1_1 = and_ln324_reg_1745)) or ((ap_predicate_op75_read_state2 = ap_const_boolean_1) and (imgInput_data1_empty_n = ap_const_logic_0)) or ((mapY_data3_empty_n = ap_const_logic_0) and (ap_const_lv1_1 = and_ln324_reg_1745)))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter13, imgInput_data1_empty_n, ap_predicate_op75_read_state2, mapX_data2_empty_n, and_ln324_reg_1745, mapY_data3_empty_n, imgOutput_data4_full_n, and_ln324_reg_1745_pp0_iter12_reg)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_const_lv1_1 = and_ln324_reg_1745_pp0_iter12_reg) and (ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (imgOutput_data4_full_n = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((mapX_data2_empty_n = ap_const_logic_0) and (ap_const_lv1_1 = and_ln324_reg_1745)) or ((ap_predicate_op75_read_state2 = ap_const_boolean_1) and (imgInput_data1_empty_n = ap_const_logic_0)) or ((mapY_data3_empty_n = ap_const_logic_0) and (ap_const_lv1_1 = and_ln324_reg_1745)))));
    end process;

        ap_block_state10_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state14_pp0_stage0_iter13_assign_proc : process(imgOutput_data4_full_n, and_ln324_reg_1745_pp0_iter12_reg)
    begin
                ap_block_state14_pp0_stage0_iter13 <= ((ap_const_lv1_1 = and_ln324_reg_1745_pp0_iter12_reg) and (imgOutput_data4_full_n = ap_const_logic_0));
    end process;

        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state2_pp0_stage0_iter1_assign_proc : process(imgInput_data1_empty_n, ap_predicate_op75_read_state2, mapX_data2_empty_n, and_ln324_reg_1745, mapY_data3_empty_n)
    begin
                ap_block_state2_pp0_stage0_iter1 <= (((mapX_data2_empty_n = ap_const_logic_0) and (ap_const_lv1_1 = and_ln324_reg_1745)) or ((ap_predicate_op75_read_state2 = ap_const_boolean_1) and (imgInput_data1_empty_n = ap_const_logic_0)) or ((mapY_data3_empty_n = ap_const_logic_0) and (ap_const_lv1_1 = and_ln324_reg_1745)));
    end process;

        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_561_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_start_int)
    begin
                ap_condition_561 <= ((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001));
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, icmp_ln258_fu_531_p2, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln258_fu_531_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter12_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter12_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;


    ap_enable_operation_235_assign_proc : process(and_ln324_reg_1745_pp0_iter7_reg)
    begin
                ap_enable_operation_235 <= (ap_const_lv1_1 = and_ln324_reg_1745_pp0_iter7_reg);
    end process;


    ap_enable_operation_236_assign_proc : process(and_ln324_reg_1745_pp0_iter7_reg)
    begin
                ap_enable_operation_236 <= (ap_const_lv1_1 = and_ln324_reg_1745_pp0_iter7_reg);
    end process;


    ap_enable_operation_237_assign_proc : process(and_ln324_reg_1745_pp0_iter7_reg)
    begin
                ap_enable_operation_237 <= (ap_const_lv1_1 = and_ln324_reg_1745_pp0_iter7_reg);
    end process;


    ap_enable_operation_238_assign_proc : process(and_ln324_reg_1745_pp0_iter7_reg)
    begin
                ap_enable_operation_238 <= (ap_const_lv1_1 = and_ln324_reg_1745_pp0_iter7_reg);
    end process;


    ap_enable_operation_251_assign_proc : process(and_ln324_reg_1745_pp0_iter8_reg)
    begin
                ap_enable_operation_251 <= (ap_const_lv1_1 = and_ln324_reg_1745_pp0_iter8_reg);
    end process;


    ap_enable_operation_252_assign_proc : process(and_ln324_reg_1745_pp0_iter8_reg)
    begin
                ap_enable_operation_252 <= (ap_const_lv1_1 = and_ln324_reg_1745_pp0_iter8_reg);
    end process;


    ap_enable_operation_253_assign_proc : process(and_ln324_reg_1745_pp0_iter8_reg)
    begin
                ap_enable_operation_253 <= (ap_const_lv1_1 = and_ln324_reg_1745_pp0_iter8_reg);
    end process;


    ap_enable_operation_254_assign_proc : process(and_ln324_reg_1745_pp0_iter8_reg)
    begin
                ap_enable_operation_254 <= (ap_const_lv1_1 = and_ln324_reg_1745_pp0_iter8_reg);
    end process;


    ap_enable_operation_285_assign_proc : process(and_ln324_reg_1745_pp0_iter11_reg)
    begin
                ap_enable_operation_285 <= (ap_const_lv1_1 = and_ln324_reg_1745_pp0_iter11_reg);
    end process;


    ap_enable_operation_288_assign_proc : process(and_ln324_reg_1745_pp0_iter11_reg)
    begin
                ap_enable_operation_288 <= (ap_const_lv1_1 = and_ln324_reg_1745_pp0_iter11_reg);
    end process;


    ap_enable_operation_302_assign_proc : process(and_ln324_reg_1745_pp0_iter12_reg)
    begin
                ap_enable_operation_302 <= (ap_const_lv1_1 = and_ln324_reg_1745_pp0_iter12_reg);
    end process;


    ap_enable_operation_305_assign_proc : process(and_ln324_reg_1745_pp0_iter12_reg)
    begin
                ap_enable_operation_305 <= (ap_const_lv1_1 = and_ln324_reg_1745_pp0_iter12_reg);
    end process;


    ap_enable_operation_65_assign_proc : process(icmp_ln258_fu_531_p2)
    begin
                ap_enable_operation_65 <= (icmp_ln258_fu_531_p2 = ap_const_lv1_0);
    end process;


    ap_enable_operation_66_assign_proc : process(icmp_ln258_fu_531_p2)
    begin
                ap_enable_operation_66 <= (icmp_ln258_fu_531_p2 = ap_const_lv1_0);
    end process;


    ap_enable_operation_83_assign_proc : process(ap_predicate_op83_store_state2)
    begin
                ap_enable_operation_83 <= (ap_predicate_op83_store_state2 = ap_const_boolean_1);
    end process;


    ap_enable_operation_85_assign_proc : process(ap_predicate_op85_store_state2)
    begin
                ap_enable_operation_85 <= (ap_predicate_op85_store_state2 = ap_const_boolean_1);
    end process;


    ap_enable_operation_87_assign_proc : process(ap_predicate_op87_store_state2)
    begin
                ap_enable_operation_87 <= (ap_predicate_op87_store_state2 = ap_const_boolean_1);
    end process;


    ap_enable_operation_89_assign_proc : process(ap_predicate_op89_store_state2)
    begin
                ap_enable_operation_89 <= (ap_predicate_op89_store_state2 = ap_const_boolean_1);
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_enable_state10_pp0_iter9_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter9)
    begin
                ap_enable_state10_pp0_iter9_stage0 <= ((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_enable_state13_pp0_iter12_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter12)
    begin
                ap_enable_state13_pp0_iter12_stage0 <= ((ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_enable_state14_pp0_iter13_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter13)
    begin
                ap_enable_state14_pp0_iter13_stage0 <= ((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_enable_state1_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_start_int)
    begin
                ap_enable_state1_pp0_iter0_stage0 <= ((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_enable_state2_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1)
    begin
                ap_enable_state2_pp0_iter1_stage0 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_enable_state9_pp0_iter8_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter8)
    begin
                ap_enable_state9_pp0_iter8_stage0 <= ((ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;

    ap_ext_blocking_n <= (ap_const_logic_1 and ap_const_logic_1);

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_start_int = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13)
    begin
        if (((ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_int_blocking_cur_n <= (mapY_data3_blk_n and mapX_data2_blk_n and imgOutput_data4_blk_n and imgInput_data1_blk_n);
    ap_int_blocking_n <= (ap_int_blocking_cur_n and ap_const_logic_1);
    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_phi_mux_s_1_phi_fu_479_p4_assign_proc : process(imgInput_data1_dout, icmp_ln258_reg_1728, and_ln269_reg_1732, ap_phi_reg_pp0_iter1_s_1_reg_475)
    begin
        if (((ap_const_lv1_1 = and_ln269_reg_1732) and (icmp_ln258_reg_1728 = ap_const_lv1_0))) then 
            ap_phi_mux_s_1_phi_fu_479_p4 <= imgInput_data1_dout;
        else 
            ap_phi_mux_s_1_phi_fu_479_p4 <= ap_phi_reg_pp0_iter1_s_1_reg_475;
        end if; 
    end process;

    ap_phi_reg_pp0_iter0_s_1_reg_475 <= "XXXXXXXX";

    ap_predicate_op75_read_state2_assign_proc : process(icmp_ln258_reg_1728, and_ln269_reg_1732)
    begin
                ap_predicate_op75_read_state2 <= ((ap_const_lv1_1 = and_ln269_reg_1732) and (icmp_ln258_reg_1728 = ap_const_lv1_0));
    end process;


    ap_predicate_op83_store_state2_assign_proc : process(i_cast9_i, trunc_ln315_reg_1741)
    begin
                ap_predicate_op83_store_state2 <= ((trunc_ln315_reg_1741 = ap_const_lv1_0) and (i_cast9_i = ap_const_lv1_0));
    end process;


    ap_predicate_op85_store_state2_assign_proc : process(i_cast9_i, trunc_ln315_reg_1741)
    begin
                ap_predicate_op85_store_state2 <= ((trunc_ln315_reg_1741 = ap_const_lv1_1) and (i_cast9_i = ap_const_lv1_0));
    end process;


    ap_predicate_op87_store_state2_assign_proc : process(i_cast9_i, trunc_ln315_reg_1741)
    begin
                ap_predicate_op87_store_state2 <= ((trunc_ln315_reg_1741 = ap_const_lv1_0) and (i_cast9_i = ap_const_lv1_1));
    end process;


    ap_predicate_op89_store_state2_assign_proc : process(i_cast9_i, trunc_ln315_reg_1741)
    begin
                ap_predicate_op89_store_state2 <= ((trunc_ln315_reg_1741 = ap_const_lv1_1) and (i_cast9_i = ap_const_lv1_1));
    end process;


    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_j_1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, j_fu_202, ap_loop_init)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_sig_allocacmp_j_1 <= ap_const_lv17_0;
        else 
            ap_sig_allocacmp_j_1 <= j_fu_202;
        end if; 
    end process;

    ap_str_blocking_n <= (ap_const_logic_1 and ap_const_logic_1);
    buf_V_1_address0 <= zext_ln315_fu_618_p1(13 - 1 downto 0);
    buf_V_1_address1 <= p_cast6_fu_1359_p1(13 - 1 downto 0);

    buf_V_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            buf_V_1_ce0 <= ap_const_logic_1;
        else 
            buf_V_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buf_V_1_ce1_assign_proc : process(ap_enable_reg_pp0_iter8, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            buf_V_1_ce1 <= ap_const_logic_1;
        else 
            buf_V_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    buf_V_1_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, i_cast9_i, ap_block_pp0_stage0_11001, trunc_ln315_reg_1741)
    begin
        if (((trunc_ln315_reg_1741 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (i_cast9_i = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            buf_V_1_we0 <= ap_const_logic_1;
        else 
            buf_V_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    buf_V_2_address0 <= zext_ln315_fu_618_p1(13 - 1 downto 0);
    buf_V_2_address1 <= p_cast7_fu_1379_p1(13 - 1 downto 0);

    buf_V_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            buf_V_2_ce0 <= ap_const_logic_1;
        else 
            buf_V_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buf_V_2_ce1_assign_proc : process(ap_enable_reg_pp0_iter8, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            buf_V_2_ce1 <= ap_const_logic_1;
        else 
            buf_V_2_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    buf_V_2_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, i_cast9_i, ap_block_pp0_stage0_11001, trunc_ln315_reg_1741)
    begin
        if (((trunc_ln315_reg_1741 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (i_cast9_i = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            buf_V_2_we0 <= ap_const_logic_1;
        else 
            buf_V_2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    buf_V_3_address0 <= zext_ln315_fu_618_p1(13 - 1 downto 0);
    buf_V_3_address1 <= p_cast8_fu_1389_p1(13 - 1 downto 0);

    buf_V_3_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            buf_V_3_ce0 <= ap_const_logic_1;
        else 
            buf_V_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buf_V_3_ce1_assign_proc : process(ap_enable_reg_pp0_iter8, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            buf_V_3_ce1 <= ap_const_logic_1;
        else 
            buf_V_3_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    buf_V_3_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, i_cast9_i, ap_block_pp0_stage0_11001, trunc_ln315_reg_1741)
    begin
        if (((trunc_ln315_reg_1741 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (i_cast9_i = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            buf_V_3_we0 <= ap_const_logic_1;
        else 
            buf_V_3_we0 <= ap_const_logic_0;
        end if; 
    end process;

    buf_V_address0 <= zext_ln315_fu_618_p1(13 - 1 downto 0);
    buf_V_address1 <= p_cast5_fu_1349_p1(13 - 1 downto 0);

    buf_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            buf_V_ce0 <= ap_const_logic_1;
        else 
            buf_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buf_V_ce1_assign_proc : process(ap_enable_reg_pp0_iter8, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            buf_V_ce1 <= ap_const_logic_1;
        else 
            buf_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    buf_V_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, i_cast9_i, ap_block_pp0_stage0_11001, trunc_ln315_reg_1741)
    begin
        if (((trunc_ln315_reg_1741 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (i_cast9_i = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            buf_V_we0 <= ap_const_logic_1;
        else 
            buf_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    cols_cast_i_cast_fu_509_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(cols_cast_i),17));
    d00_V_4_fu_1473_p3 <= 
        d10_V_4_fu_1466_p3 when (tobool437_i_reg_1906_pp0_iter8_reg(0) = '1') else 
        d00_V_fu_1452_p3;
    d00_V_fu_1452_p3 <= 
        buf_V_1_q1 when (tobool428_i_reg_1933(0) = '1') else 
        buf_V_q1;
    d01_V_3_fu_1459_p3 <= 
        buf_V_q1 when (tobool428_i_reg_1933(0) = '1') else 
        buf_V_1_q1;
    d01_V_fu_1480_p3 <= 
        buf_V_3_q1 when (tobool437_i_reg_1906_pp0_iter8_reg(0) = '1') else 
        d01_V_3_fu_1459_p3;
    d10_V_4_fu_1466_p3 <= 
        buf_V_3_q1 when (tobool428_i_reg_1933(0) = '1') else 
        buf_V_2_q1;
    d10_V_fu_1487_p3 <= 
        d00_V_fu_1452_p3 when (tobool437_i_reg_1906_pp0_iter8_reg(0) = '1') else 
        d10_V_4_fu_1466_p3;
    data_V_1_fu_832_p1 <= dc_1_reg_1806;
    data_V_fu_707_p1 <= dc_reg_1801;
    div235_udiv_i_fu_555_p4 <= ap_sig_allocacmp_j_1(13 downto 1);
    empty_54_fu_1343_p2 <= std_logic_vector(unsigned(empty_fu_1337_p2) + unsigned(xa0_fu_1329_p2));
    empty_55_fu_1354_p2 <= std_logic_vector(unsigned(empty_fu_1337_p2) + unsigned(xa1_reg_1889));
    empty_56_fu_1367_p1 <= ap_const_lv13_3C1(11 - 1 downto 0);
    empty_57_fu_1373_p2 <= std_logic_vector(unsigned(empty_56_fu_1367_p2) + unsigned(xa0_fu_1329_p2));
    empty_58_fu_1384_p2 <= std_logic_vector(unsigned(empty_56_fu_1367_p2) + unsigned(xa1_reg_1889));
    empty_fu_1337_p1 <= ap_const_lv13_3C1(11 - 1 downto 0);

    grp_fu_1666_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_1666_ce <= ap_const_logic_1;
        else 
            grp_fu_1666_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1666_p0 <= grp_fu_1666_p00(11 - 1 downto 0);
    grp_fu_1666_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k01_V_fu_1422_p2),18));
    grp_fu_1666_p1 <= grp_fu_1666_p10(8 - 1 downto 0);
    grp_fu_1666_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(d01_V_fu_1480_p3),18));

    grp_fu_1672_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_1672_ce <= ap_const_logic_1;
        else 
            grp_fu_1672_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1672_p0 <= grp_fu_1672_p00(11 - 1 downto 0);
    grp_fu_1672_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k10_V_fu_1438_p2),18));
    grp_fu_1672_p1 <= grp_fu_1672_p10(8 - 1 downto 0);
    grp_fu_1672_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(d10_V_fu_1487_p3),18));

    grp_fu_1678_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_1678_ce <= ap_const_logic_1;
        else 
            grp_fu_1678_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1678_p0 <= (sub_i_i682_i_reg_1940 & ap_const_lv5_0);
    grp_fu_1678_p2 <= grp_fu_1678_p20(8 - 1 downto 0);
    grp_fu_1678_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(d00_V_4_reg_1965),18));

    grp_fu_1688_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_1688_ce <= ap_const_logic_1;
        else 
            grp_fu_1688_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1688_p0 <= grp_fu_1688_p00(10 - 1 downto 0);
    grp_fu_1688_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_i_i_fu_1508_p2),18));
    grp_fu_1688_p1 <= grp_fu_1688_p10(8 - 1 downto 0);
    grp_fu_1688_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Val2_8_reg_1960),18));

    grp_fu_491_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_491_ce <= ap_const_logic_1;
        else 
            grp_fu_491_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_496_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_496_ce <= ap_const_logic_1;
        else 
            grp_fu_496_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_501_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_501_ce <= ap_const_logic_1;
        else 
            grp_fu_501_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_501_p0 <= mapY_data3_dout;

    grp_fu_505_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_505_ce <= ap_const_logic_1;
        else 
            grp_fu_505_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_505_p0 <= mapX_data2_dout;
    icmp_ln258_fu_531_p2 <= "1" when (ap_sig_allocacmp_j_1 = add106_i) else "0";
    icmp_ln269_fu_543_p2 <= "1" when (unsigned(ap_sig_allocacmp_j_1) < unsigned(cols_cast_i_cast_fu_509_p1)) else "0";
    icmp_ln348_1_fu_1586_p2 <= "1" when (y_reg_1827_pp0_iter12_reg = r1_load_cast_i_fu_1582_p1) else "0";
    icmp_ln348_2_fu_1595_p2 <= "1" when (r2_load_cast_i_fu_1591_p1 = ynext_fu_1545_p2) else "0";
    icmp_ln348_3_fu_655_p2 <= "1" when (trunc_ln348_fu_645_p1 = ap_const_lv23_0) else "0";
    icmp_ln348_4_fu_591_p2 <= "0" when (tmp_4_fu_581_p4 = ap_const_lv8_FF) else "1";
    icmp_ln348_fu_649_p2 <= "0" when (tmp_3_fu_635_p4 = ap_const_lv8_FF) else "1";
    icmp_ln349_1_fu_681_p2 <= "1" when (trunc_ln349_fu_671_p1 = ap_const_lv23_0) else "0";
    icmp_ln349_2_fu_607_p2 <= "0" when (tmp_7_fu_597_p4 = ap_const_lv8_FF) else "1";
    icmp_ln349_fu_675_p2 <= "0" when (tmp_6_fu_661_p4 = ap_const_lv8_FF) else "1";
    idxprom2582_i_cast_fu_513_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(idxprom2582_i),64));

    imgInput_data1_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, imgInput_data1_empty_n, ap_predicate_op75_read_state2, ap_block_pp0_stage0)
    begin
        if (((ap_predicate_op75_read_state2 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            imgInput_data1_blk_n <= imgInput_data1_empty_n;
        else 
            imgInput_data1_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    imgInput_data1_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_predicate_op75_read_state2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_predicate_op75_read_state2 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            imgInput_data1_read <= ap_const_logic_1;
        else 
            imgInput_data1_read <= ap_const_logic_0;
        end if; 
    end process;


    imgOutput_data4_blk_n_assign_proc : process(ap_enable_reg_pp0_iter13, imgOutput_data4_full_n, and_ln324_reg_1745_pp0_iter12_reg, ap_block_pp0_stage0)
    begin
        if (((ap_const_lv1_1 = and_ln324_reg_1745_pp0_iter12_reg) and (ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            imgOutput_data4_blk_n <= imgOutput_data4_full_n;
        else 
            imgOutput_data4_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    imgOutput_data4_din <= 
        tmp_fu_1647_p4 when (in_range_fu_1637_p2(0) = '1') else 
        ap_const_lv8_0;

    imgOutput_data4_write_assign_proc : process(ap_enable_reg_pp0_iter13, and_ln324_reg_1745_pp0_iter12_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_lv1_1 = and_ln324_reg_1745_pp0_iter12_reg) and (ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            imgOutput_data4_write <= ap_const_logic_1;
        else 
            imgOutput_data4_write <= ap_const_logic_0;
        end if; 
    end process;

    in_range_fu_1637_p2 <= (and_ln348_5_fu_1632_p2 and and_ln348_3_fu_1620_p2);
    isNeg_1_fu_881_p3 <= add_ln346_1_fu_875_p2(8 downto 8);
    isNeg_fu_756_p3 <= add_ln346_fu_750_p2(8 downto 8);
    j_2_fu_537_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_j_1) + unsigned(ap_const_lv17_1));
    k01_V_fu_1422_p0 <= k01_V_fu_1422_p00(6 - 1 downto 0);
    k01_V_fu_1422_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_i_i682_i_fu_1406_p2),11));
    k01_V_fu_1422_p1 <= k01_V_fu_1422_p10(5 - 1 downto 0);
    k01_V_fu_1422_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loc_reg_1877_pp0_iter8_reg),11));
    k10_V_fu_1438_p0 <= k10_V_fu_1438_p00(6 - 1 downto 0);
    k10_V_fu_1438_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_i_i569_i_fu_1428_p2),11));
    k10_V_fu_1438_p1 <= k10_V_fu_1438_p10(5 - 1 downto 0);
    k10_V_fu_1438_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loc_1_reg_1844_pp0_iter8_reg),11));
    loc_1_cast_i_fu_1403_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loc_1_reg_1844_pp0_iter8_reg),6));
    loc_1_fu_999_p1 <= result_V_fu_963_p3(5 - 1 downto 0);
    loc_cast_i_fu_1419_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loc_reg_1877_pp0_iter8_reg),6));
    loc_fu_1043_p1 <= result_V_5_fu_1026_p3(5 - 1 downto 0);
    lshr_ln371_1_fu_1111_p4 <= sub_ln371_fu_1105_p2(27 downto 1);
    mantissa_1_fu_857_p4 <= ((ap_const_lv1_1 & p_Result_3_fu_853_p1) & ap_const_lv1_0);
    mantissa_fu_732_p4 <= ((ap_const_lv1_1 & p_Result_1_fu_728_p1) & ap_const_lv1_0);

    mapX_data2_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, mapX_data2_empty_n, and_ln324_reg_1745, ap_block_pp0_stage0)
    begin
        if (((ap_const_lv1_1 = and_ln324_reg_1745) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            mapX_data2_blk_n <= mapX_data2_empty_n;
        else 
            mapX_data2_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    mapX_data2_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, and_ln324_reg_1745, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_lv1_1 = and_ln324_reg_1745) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            mapX_data2_read <= ap_const_logic_1;
        else 
            mapX_data2_read <= ap_const_logic_0;
        end if; 
    end process;


    mapY_data3_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, and_ln324_reg_1745, mapY_data3_empty_n, ap_block_pp0_stage0)
    begin
        if (((ap_const_lv1_1 = and_ln324_reg_1745) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            mapY_data3_blk_n <= mapY_data3_empty_n;
        else 
            mapY_data3_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    mapY_data3_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, and_ln324_reg_1745, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_lv1_1 = and_ln324_reg_1745) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            mapY_data3_read <= ap_const_logic_1;
        else 
            mapY_data3_read <= ap_const_logic_0;
        end if; 
    end process;

    mul_i_i_fu_1508_p0 <= mul_i_i_fu_1508_p00(5 - 1 downto 0);
    mul_i_i_fu_1508_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loc_1_reg_1844_pp0_iter9_reg),10));
    mul_i_i_fu_1508_p1 <= mul_i_i_fu_1508_p10(5 - 1 downto 0);
    mul_i_i_fu_1508_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loc_reg_1877_pp0_iter9_reg),10));
    mul_ln315_cast_fu_519_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln315),13));
    or_ln348_1_fu_1567_p2 <= (icmp_ln348_6 or icmp_ln348_4_reg_1749_pp0_iter12_reg);
    or_ln348_fu_1563_p2 <= (icmp_ln348_reg_1771_pp0_iter12_reg or icmp_ln348_3_reg_1776_pp0_iter12_reg);
    or_ln349_1_fu_691_p2 <= (icmp_ln349_4 or icmp_ln349_2_reg_1754_pp0_iter1_reg);
    or_ln349_fu_687_p2 <= (icmp_ln349_reg_1781 or icmp_ln349_1_reg_1786);
    p_Result_1_fu_728_p1 <= data_V_fu_707_p1(23 - 1 downto 0);
    p_Result_2_fu_835_p3 <= data_V_1_fu_832_p1(31 downto 31);
    p_Result_3_fu_853_p1 <= data_V_1_fu_832_p1(23 - 1 downto 0);
    p_and_f3_fu_1203_p3 <= (ap_const_lv1_0 & trunc_ln371_3_fu_1191_p1);
    p_and_f9_fu_1153_p3 <= (ap_const_lv1_0 & tmp_18_reg_1833);
    p_and_f_fu_1255_p3 <= (ap_const_lv1_0 & trunc_ln371_fu_1145_p1);
    p_and_t1_fu_1305_p3 <= (ap_const_lv1_0 & tmp_17_reg_1867);
    p_and_t5_fu_1221_p3 <= (ap_const_lv1_0 & sub_ln371_3_fu_1215_p2);
    p_and_t_fu_1273_p3 <= (ap_const_lv1_0 & sub_ln372_fu_1267_p2);
    p_cast5_fu_1349_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_54_fu_1343_p2),64));
    p_cast6_fu_1359_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_55_fu_1354_p2),64));
    p_cast7_fu_1379_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_57_fu_1373_p2),64));
    p_cast8_fu_1389_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_58_fu_1384_p2),64));
    r1_address0 <= idxprom2582_i_cast_fu_513_p1(3 - 1 downto 0);
    r1_address1 <= zext_ln348_fu_1536_p1(3 - 1 downto 0);

    r1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            r1_ce0 <= ap_const_logic_1;
        else 
            r1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    r1_ce1_assign_proc : process(ap_enable_reg_pp0_iter12, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            r1_ce1 <= ap_const_logic_1;
        else 
            r1_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    r1_d0 <= i;
    r1_load_cast_i_fu_1582_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r1_q1),27));

    r1_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln258_fu_531_p2, ap_block_pp0_stage0_11001, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln258_fu_531_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            r1_we0 <= ap_const_logic_1;
        else 
            r1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    r2_address0 <= idxprom2582_i_cast_fu_513_p1(3 - 1 downto 0);
    r2_address1 <= zext_ln348_1_fu_1540_p1(3 - 1 downto 0);

    r2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            r2_ce0 <= ap_const_logic_1;
        else 
            r2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    r2_ce1_assign_proc : process(ap_enable_reg_pp0_iter12, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            r2_ce1 <= ap_const_logic_1;
        else 
            r2_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    r2_d0 <= i;
    r2_load_cast_i_fu_1591_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r2_q1),28));

    r2_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln258_fu_531_p2, ap_block_pp0_stage0_11001, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln258_fu_531_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            r2_we0 <= ap_const_logic_1;
        else 
            r2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    r_V_1_fu_796_p2 <= std_logic_vector(shift_left(unsigned(zext_ln15_fu_742_p1),to_integer(unsigned('0' & zext_ln1488_fu_786_p1(31-1 downto 0)))));
    r_V_2_fu_915_p2 <= std_logic_vector(shift_right(unsigned(zext_ln15_1_fu_867_p1),to_integer(unsigned('0' & zext_ln1488_1_fu_911_p1(31-1 downto 0)))));
    r_V_3_fu_921_p2 <= std_logic_vector(shift_left(unsigned(zext_ln15_1_fu_867_p1),to_integer(unsigned('0' & zext_ln1488_1_fu_911_p1(31-1 downto 0)))));
    r_V_fu_790_p2 <= std_logic_vector(shift_right(unsigned(zext_ln15_fu_742_p1),to_integer(unsigned('0' & zext_ln1488_fu_786_p1(31-1 downto 0)))));
    result_V_2_fu_1021_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(val_4_reg_1816));
    result_V_3_fu_957_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(val_5_fu_949_p3));
    result_V_5_fu_1026_p3 <= 
        result_V_2_fu_1021_p2 when (p_Result_s_reg_1811(0) = '1') else 
        val_4_reg_1816;
    result_V_fu_963_p3 <= 
        result_V_3_fu_957_p2 when (p_Result_2_fu_835_p3(0) = '1') else 
        val_5_fu_949_p3;
    ret_V_fu_1643_p2 <= std_logic_vector(unsigned(grp_fu_1688_p3) + unsigned(grp_fu_1678_p4));
    select_ln369_1_fu_1318_p3 <= 
        sub_ln369_2_fu_1312_p2 when (tmp_21_reg_1884(0) = '1') else 
        p_and_t1_fu_1305_p3;
    select_ln371_1_fu_1170_p3 <= 
        sub_ln371_2_fu_1164_p2 when (tmp_22_reg_1851(0) = '1') else 
        zext_ln371_2_fu_1160_p1;
    select_ln371_fu_1138_p3 <= 
        sub_ln371_1_fu_1125_p2 when (tmp_22_reg_1851(0) = '1') else 
        zext_ln371_1_fu_1134_p1;
        sext_ln1488_1_fu_907_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_1_fu_899_p3),32));

        sext_ln1488_fu_782_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_fu_774_p3),32));

        sext_ln1512_1_fu_895_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln1512_1_fu_889_p2),9));

        sext_ln1512_fu_770_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln1512_fu_764_p2),9));

        sext_ln336_fu_1040_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(y_reg_1827),28));

        sext_ln369_fu_1325_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln369_1_fu_1318_p3),13));

        sext_ln371_1_fu_1149_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln371_fu_1138_p3),29));

        sext_ln371_2_fu_1181_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln371_1_fu_1170_p3),29));

        sext_ln371_fu_1131_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln371_1_reg_1857),27));

    sub_i_i569_i_fu_1428_p2 <= std_logic_vector(signed(ap_const_lv6_20) - signed(loc_cast_i_fu_1419_p1));
    sub_i_i682_i_fu_1406_p2 <= std_logic_vector(signed(ap_const_lv6_20) - signed(loc_1_cast_i_fu_1403_p1));
    sub_ln1512_1_fu_889_p2 <= std_logic_vector(unsigned(ap_const_lv8_7F) - unsigned(xs_exp_V_1_fu_843_p4));
    sub_ln1512_fu_764_p2 <= std_logic_vector(unsigned(ap_const_lv8_7F) - unsigned(xs_exp_V_fu_718_p4));
    sub_ln369_1_fu_1081_p2 <= std_logic_vector(unsigned(ap_const_lv13_0) - unsigned(trunc_ln369_2_fu_1071_p4));
    sub_ln369_2_fu_1312_p2 <= std_logic_vector(unsigned(ap_const_lv2_0) - unsigned(p_and_t1_fu_1305_p3));
    sub_ln369_fu_1065_p2 <= std_logic_vector(unsigned(ap_const_lv14_0) - unsigned(trunc_ln4_fu_1047_p4));
    sub_ln371_1_fu_1125_p2 <= std_logic_vector(unsigned(ap_const_lv28_0) - unsigned(zext_ln371_fu_1121_p1));
    sub_ln371_2_fu_1164_p2 <= std_logic_vector(unsigned(ap_const_lv3_0) - unsigned(zext_ln371_2_fu_1160_p1));
    sub_ln371_3_fu_1215_p2 <= std_logic_vector(unsigned(ap_const_lv2_0) - unsigned(trunc_ln371_3_fu_1191_p1));
    sub_ln371_4_fu_1233_p2 <= std_logic_vector(unsigned(ap_const_lv4_0) - unsigned(zext_ln371_4_fu_1229_p1));
    sub_ln371_fu_1105_p2 <= std_logic_vector(unsigned(ap_const_lv28_0) - unsigned(sext_ln336_fu_1040_p1));
    sub_ln372_1_fu_1285_p2 <= std_logic_vector(unsigned(ap_const_lv4_0) - unsigned(zext_ln372_1_fu_1281_p1));
    sub_ln372_fu_1267_p2 <= std_logic_vector(unsigned(ap_const_lv2_0) - unsigned(trunc_ln371_fu_1145_p1));
    tmp_11_fu_802_p3 <= r_V_fu_790_p2(24 downto 24);
    tmp_16_fu_927_p3 <= r_V_2_fu_915_p2(24 downto 24);
    tmp_19_fu_1550_p3 <= result_V_reg_1822_pp0_iter12_reg(31 downto 31);
    tmp_20_fu_1601_p3 <= result_V_5_reg_1862_pp0_iter12_reg(31 downto 31);
    tmp_21_fu_1057_p3 <= result_V_5_fu_1026_p3(31 downto 31);
    tmp_23_fu_1195_p3 <= add_ln371_fu_1185_p2(28 downto 28);
    tmp_24_fu_1247_p3 <= select_ln371_fu_1138_p3(27 downto 27);
    tmp_3_fu_635_p4 <= mapY_data3_dout(30 downto 23);
    tmp_4_fu_581_p4 <= bitcast_ln348(30 downto 23);
    tmp_6_fu_661_p4 <= mapX_data2_dout(30 downto 23);
    tmp_7_fu_597_p4 <= bitcast_ln349(30 downto 23);
    tmp_9_fu_814_p4 <= r_V_1_fu_796_p2(55 downto 24);
    tmp_fu_1647_p4 <= ret_V_fu_1643_p2(17 downto 10);
    tmp_s_fu_939_p4 <= r_V_3_fu_921_p2(55 downto 24);
    tobool428_i_fu_1394_p2 <= "0" when (p_and_t1_fu_1305_p3 = ap_const_lv2_0) else "1";
    tobool437_i_fu_1299_p2 <= "0" when (trunc_ln371_2_fu_1177_p1 = ap_const_lv2_0) else "1";
    trunc_ln315_fu_571_p1 <= ap_sig_allocacmp_j_1(1 - 1 downto 0);
    trunc_ln348_fu_645_p1 <= mapY_data3_dout(23 - 1 downto 0);
    trunc_ln349_fu_671_p1 <= mapX_data2_dout(23 - 1 downto 0);
    trunc_ln369_2_fu_1071_p4 <= sub_ln369_fu_1065_p2(13 downto 1);
    trunc_ln369_3_fu_1087_p4 <= result_V_5_fu_1026_p3(18 downto 6);
    trunc_ln371_2_fu_1177_p1 <= select_ln371_1_fu_1170_p3(2 - 1 downto 0);
    trunc_ln371_3_fu_1191_p1 <= add_ln371_fu_1185_p2(2 - 1 downto 0);
    trunc_ln371_fu_1145_p1 <= select_ln371_fu_1138_p3(2 - 1 downto 0);
    trunc_ln4_fu_1047_p4 <= result_V_5_fu_1026_p3(18 downto 5);
    ush_1_fu_899_p3 <= 
        sext_ln1512_1_fu_895_p1 when (isNeg_1_fu_881_p3(0) = '1') else 
        add_ln346_1_fu_875_p2;
    ush_fu_774_p3 <= 
        sext_ln1512_fu_770_p1 when (isNeg_fu_756_p3(0) = '1') else 
        add_ln346_fu_750_p2;
    val_4_fu_824_p3 <= 
        zext_ln818_fu_810_p1 when (isNeg_fu_756_p3(0) = '1') else 
        tmp_9_fu_814_p4;
    val_5_fu_949_p3 <= 
        zext_ln818_1_fu_935_p1 when (isNeg_1_fu_881_p3(0) = '1') else 
        tmp_s_fu_939_p4;
    x_fl_fu_625_p1 <= mapX_data2_dout;
    xa0_fu_1329_p2 <= std_logic_vector(unsigned(xa1_reg_1889) + unsigned(sext_ln369_fu_1325_p1));
    xa1_fu_1097_p3 <= 
        sub_ln369_1_fu_1081_p2 when (tmp_21_fu_1057_p3(0) = '1') else 
        trunc_ln369_3_fu_1087_p4;
    xor_ln348_fu_1557_p2 <= (tmp_19_fu_1550_p3 xor ap_const_lv1_1);
    xor_ln349_fu_1608_p2 <= (tmp_20_fu_1601_p3 xor ap_const_lv1_1);
    xs_exp_V_1_fu_843_p4 <= data_V_1_fu_832_p1(30 downto 23);
    xs_exp_V_fu_718_p4 <= data_V_fu_707_p1(30 downto 23);
    y_fl_fu_630_p1 <= mapY_data3_dout;
    ya0_fu_1239_p3 <= 
        sub_ln371_4_fu_1233_p2 when (tmp_23_fu_1195_p3(0) = '1') else 
        zext_ln371_3_fu_1211_p1;
    ya1_fu_1291_p3 <= 
        sub_ln372_1_fu_1285_p2 when (tmp_24_fu_1247_p3(0) = '1') else 
        zext_ln372_fu_1263_p1;
    ynext_fu_1545_p2 <= std_logic_vector(signed(sext_ln336_reg_1872_pp0_iter12_reg) + signed(ap_const_lv28_1));
    zext_ln1488_1_fu_911_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln1488_1_fu_907_p1),79));
    zext_ln1488_fu_786_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln1488_fu_782_p1),79));
    zext_ln15_1_fu_867_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mantissa_1_fu_857_p4),79));
    zext_ln15_fu_742_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mantissa_fu_732_p4),79));
    zext_ln315_fu_618_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln315_reg_1736),64));
    zext_ln346_1_fu_871_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xs_exp_V_1_fu_843_p4),9));
    zext_ln346_fu_746_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xs_exp_V_fu_718_p4),9));
    zext_ln348_1_fu_1540_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln339_1_fu_1531_p2),64));
    zext_ln348_fu_1536_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln336_1_reg_1838_pp0_iter11_reg),64));
    zext_ln371_1_fu_1134_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln371_fu_1131_p1),28));
    zext_ln371_2_fu_1160_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_and_f9_fu_1153_p3),3));
    zext_ln371_3_fu_1211_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_and_f3_fu_1203_p3),4));
    zext_ln371_4_fu_1229_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_and_t5_fu_1221_p3),4));
    zext_ln371_fu_1121_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln371_1_fu_1111_p4),28));
    zext_ln372_1_fu_1281_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_and_t_fu_1273_p3),4));
    zext_ln372_fu_1263_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_and_f_fu_1255_p3),4));
    zext_ln818_1_fu_935_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_16_fu_927_p3),32));
    zext_ln818_fu_810_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_11_fu_802_p3),32));
end behav;
