// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module remap_accel_MatStream2AxiStream_2_Pipeline_MMIterOutRow_MMIterOutCol (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        imgOutput_data4_dout,
        imgOutput_data4_num_data_valid,
        imgOutput_data4_fifo_cap,
        imgOutput_data4_empty_n,
        imgOutput_data4_read,
        ldata1_din,
        ldata1_num_data_valid,
        ldata1_fifo_cap,
        ldata1_full_n,
        ldata1_write,
        bound,
        strideBased_cols_bound_per_npc_V,
        op2_assign,
        last_blk_width_load,
        cols_bound_per_npc_load,
        localbuffer_V_3_out,
        localbuffer_V_3_out_ap_vld,
        filled_V_1_out,
        filled_V_1_out_ap_vld,
        ap_ext_blocking_n,
        ap_str_blocking_n,
        ap_int_blocking_n
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [7:0] imgOutput_data4_dout;
input  [1:0] imgOutput_data4_num_data_valid;
input  [1:0] imgOutput_data4_fifo_cap;
input   imgOutput_data4_empty_n;
output   imgOutput_data4_read;
output  [7:0] ldata1_din;
input  [1:0] ldata1_num_data_valid;
input  [1:0] ldata1_fifo_cap;
input   ldata1_full_n;
output   ldata1_write;
input  [31:0] bound;
input  [15:0] strideBased_cols_bound_per_npc_V;
input  [31:0] op2_assign;
input  [3:0] last_blk_width_load;
input  [31:0] cols_bound_per_npc_load;
output  [7:0] localbuffer_V_3_out;
output   localbuffer_V_3_out_ap_vld;
output  [3:0] filled_V_1_out;
output   filled_V_1_out_ap_vld;
output   ap_ext_blocking_n;
output   ap_str_blocking_n;
output   ap_int_blocking_n;

reg ap_idle;
reg imgOutput_data4_read;
reg ldata1_write;
reg localbuffer_V_3_out_ap_vld;
reg filled_V_1_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
reg   [0:0] icmp_ln1027_reg_450;
reg   [0:0] icmp_ln1027_2_reg_454;
reg    ap_predicate_op53_read_state3;
reg   [0:0] icmp_ln1027_3_reg_463;
reg    ap_predicate_op60_write_state3;
reg    ap_block_state3_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln1027_fu_199_p2;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    imgOutput_data4_blk_n;
wire    ap_block_pp0_stage0;
reg    ldata1_blk_n;
reg    ap_block_pp0_stage0_11001;
reg   [3:0] filled_V_3_reg_445;
wire   [0:0] icmp_ln1027_2_fu_247_p2;
wire   [4:0] zext_ln930_1_fu_252_p1;
reg   [4:0] zext_ln930_1_reg_458;
wire   [0:0] icmp_ln1027_3_fu_262_p2;
reg   [3:0] ap_phi_mux_conv3_i12_i_i933_pn_phi_fu_154_p4;
wire   [3:0] xor_ln186_fu_268_p2;
wire   [3:0] ap_phi_reg_pp0_iter1_conv3_i12_i_i933_pn_reg_151;
wire   [3:0] xf_bits_per_clock_fu_235_p3;
reg   [7:0] ap_phi_mux_val_V_1_phi_fu_164_p4;
reg   [7:0] ap_phi_reg_pp0_iter2_val_V_1_reg_160;
wire   [7:0] ap_phi_reg_pp0_iter0_val_V_1_reg_160;
reg   [7:0] ap_phi_reg_pp0_iter1_val_V_1_reg_160;
reg   [3:0] filled_V_fu_78;
wire   [3:0] filled_next_fu_275_p2;
wire    ap_loop_init;
reg   [7:0] localbuffer_V_fu_82;
wire   [7:0] r_V_14_fu_368_p3;
wire   [7:0] ret_V_fu_314_p2;
reg   [15:0] j_V_fu_86;
wire   [15:0] add_ln840_fu_281_p2;
reg   [31:0] indvar_flatten_fu_90;
wire   [31:0] add_ln1027_fu_204_p2;
reg    ap_block_pp0_stage0_01001;
wire   [0:0] icmp_ln1027_1_fu_213_p2;
wire   [15:0] select_ln1295_fu_218_p3;
wire   [31:0] zext_ln1027_fu_226_p1;
wire   [0:0] bLast_fu_230_p2;
wire   [4:0] zext_ln1314_fu_243_p1;
wire   [4:0] sub_ln1325_fu_256_p2;
wire   [7:0] filled_V_3cast_fu_305_p1;
wire   [7:0] shl_ln930_fu_308_p2;
wire  signed [4:0] ret_V_1_fu_321_p2;
wire   [2:0] trunc_ln1496_fu_326_p1;
wire   [2:0] sub_ln553_fu_342_p2;
wire   [7:0] zext_ln930_3_fu_348_p1;
wire  signed [31:0] sext_ln455_fu_338_p1;
wire   [7:0] sext_ln455cast_fu_358_p1;
wire   [0:0] p_Result_s_fu_330_p3;
wire   [7:0] shl_ln930_1_fu_352_p2;
wire   [7:0] lshr_ln948_fu_362_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_int_blocking_cur_n;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_124;
reg    ap_condition_364;
reg    ap_condition_367;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_done_reg = 1'b0;
end

remap_accel_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter1_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_124)) begin
        if (((icmp_ln1027_fu_199_p2 == 1'd0) & (icmp_ln1027_2_fu_247_p2 == 1'd0))) begin
            ap_phi_reg_pp0_iter2_val_V_1_reg_160 <= 8'd0;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter2_val_V_1_reg_160 <= ap_phi_reg_pp0_iter1_val_V_1_reg_160;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            filled_V_fu_78 <= 4'd0;
        end else if (((icmp_ln1027_fu_199_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            filled_V_fu_78 <= filled_next_fu_275_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_90 <= 32'd0;
        end else if (((icmp_ln1027_fu_199_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            indvar_flatten_fu_90 <= add_ln1027_fu_204_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            j_V_fu_86 <= 16'd0;
        end else if (((icmp_ln1027_fu_199_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            j_V_fu_86 <= add_ln840_fu_281_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            localbuffer_V_fu_82 <= 8'd0;
        end else if ((1'b1 == ap_condition_367)) begin
            localbuffer_V_fu_82 <= ret_V_fu_314_p2;
        end else if ((1'b1 == ap_condition_364)) begin
            localbuffer_V_fu_82 <= r_V_14_fu_368_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_val_V_1_reg_160 <= ap_phi_reg_pp0_iter0_val_V_1_reg_160;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        filled_V_3_reg_445 <= filled_V_fu_78;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1027_fu_199_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln1027_2_reg_454 <= icmp_ln1027_2_fu_247_p2;
        icmp_ln1027_3_reg_463 <= icmp_ln1027_3_fu_262_p2;
        zext_ln930_1_reg_458[3 : 0] <= zext_ln930_1_fu_252_p1[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln1027_reg_450 <= icmp_ln1027_fu_199_p2;
    end
end

always @ (*) begin
    if (((icmp_ln1027_fu_199_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln1027_fu_199_p2 == 1'd0)) begin
        if ((icmp_ln1027_3_fu_262_p2 == 1'd1)) begin
            ap_phi_mux_conv3_i12_i_i933_pn_phi_fu_154_p4 = xf_bits_per_clock_fu_235_p3;
        end else if ((icmp_ln1027_3_fu_262_p2 == 1'd0)) begin
            ap_phi_mux_conv3_i12_i_i933_pn_phi_fu_154_p4 = xor_ln186_fu_268_p2;
        end else begin
            ap_phi_mux_conv3_i12_i_i933_pn_phi_fu_154_p4 = ap_phi_reg_pp0_iter1_conv3_i12_i_i933_pn_reg_151;
        end
    end else begin
        ap_phi_mux_conv3_i12_i_i933_pn_phi_fu_154_p4 = ap_phi_reg_pp0_iter1_conv3_i12_i_i933_pn_reg_151;
    end
end

always @ (*) begin
    if (((icmp_ln1027_2_reg_454 == 1'd1) & (icmp_ln1027_reg_450 == 1'd0))) begin
        ap_phi_mux_val_V_1_phi_fu_164_p4 = imgOutput_data4_dout;
    end else begin
        ap_phi_mux_val_V_1_phi_fu_164_p4 = ap_phi_reg_pp0_iter2_val_V_1_reg_160;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln1027_fu_199_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        filled_V_1_out_ap_vld = 1'b1;
    end else begin
        filled_V_1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_predicate_op53_read_state3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        imgOutput_data4_blk_n = imgOutput_data4_empty_n;
    end else begin
        imgOutput_data4_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op53_read_state3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        imgOutput_data4_read = 1'b1;
    end else begin
        imgOutput_data4_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_predicate_op60_write_state3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        ldata1_blk_n = ldata1_full_n;
    end else begin
        ldata1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op60_write_state3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        ldata1_write = 1'b1;
    end else begin
        ldata1_write = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln1027_fu_199_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        localbuffer_V_3_out_ap_vld = 1'b1;
    end else begin
        localbuffer_V_3_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln1027_fu_204_p2 = (indvar_flatten_fu_90 + 32'd1);

assign add_ln840_fu_281_p2 = (select_ln1295_fu_218_p3 + 16'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_enable_reg_pp0_iter2 == 1'b1) & (((ap_predicate_op60_write_state3 == 1'b1) & (ldata1_full_n == 1'b0)) | ((ap_predicate_op53_read_state3 == 1'b1) & (imgOutput_data4_empty_n == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter2 == 1'b1) & (((ap_predicate_op60_write_state3 == 1'b1) & (ldata1_full_n == 1'b0)) | ((ap_predicate_op53_read_state3 == 1'b1) & (imgOutput_data4_empty_n == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter2 == 1'b1) & (((ap_predicate_op60_write_state3 == 1'b1) & (ldata1_full_n == 1'b0)) | ((ap_predicate_op53_read_state3 == 1'b1) & (imgOutput_data4_empty_n == 1'b0))));
end

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter2 = (((ap_predicate_op60_write_state3 == 1'b1) & (ldata1_full_n == 1'b0)) | ((ap_predicate_op53_read_state3 == 1'b1) & (imgOutput_data4_empty_n == 1'b0)));
end

always @ (*) begin
    ap_condition_124 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_condition_364 = ((icmp_ln1027_3_reg_463 == 1'd0) & (icmp_ln1027_reg_450 == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1));
end

always @ (*) begin
    ap_condition_367 = ((icmp_ln1027_3_reg_463 == 1'd1) & (icmp_ln1027_reg_450 == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_ext_blocking_n = (1'b1 & 1'b1);

assign ap_int_blocking_cur_n = (ldata1_blk_n & imgOutput_data4_blk_n);

assign ap_int_blocking_n = (ap_int_blocking_cur_n & 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter1_stage0;

assign ap_phi_reg_pp0_iter0_val_V_1_reg_160 = 'bx;

assign ap_phi_reg_pp0_iter1_conv3_i12_i_i933_pn_reg_151 = 'bx;

always @ (*) begin
    ap_predicate_op53_read_state3 = ((icmp_ln1027_2_reg_454 == 1'd1) & (icmp_ln1027_reg_450 == 1'd0));
end

always @ (*) begin
    ap_predicate_op60_write_state3 = ((icmp_ln1027_3_reg_463 == 1'd0) & (icmp_ln1027_reg_450 == 1'd0));
end

assign ap_str_blocking_n = (1'b1 & 1'b1);

assign bLast_fu_230_p2 = ((op2_assign == zext_ln1027_fu_226_p1) ? 1'b1 : 1'b0);

assign filled_V_1_out = filled_V_fu_78;

assign filled_V_3cast_fu_305_p1 = filled_V_3_reg_445;

assign filled_next_fu_275_p2 = (ap_phi_mux_conv3_i12_i_i933_pn_phi_fu_154_p4 + filled_V_fu_78);

assign icmp_ln1027_1_fu_213_p2 = ((j_V_fu_86 == strideBased_cols_bound_per_npc_V) ? 1'b1 : 1'b0);

assign icmp_ln1027_2_fu_247_p2 = (($signed(zext_ln1027_fu_226_p1) < $signed(cols_bound_per_npc_load)) ? 1'b1 : 1'b0);

assign icmp_ln1027_3_fu_262_p2 = (($signed(sub_ln1325_fu_256_p2) > $signed(zext_ln930_1_fu_252_p1)) ? 1'b1 : 1'b0);

assign icmp_ln1027_fu_199_p2 = ((indvar_flatten_fu_90 == bound) ? 1'b1 : 1'b0);

assign ldata1_din = (shl_ln930_fu_308_p2 | localbuffer_V_fu_82);

assign localbuffer_V_3_out = localbuffer_V_fu_82;

assign lshr_ln948_fu_362_p2 = ap_phi_mux_val_V_1_phi_fu_164_p4 >> sext_ln455cast_fu_358_p1;

assign p_Result_s_fu_330_p3 = ret_V_1_fu_321_p2[32'd4];

assign r_V_14_fu_368_p3 = ((p_Result_s_fu_330_p3[0:0] == 1'b1) ? shl_ln930_1_fu_352_p2 : lshr_ln948_fu_362_p2);

assign ret_V_1_fu_321_p2 = (5'd8 - zext_ln930_1_reg_458);

assign ret_V_fu_314_p2 = (shl_ln930_fu_308_p2 | localbuffer_V_fu_82);

assign select_ln1295_fu_218_p3 = ((icmp_ln1027_1_fu_213_p2[0:0] == 1'b1) ? 16'd0 : j_V_fu_86);

assign sext_ln455_fu_338_p1 = ret_V_1_fu_321_p2;

assign sext_ln455cast_fu_358_p1 = sext_ln455_fu_338_p1[7:0];

assign shl_ln930_1_fu_352_p2 = ap_phi_mux_val_V_1_phi_fu_164_p4 << zext_ln930_3_fu_348_p1;

assign shl_ln930_fu_308_p2 = ap_phi_mux_val_V_1_phi_fu_164_p4 << filled_V_3cast_fu_305_p1;

assign sub_ln1325_fu_256_p2 = (5'd8 - zext_ln1314_fu_243_p1);

assign sub_ln553_fu_342_p2 = (3'd0 - trunc_ln1496_fu_326_p1);

assign trunc_ln1496_fu_326_p1 = ret_V_1_fu_321_p2[2:0];

assign xf_bits_per_clock_fu_235_p3 = ((bLast_fu_230_p2[0:0] == 1'b1) ? last_blk_width_load : 4'd8);

assign xor_ln186_fu_268_p2 = (xf_bits_per_clock_fu_235_p3 ^ 4'd8);

assign zext_ln1027_fu_226_p1 = select_ln1295_fu_218_p3;

assign zext_ln1314_fu_243_p1 = xf_bits_per_clock_fu_235_p3;

assign zext_ln930_1_fu_252_p1 = filled_V_fu_78;

assign zext_ln930_3_fu_348_p1 = sub_ln553_fu_342_p2;

always @ (posedge ap_clk) begin
    zext_ln930_1_reg_458[4] <= 1'b0;
end

endmodule //remap_accel_MatStream2AxiStream_2_Pipeline_MMIterOutRow_MMIterOutCol
