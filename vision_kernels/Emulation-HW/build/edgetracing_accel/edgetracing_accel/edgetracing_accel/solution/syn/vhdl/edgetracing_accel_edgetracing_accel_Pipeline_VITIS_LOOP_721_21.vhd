-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity edgetracing_accel_edgetracing_accel_Pipeline_VITIS_LOOP_721_21 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    p_dst2_data_din : OUT STD_LOGIC_VECTOR (63 downto 0);
    p_dst2_data_full_n : IN STD_LOGIC;
    p_dst2_data_write : OUT STD_LOGIC;
    m_axi_gmem4_AWVALID : OUT STD_LOGIC;
    m_axi_gmem4_AWREADY : IN STD_LOGIC;
    m_axi_gmem4_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem4_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem4_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem4_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem4_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem4_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem4_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem4_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem4_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem4_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem4_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem4_WVALID : OUT STD_LOGIC;
    m_axi_gmem4_WREADY : IN STD_LOGIC;
    m_axi_gmem4_WDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem4_WSTRB : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem4_WLAST : OUT STD_LOGIC;
    m_axi_gmem4_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem4_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem4_ARVALID : OUT STD_LOGIC;
    m_axi_gmem4_ARREADY : IN STD_LOGIC;
    m_axi_gmem4_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem4_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem4_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem4_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem4_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem4_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem4_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem4_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem4_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem4_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem4_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem4_RVALID : IN STD_LOGIC;
    m_axi_gmem4_RREADY : OUT STD_LOGIC;
    m_axi_gmem4_RDATA : IN STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem4_RLAST : IN STD_LOGIC;
    m_axi_gmem4_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem4_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
    m_axi_gmem4_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem4_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem4_BVALID : IN STD_LOGIC;
    m_axi_gmem4_BREADY : OUT STD_LOGIC;
    m_axi_gmem4_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem4_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem4_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    mul_ln50 : IN STD_LOGIC_VECTOR (18 downto 0);
    zext_ln715_1 : IN STD_LOGIC_VECTOR (7 downto 0);
    packcols_1 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_cast12 : IN STD_LOGIC_VECTOR (10 downto 0);
    img_out : IN STD_LOGIC_VECTOR (63 downto 0);
    ap_ext_blocking_n : OUT STD_LOGIC;
    ap_str_blocking_n : OUT STD_LOGIC;
    ap_int_blocking_n : OUT STD_LOGIC );
end;


architecture behav of edgetracing_accel_edgetracing_accel_Pipeline_VITIS_LOOP_721_21 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_ST_fsm_pp0_stage4 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_ST_fsm_pp0_stage5 : STD_LOGIC_VECTOR (7 downto 0) := "00100000";
    constant ap_ST_fsm_pp0_stage6 : STD_LOGIC_VECTOR (7 downto 0) := "01000000";
    constant ap_ST_fsm_pp0_stage7 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv19_0 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000000";
    constant ap_const_lv19_1 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000001";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage7 : signal is "none";
    signal ap_block_state8_pp0_stage7_iter0 : BOOLEAN;
    signal ap_block_state16_pp0_stage7_iter1 : BOOLEAN;
    signal ap_block_state24_pp0_stage7_iter2 : BOOLEAN;
    signal ap_block_state32_pp0_stage7_iter3 : BOOLEAN;
    signal ap_block_state40_pp0_stage7_iter4 : BOOLEAN;
    signal ap_block_state48_pp0_stage7_iter5 : BOOLEAN;
    signal ap_block_state56_pp0_stage7_iter6 : BOOLEAN;
    signal ap_block_state64_pp0_stage7_iter7 : BOOLEAN;
    signal ap_block_state72_pp0_stage7_iter8 : BOOLEAN;
    signal icmp_ln720_reg_540 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln720_reg_540_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state80_pp0_stage7_iter9 : BOOLEAN;
    signal ap_block_pp0_stage7_subdone : BOOLEAN;
    signal ap_condition_exit_pp0_iter0_stage7 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal gmem4_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal gmem4_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage5 : signal is "none";
    signal ap_block_pp0_stage5 : BOOLEAN;
    signal or_ln720_reg_544 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_dst2_data_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage4 : signal is "none";
    signal ap_block_pp0_stage4 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage6 : signal is "none";
    signal ap_block_pp0_stage6 : BOOLEAN;
    signal ap_block_pp0_stage7 : BOOLEAN;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal icmp_ln720_reg_540_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal first_iter_1_reg_176 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state25_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state33_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state41_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state49_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state57_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state65_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state73_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state81_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal p_cast12_cast_fu_195_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal p_cast12_cast_reg_530 : STD_LOGIC_VECTOR (21 downto 0);
    signal zext_ln715_1_cast_fu_199_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln715_1_cast_reg_535 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln720_fu_224_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state10_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_state18_pp0_stage1_iter2 : BOOLEAN;
    signal ap_block_state26_pp0_stage1_iter3 : BOOLEAN;
    signal ap_block_state34_pp0_stage1_iter4 : BOOLEAN;
    signal ap_block_state42_pp0_stage1_iter5 : BOOLEAN;
    signal ap_block_state50_pp0_stage1_iter6 : BOOLEAN;
    signal ap_block_state58_pp0_stage1_iter7 : BOOLEAN;
    signal ap_block_state66_pp0_stage1_iter8 : BOOLEAN;
    signal ap_block_state74_pp0_stage1_iter9 : BOOLEAN;
    signal ap_block_state82_pp0_stage1_iter10 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal icmp_ln720_reg_540_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln720_reg_540_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln720_reg_540_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln720_reg_540_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln720_reg_540_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln720_reg_540_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln720_reg_540_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln720_reg_540_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln720_fu_243_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln721_1_mid2_v_reg_553 : STD_LOGIC_VECTOR (60 downto 0);
    signal ap_block_state5_pp0_stage4_iter0 : BOOLEAN;
    signal ap_block_state13_pp0_stage4_iter1 : BOOLEAN;
    signal ap_block_state21_pp0_stage4_iter2 : BOOLEAN;
    signal ap_block_state29_pp0_stage4_iter3 : BOOLEAN;
    signal ap_block_state37_pp0_stage4_iter4 : BOOLEAN;
    signal ap_block_state45_pp0_stage4_iter5 : BOOLEAN;
    signal ap_block_state53_pp0_stage4_iter6 : BOOLEAN;
    signal ap_block_state61_pp0_stage4_iter7 : BOOLEAN;
    signal ap_block_state69_pp0_stage4_iter8 : BOOLEAN;
    signal ap_block_state77_pp0_stage4_iter9 : BOOLEAN;
    signal ap_block_pp0_stage4_11001 : BOOLEAN;
    signal sext_ln720_fu_314_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln720_reg_558 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_state6_pp0_stage5_iter0 : BOOLEAN;
    signal ap_predicate_op134_readreq_state6 : BOOLEAN;
    signal ap_block_state6_io : BOOLEAN;
    signal ap_block_state14_pp0_stage5_iter1 : BOOLEAN;
    signal ap_block_state22_pp0_stage5_iter2 : BOOLEAN;
    signal ap_block_state30_pp0_stage5_iter3 : BOOLEAN;
    signal ap_block_state38_pp0_stage5_iter4 : BOOLEAN;
    signal ap_block_state46_pp0_stage5_iter5 : BOOLEAN;
    signal ap_block_state54_pp0_stage5_iter6 : BOOLEAN;
    signal ap_block_state62_pp0_stage5_iter7 : BOOLEAN;
    signal ap_block_state70_pp0_stage5_iter8 : BOOLEAN;
    signal ap_block_state78_pp0_stage5_iter9 : BOOLEAN;
    signal ap_block_pp0_stage5_11001 : BOOLEAN;
    signal sext_ln720_reg_558_pp0_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln720_reg_558_pp0_iter2_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln720_reg_558_pp0_iter3_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln720_reg_558_pp0_iter4_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln720_reg_558_pp0_iter5_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln720_reg_558_pp0_iter6_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln720_reg_558_pp0_iter7_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln720_reg_558_pp0_iter8_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_188_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln729_fu_318_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln729_reg_568 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_state4_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_state12_pp0_stage3_iter1 : BOOLEAN;
    signal ap_block_state20_pp0_stage3_iter2 : BOOLEAN;
    signal ap_block_state28_pp0_stage3_iter3 : BOOLEAN;
    signal ap_block_state36_pp0_stage3_iter4 : BOOLEAN;
    signal ap_block_state44_pp0_stage3_iter5 : BOOLEAN;
    signal ap_block_state52_pp0_stage3_iter6 : BOOLEAN;
    signal ap_block_state60_pp0_stage3_iter7 : BOOLEAN;
    signal ap_block_state68_pp0_stage3_iter8 : BOOLEAN;
    signal ap_block_state76_pp0_stage3_iter9 : BOOLEAN;
    signal ap_block_state84_pp0_stage3_iter10 : BOOLEAN;
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal trunc_ln729_1_reg_573 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln729_2_reg_578 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln729_3_reg_583 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln729_4_reg_588 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln729_5_reg_593 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln729_6_reg_598 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln729_7_reg_603 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_phi_mux_first_iter_1_phi_fu_180_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal c_fu_116 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln721_fu_273_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_fu_120 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln720_fu_255_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal indvar_flatten19_fu_124 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln720_fu_229_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal p_Result_s_fu_392_p5 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage4_01001 : BOOLEAN;
    signal p_Result_694_s_fu_404_p5 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage5_01001 : BOOLEAN;
    signal p_Result_694_1_fu_416_p5 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_state7_pp0_stage6_iter0 : BOOLEAN;
    signal ap_block_state15_pp0_stage6_iter1 : BOOLEAN;
    signal ap_block_state23_pp0_stage6_iter2 : BOOLEAN;
    signal ap_block_state31_pp0_stage6_iter3 : BOOLEAN;
    signal ap_block_state39_pp0_stage6_iter4 : BOOLEAN;
    signal ap_block_state47_pp0_stage6_iter5 : BOOLEAN;
    signal ap_block_state55_pp0_stage6_iter6 : BOOLEAN;
    signal ap_block_state63_pp0_stage6_iter7 : BOOLEAN;
    signal ap_block_state71_pp0_stage6_iter8 : BOOLEAN;
    signal ap_block_state79_pp0_stage6_iter9 : BOOLEAN;
    signal ap_block_pp0_stage6_01001 : BOOLEAN;
    signal p_Result_694_2_fu_428_p5 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage7_01001 : BOOLEAN;
    signal p_Result_694_3_fu_440_p5 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal p_Result_694_4_fu_452_p5 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1_01001 : BOOLEAN;
    signal p_Result_694_5_fu_464_p5 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_state3_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_state11_pp0_stage2_iter1 : BOOLEAN;
    signal ap_block_state19_pp0_stage2_iter2 : BOOLEAN;
    signal ap_block_state27_pp0_stage2_iter3 : BOOLEAN;
    signal ap_block_state35_pp0_stage2_iter4 : BOOLEAN;
    signal ap_block_state43_pp0_stage2_iter5 : BOOLEAN;
    signal ap_block_state51_pp0_stage2_iter6 : BOOLEAN;
    signal ap_block_state59_pp0_stage2_iter7 : BOOLEAN;
    signal ap_block_state67_pp0_stage2_iter8 : BOOLEAN;
    signal ap_block_state75_pp0_stage2_iter9 : BOOLEAN;
    signal ap_block_state83_pp0_stage2_iter10 : BOOLEAN;
    signal ap_block_pp0_stage2_01001 : BOOLEAN;
    signal p_Result_694_6_fu_476_p5 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage3_01001 : BOOLEAN;
    signal ap_block_pp0_stage6_11001 : BOOLEAN;
    signal ap_block_pp0_stage7_11001 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal icmp_ln721_fu_238_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln720_1_fu_249_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln721_fu_267_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_488_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal zext_ln720_1_fu_296_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln720_2_fu_299_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_488_p0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_488_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_488_ce : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_condition_exit_pp0_iter9_stage3 : STD_LOGIC;
    signal ap_idle_pp0_0to8 : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter9_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_idle_pp0_1to10 : STD_LOGIC;
    signal ap_done_pending_pp0 : STD_LOGIC;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_block_pp0_stage4_subdone : BOOLEAN;
    signal ap_block_pp0_stage5_subdone : BOOLEAN;
    signal ap_block_pp0_stage6_subdone : BOOLEAN;
    signal ap_ext_blocking_cur_n : STD_LOGIC;
    signal ap_int_blocking_cur_n : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal grp_fu_488_p00 : STD_LOGIC_VECTOR (21 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component edgetracing_accel_mul_mul_11ns_11ns_22_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (10 downto 0);
        din1 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (21 downto 0) );
    end component;


    component edgetracing_accel_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mul_mul_11ns_11ns_22_4_1_U10 : component edgetracing_accel_mul_mul_11ns_11ns_22_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 11,
        din1_WIDTH => 11,
        dout_WIDTH => 22)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_488_p0,
        din1 => grp_fu_488_p1,
        ce => grp_fu_488_ce,
        dout => grp_fu_488_p2);

    flow_control_loop_pipe_sequential_init_U : component edgetracing_accel_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage7,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_loop_exit_ready_pp0_iter9_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage7)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage7_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage7_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage7_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage7_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage7_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage7_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage7_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage7_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage7_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage7_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    ap_loop_exit_ready_pp0_iter1_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to8 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter9_stage3))) then 
                ap_loop_exit_ready_pp0_iter1_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter2_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to8 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter9_stage3))) then 
                ap_loop_exit_ready_pp0_iter2_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter3_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to8 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter9_stage3))) then 
                ap_loop_exit_ready_pp0_iter3_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter4_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to8 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter9_stage3))) then 
                ap_loop_exit_ready_pp0_iter4_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter5_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to8 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter9_stage3))) then 
                ap_loop_exit_ready_pp0_iter5_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter6_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to8 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter9_stage3))) then 
                ap_loop_exit_ready_pp0_iter6_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter7_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to8 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter9_stage3))) then 
                ap_loop_exit_ready_pp0_iter7_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter8_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to8 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter9_stage3))) then 
                ap_loop_exit_ready_pp0_iter8_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter9_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to8 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter9_stage3))) then 
                ap_loop_exit_ready_pp0_iter9_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
                ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
            end if; 
        end if;
    end process;

    c_fu_116_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                c_fu_116 <= ap_const_lv8_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln720_fu_224_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                c_fu_116 <= select_ln721_fu_273_p3;
            end if; 
        end if;
    end process;

    first_iter_1_reg_176_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln720_reg_540 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                first_iter_1_reg_176 <= ap_const_lv1_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                first_iter_1_reg_176 <= ap_const_lv1_1;
            end if; 
        end if;
    end process;

    indvar_flatten19_fu_124_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                indvar_flatten19_fu_124 <= ap_const_lv19_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln720_fu_224_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                indvar_flatten19_fu_124 <= add_ln720_fu_229_p2;
            end if; 
        end if;
    end process;

    r_fu_120_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                r_fu_120 <= ap_const_lv11_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln720_fu_224_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                r_fu_120 <= select_ln720_fu_255_p3;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                icmp_ln720_reg_540 <= icmp_ln720_fu_224_p2;
                icmp_ln720_reg_540_pp0_iter10_reg <= icmp_ln720_reg_540_pp0_iter9_reg;
                icmp_ln720_reg_540_pp0_iter1_reg <= icmp_ln720_reg_540;
                icmp_ln720_reg_540_pp0_iter2_reg <= icmp_ln720_reg_540_pp0_iter1_reg;
                icmp_ln720_reg_540_pp0_iter3_reg <= icmp_ln720_reg_540_pp0_iter2_reg;
                icmp_ln720_reg_540_pp0_iter4_reg <= icmp_ln720_reg_540_pp0_iter3_reg;
                icmp_ln720_reg_540_pp0_iter5_reg <= icmp_ln720_reg_540_pp0_iter4_reg;
                icmp_ln720_reg_540_pp0_iter6_reg <= icmp_ln720_reg_540_pp0_iter5_reg;
                icmp_ln720_reg_540_pp0_iter7_reg <= icmp_ln720_reg_540_pp0_iter6_reg;
                icmp_ln720_reg_540_pp0_iter8_reg <= icmp_ln720_reg_540_pp0_iter7_reg;
                icmp_ln720_reg_540_pp0_iter9_reg <= icmp_ln720_reg_540_pp0_iter8_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln720_fu_224_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                or_ln720_reg_544 <= or_ln720_fu_243_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                    p_cast12_cast_reg_530(10 downto 0) <= p_cast12_cast_fu_195_p1(10 downto 0);
                    zext_ln715_1_cast_reg_535(7 downto 0) <= zext_ln715_1_cast_fu_199_p1(7 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (icmp_ln720_reg_540 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then
                sext_ln720_reg_558 <= sext_ln720_fu_314_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then
                sext_ln720_reg_558_pp0_iter1_reg <= sext_ln720_reg_558;
                sext_ln720_reg_558_pp0_iter2_reg <= sext_ln720_reg_558_pp0_iter1_reg;
                sext_ln720_reg_558_pp0_iter3_reg <= sext_ln720_reg_558_pp0_iter2_reg;
                sext_ln720_reg_558_pp0_iter4_reg <= sext_ln720_reg_558_pp0_iter3_reg;
                sext_ln720_reg_558_pp0_iter5_reg <= sext_ln720_reg_558_pp0_iter4_reg;
                sext_ln720_reg_558_pp0_iter6_reg <= sext_ln720_reg_558_pp0_iter5_reg;
                sext_ln720_reg_558_pp0_iter7_reg <= sext_ln720_reg_558_pp0_iter6_reg;
                sext_ln720_reg_558_pp0_iter8_reg <= sext_ln720_reg_558_pp0_iter7_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (icmp_ln720_reg_540 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then
                sext_ln721_1_mid2_v_reg_553 <= add_ln720_2_fu_299_p2(63 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (icmp_ln720_reg_540_pp0_iter9_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then
                trunc_ln729_1_reg_573 <= m_axi_gmem4_RDATA(15 downto 8);
                trunc_ln729_2_reg_578 <= m_axi_gmem4_RDATA(23 downto 16);
                trunc_ln729_3_reg_583 <= m_axi_gmem4_RDATA(31 downto 24);
                trunc_ln729_4_reg_588 <= m_axi_gmem4_RDATA(39 downto 32);
                trunc_ln729_5_reg_593 <= m_axi_gmem4_RDATA(47 downto 40);
                trunc_ln729_6_reg_598 <= m_axi_gmem4_RDATA(55 downto 48);
                trunc_ln729_7_reg_603 <= m_axi_gmem4_RDATA(63 downto 56);
                trunc_ln729_reg_568 <= trunc_ln729_fu_318_p1;
            end if;
        end if;
    end process;
    p_cast12_cast_reg_530(21 downto 11) <= "00000000000";
    zext_ln715_1_cast_reg_535(31 downto 8) <= "000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage7_subdone, ap_block_pp0_stage3_subdone, ap_block_pp0_stage0_subdone, ap_condition_exit_pp0_iter9_stage3, ap_idle_pp0_0to8, ap_idle_pp0_1to10, ap_done_pending_pp0, ap_block_pp0_stage1_subdone, ap_block_pp0_stage2_subdone, ap_block_pp0_stage4_subdone, ap_block_pp0_stage5_subdone, ap_block_pp0_stage6_subdone, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_start_int = ap_const_logic_0) and (ap_done_pending_pp0 = ap_const_logic_0) and (ap_idle_pp0_1to10 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if (((ap_idle_pp0_0to8 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter9_stage3))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_pp0_stage4 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage4_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                end if;
            when ap_ST_fsm_pp0_stage5 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage5_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                end if;
            when ap_ST_fsm_pp0_stage6 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage6_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                end if;
            when ap_ST_fsm_pp0_stage7 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage7_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage7;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXX";
        end case;
    end process;
    add_ln720_1_fu_249_p2 <= std_logic_vector(unsigned(r_fu_120) + unsigned(ap_const_lv11_1));
    add_ln720_2_fu_299_p2 <= std_logic_vector(unsigned(zext_ln720_1_fu_296_p1) + unsigned(img_out));
    add_ln720_fu_229_p2 <= std_logic_vector(unsigned(indvar_flatten19_fu_124) + unsigned(ap_const_lv19_1));
    add_ln721_fu_267_p2 <= std_logic_vector(unsigned(c_fu_116) + unsigned(ap_const_lv8_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage4 <= ap_CS_fsm(4);
    ap_CS_fsm_pp0_stage5 <= ap_CS_fsm(5);
    ap_CS_fsm_pp0_stage6 <= ap_CS_fsm(6);
    ap_CS_fsm_pp0_stage7 <= ap_CS_fsm(7);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter10, p_dst2_data_full_n, icmp_ln720_reg_540_pp0_iter9_reg)
    begin
                ap_block_pp0_stage0_01001 <= ((icmp_ln720_reg_540_pp0_iter9_reg = ap_const_lv1_0) and (p_dst2_data_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter10, p_dst2_data_full_n, icmp_ln720_reg_540_pp0_iter9_reg)
    begin
                ap_block_pp0_stage0_11001 <= ((icmp_ln720_reg_540_pp0_iter9_reg = ap_const_lv1_0) and (p_dst2_data_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter10, p_dst2_data_full_n, icmp_ln720_reg_540_pp0_iter9_reg)
    begin
                ap_block_pp0_stage0_subdone <= ((icmp_ln720_reg_540_pp0_iter9_reg = ap_const_lv1_0) and (p_dst2_data_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1));
    end process;

        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage1_01001_assign_proc : process(ap_enable_reg_pp0_iter10, p_dst2_data_full_n, icmp_ln720_reg_540_pp0_iter9_reg)
    begin
                ap_block_pp0_stage1_01001 <= ((icmp_ln720_reg_540_pp0_iter9_reg = ap_const_lv1_0) and (p_dst2_data_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage1_11001_assign_proc : process(ap_enable_reg_pp0_iter10, p_dst2_data_full_n, icmp_ln720_reg_540_pp0_iter9_reg)
    begin
                ap_block_pp0_stage1_11001 <= ((icmp_ln720_reg_540_pp0_iter9_reg = ap_const_lv1_0) and (p_dst2_data_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage1_subdone_assign_proc : process(ap_enable_reg_pp0_iter10, p_dst2_data_full_n, icmp_ln720_reg_540_pp0_iter9_reg)
    begin
                ap_block_pp0_stage1_subdone <= ((icmp_ln720_reg_540_pp0_iter9_reg = ap_const_lv1_0) and (p_dst2_data_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1));
    end process;

        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage2_01001_assign_proc : process(ap_enable_reg_pp0_iter10, p_dst2_data_full_n, icmp_ln720_reg_540_pp0_iter10_reg)
    begin
                ap_block_pp0_stage2_01001 <= ((p_dst2_data_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (icmp_ln720_reg_540_pp0_iter10_reg = ap_const_lv1_0));
    end process;


    ap_block_pp0_stage2_11001_assign_proc : process(ap_enable_reg_pp0_iter10, p_dst2_data_full_n, icmp_ln720_reg_540_pp0_iter10_reg)
    begin
                ap_block_pp0_stage2_11001 <= ((p_dst2_data_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (icmp_ln720_reg_540_pp0_iter10_reg = ap_const_lv1_0));
    end process;


    ap_block_pp0_stage2_subdone_assign_proc : process(ap_enable_reg_pp0_iter10, p_dst2_data_full_n, icmp_ln720_reg_540_pp0_iter10_reg)
    begin
                ap_block_pp0_stage2_subdone <= ((p_dst2_data_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (icmp_ln720_reg_540_pp0_iter10_reg = ap_const_lv1_0));
    end process;

        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage3_01001_assign_proc : process(ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, p_dst2_data_full_n, icmp_ln720_reg_540_pp0_iter9_reg, m_axi_gmem4_RVALID, icmp_ln720_reg_540_pp0_iter10_reg)
    begin
                ap_block_pp0_stage3_01001 <= (((icmp_ln720_reg_540_pp0_iter9_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (m_axi_gmem4_RVALID = ap_const_logic_0)) or ((p_dst2_data_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (icmp_ln720_reg_540_pp0_iter10_reg = ap_const_lv1_0)));
    end process;


    ap_block_pp0_stage3_11001_assign_proc : process(ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, p_dst2_data_full_n, icmp_ln720_reg_540_pp0_iter9_reg, m_axi_gmem4_RVALID, icmp_ln720_reg_540_pp0_iter10_reg)
    begin
                ap_block_pp0_stage3_11001 <= (((icmp_ln720_reg_540_pp0_iter9_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (m_axi_gmem4_RVALID = ap_const_logic_0)) or ((p_dst2_data_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (icmp_ln720_reg_540_pp0_iter10_reg = ap_const_lv1_0)));
    end process;


    ap_block_pp0_stage3_subdone_assign_proc : process(ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, p_dst2_data_full_n, icmp_ln720_reg_540_pp0_iter9_reg, m_axi_gmem4_RVALID, icmp_ln720_reg_540_pp0_iter10_reg)
    begin
                ap_block_pp0_stage3_subdone <= (((icmp_ln720_reg_540_pp0_iter9_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (m_axi_gmem4_RVALID = ap_const_logic_0)) or ((p_dst2_data_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (icmp_ln720_reg_540_pp0_iter10_reg = ap_const_lv1_0)));
    end process;

        ap_block_pp0_stage4 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage4_01001_assign_proc : process(ap_enable_reg_pp0_iter9, p_dst2_data_full_n, icmp_ln720_reg_540_pp0_iter9_reg)
    begin
                ap_block_pp0_stage4_01001 <= ((icmp_ln720_reg_540_pp0_iter9_reg = ap_const_lv1_0) and (p_dst2_data_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage4_11001_assign_proc : process(ap_enable_reg_pp0_iter9, p_dst2_data_full_n, icmp_ln720_reg_540_pp0_iter9_reg)
    begin
                ap_block_pp0_stage4_11001 <= ((icmp_ln720_reg_540_pp0_iter9_reg = ap_const_lv1_0) and (p_dst2_data_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage4_subdone_assign_proc : process(ap_enable_reg_pp0_iter9, p_dst2_data_full_n, icmp_ln720_reg_540_pp0_iter9_reg)
    begin
                ap_block_pp0_stage4_subdone <= ((icmp_ln720_reg_540_pp0_iter9_reg = ap_const_lv1_0) and (p_dst2_data_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1));
    end process;

        ap_block_pp0_stage5 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage5_01001_assign_proc : process(ap_enable_reg_pp0_iter9, p_dst2_data_full_n, icmp_ln720_reg_540_pp0_iter9_reg)
    begin
                ap_block_pp0_stage5_01001 <= ((icmp_ln720_reg_540_pp0_iter9_reg = ap_const_lv1_0) and (p_dst2_data_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage5_11001_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter9, p_dst2_data_full_n, icmp_ln720_reg_540_pp0_iter9_reg, ap_block_state6_io)
    begin
                ap_block_pp0_stage5_11001 <= (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state6_io)) or ((icmp_ln720_reg_540_pp0_iter9_reg = ap_const_lv1_0) and (p_dst2_data_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage5_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter9, p_dst2_data_full_n, icmp_ln720_reg_540_pp0_iter9_reg, ap_block_state6_io)
    begin
                ap_block_pp0_stage5_subdone <= (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state6_io)) or ((icmp_ln720_reg_540_pp0_iter9_reg = ap_const_lv1_0) and (p_dst2_data_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1)));
    end process;

        ap_block_pp0_stage6 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage6_01001_assign_proc : process(ap_enable_reg_pp0_iter9, p_dst2_data_full_n, icmp_ln720_reg_540_pp0_iter9_reg)
    begin
                ap_block_pp0_stage6_01001 <= ((icmp_ln720_reg_540_pp0_iter9_reg = ap_const_lv1_0) and (p_dst2_data_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage6_11001_assign_proc : process(ap_enable_reg_pp0_iter9, p_dst2_data_full_n, icmp_ln720_reg_540_pp0_iter9_reg)
    begin
                ap_block_pp0_stage6_11001 <= ((icmp_ln720_reg_540_pp0_iter9_reg = ap_const_lv1_0) and (p_dst2_data_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage6_subdone_assign_proc : process(ap_enable_reg_pp0_iter9, p_dst2_data_full_n, icmp_ln720_reg_540_pp0_iter9_reg)
    begin
                ap_block_pp0_stage6_subdone <= ((icmp_ln720_reg_540_pp0_iter9_reg = ap_const_lv1_0) and (p_dst2_data_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1));
    end process;

        ap_block_pp0_stage7 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage7_01001_assign_proc : process(ap_enable_reg_pp0_iter9, p_dst2_data_full_n, icmp_ln720_reg_540_pp0_iter9_reg)
    begin
                ap_block_pp0_stage7_01001 <= ((icmp_ln720_reg_540_pp0_iter9_reg = ap_const_lv1_0) and (p_dst2_data_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage7_11001_assign_proc : process(ap_enable_reg_pp0_iter9, p_dst2_data_full_n, icmp_ln720_reg_540_pp0_iter9_reg)
    begin
                ap_block_pp0_stage7_11001 <= ((icmp_ln720_reg_540_pp0_iter9_reg = ap_const_lv1_0) and (p_dst2_data_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage7_subdone_assign_proc : process(ap_enable_reg_pp0_iter9, p_dst2_data_full_n, icmp_ln720_reg_540_pp0_iter9_reg)
    begin
                ap_block_pp0_stage7_subdone <= ((icmp_ln720_reg_540_pp0_iter9_reg = ap_const_lv1_0) and (p_dst2_data_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1));
    end process;

        ap_block_state10_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage3_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage4_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage5_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage6_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage7_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage2_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp0_stage3_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage4_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp0_stage5_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp0_stage6_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp0_stage7_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state26_pp0_stage1_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state27_pp0_stage2_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state28_pp0_stage3_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state29_pp0_stage4_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state30_pp0_stage5_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state31_pp0_stage6_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state32_pp0_stage7_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state33_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state34_pp0_stage1_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state35_pp0_stage2_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state36_pp0_stage3_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state37_pp0_stage4_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state38_pp0_stage5_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state39_pp0_stage6_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state40_pp0_stage7_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state41_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state42_pp0_stage1_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state43_pp0_stage2_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state44_pp0_stage3_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state45_pp0_stage4_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state46_pp0_stage5_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state47_pp0_stage6_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state48_pp0_stage7_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state49_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state50_pp0_stage1_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state51_pp0_stage2_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state52_pp0_stage3_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state53_pp0_stage4_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state54_pp0_stage5_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state55_pp0_stage6_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state56_pp0_stage7_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state57_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state58_pp0_stage1_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state59_pp0_stage2_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage4_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state60_pp0_stage3_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state61_pp0_stage4_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state62_pp0_stage5_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state63_pp0_stage6_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state64_pp0_stage7_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state65_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state66_pp0_stage1_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state67_pp0_stage2_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state68_pp0_stage3_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state69_pp0_stage4_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state6_io_assign_proc : process(m_axi_gmem4_ARREADY, ap_predicate_op134_readreq_state6)
    begin
                ap_block_state6_io <= ((ap_predicate_op134_readreq_state6 = ap_const_boolean_1) and (m_axi_gmem4_ARREADY = ap_const_logic_0));
    end process;

        ap_block_state6_pp0_stage5_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state70_pp0_stage5_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state71_pp0_stage6_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state72_pp0_stage7_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state73_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state74_pp0_stage1_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state75_pp0_stage2_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state76_pp0_stage3_iter9_assign_proc : process(icmp_ln720_reg_540_pp0_iter9_reg, m_axi_gmem4_RVALID)
    begin
                ap_block_state76_pp0_stage3_iter9 <= ((icmp_ln720_reg_540_pp0_iter9_reg = ap_const_lv1_0) and (m_axi_gmem4_RVALID = ap_const_logic_0));
    end process;


    ap_block_state77_pp0_stage4_iter9_assign_proc : process(p_dst2_data_full_n, icmp_ln720_reg_540_pp0_iter9_reg)
    begin
                ap_block_state77_pp0_stage4_iter9 <= ((icmp_ln720_reg_540_pp0_iter9_reg = ap_const_lv1_0) and (p_dst2_data_full_n = ap_const_logic_0));
    end process;


    ap_block_state78_pp0_stage5_iter9_assign_proc : process(p_dst2_data_full_n, icmp_ln720_reg_540_pp0_iter9_reg)
    begin
                ap_block_state78_pp0_stage5_iter9 <= ((icmp_ln720_reg_540_pp0_iter9_reg = ap_const_lv1_0) and (p_dst2_data_full_n = ap_const_logic_0));
    end process;


    ap_block_state79_pp0_stage6_iter9_assign_proc : process(p_dst2_data_full_n, icmp_ln720_reg_540_pp0_iter9_reg)
    begin
                ap_block_state79_pp0_stage6_iter9 <= ((icmp_ln720_reg_540_pp0_iter9_reg = ap_const_lv1_0) and (p_dst2_data_full_n = ap_const_logic_0));
    end process;

        ap_block_state7_pp0_stage6_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state80_pp0_stage7_iter9_assign_proc : process(p_dst2_data_full_n, icmp_ln720_reg_540_pp0_iter9_reg)
    begin
                ap_block_state80_pp0_stage7_iter9 <= ((icmp_ln720_reg_540_pp0_iter9_reg = ap_const_lv1_0) and (p_dst2_data_full_n = ap_const_logic_0));
    end process;


    ap_block_state81_pp0_stage0_iter10_assign_proc : process(p_dst2_data_full_n, icmp_ln720_reg_540_pp0_iter9_reg)
    begin
                ap_block_state81_pp0_stage0_iter10 <= ((icmp_ln720_reg_540_pp0_iter9_reg = ap_const_lv1_0) and (p_dst2_data_full_n = ap_const_logic_0));
    end process;


    ap_block_state82_pp0_stage1_iter10_assign_proc : process(p_dst2_data_full_n, icmp_ln720_reg_540_pp0_iter9_reg)
    begin
                ap_block_state82_pp0_stage1_iter10 <= ((icmp_ln720_reg_540_pp0_iter9_reg = ap_const_lv1_0) and (p_dst2_data_full_n = ap_const_logic_0));
    end process;


    ap_block_state83_pp0_stage2_iter10_assign_proc : process(p_dst2_data_full_n, icmp_ln720_reg_540_pp0_iter10_reg)
    begin
                ap_block_state83_pp0_stage2_iter10 <= ((p_dst2_data_full_n = ap_const_logic_0) and (icmp_ln720_reg_540_pp0_iter10_reg = ap_const_lv1_0));
    end process;


    ap_block_state84_pp0_stage3_iter10_assign_proc : process(p_dst2_data_full_n, icmp_ln720_reg_540_pp0_iter10_reg)
    begin
                ap_block_state84_pp0_stage3_iter10 <= ((p_dst2_data_full_n = ap_const_logic_0) and (icmp_ln720_reg_540_pp0_iter10_reg = ap_const_lv1_0));
    end process;

        ap_block_state8_pp0_stage7_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage7_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage7, icmp_ln720_reg_540, ap_block_pp0_stage7_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage7_subdone) and (icmp_ln720_reg_540 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
            ap_condition_exit_pp0_iter0_stage7 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage7 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_exit_pp0_iter9_stage3_assign_proc : process(ap_enable_reg_pp0_iter9, icmp_ln720_reg_540_pp0_iter9_reg, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (icmp_ln720_reg_540_pp0_iter9_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            ap_condition_exit_pp0_iter9_stage3 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter9_stage3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter9_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_loop_exit_ready_pp0_iter9_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;


    ap_done_pending_pp0_assign_proc : process(ap_loop_exit_ready, ap_loop_exit_ready_pp0_iter1_reg, ap_loop_exit_ready_pp0_iter2_reg, ap_loop_exit_ready_pp0_iter3_reg, ap_loop_exit_ready_pp0_iter4_reg, ap_loop_exit_ready_pp0_iter5_reg, ap_loop_exit_ready_pp0_iter6_reg, ap_loop_exit_ready_pp0_iter7_reg, ap_loop_exit_ready_pp0_iter8_reg, ap_loop_exit_ready_pp0_iter9_reg)
    begin
        if (not(((ap_loop_exit_ready_pp0_iter9_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter8_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter7_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter6_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter5_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter4_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter3_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_0) and (ap_loop_exit_ready = ap_const_logic_0)))) then 
            ap_done_pending_pp0 <= ap_const_logic_1;
        else 
            ap_done_pending_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;

    ap_ext_blocking_cur_n <= (gmem4_blk_n_R and gmem4_blk_n_AR);
    ap_ext_blocking_n <= (ap_ext_blocking_cur_n and ap_const_logic_1);

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10)
    begin
        if (((ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to8_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8)
    begin
        if (((ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to8 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to8 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to10_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10)
    begin
        if (((ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0_1to10 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to10 <= ap_const_logic_0;
        end if; 
    end process;

    ap_int_blocking_cur_n <= (p_dst2_data_blk_n);
    ap_int_blocking_n <= (ap_int_blocking_cur_n and ap_const_logic_1);
    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage7;

    ap_phi_mux_first_iter_1_phi_fu_180_p4_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln720_reg_540, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, first_iter_1_reg_176)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (icmp_ln720_reg_540 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_phi_mux_first_iter_1_phi_fu_180_p4 <= ap_const_lv1_0;
        else 
            ap_phi_mux_first_iter_1_phi_fu_180_p4 <= first_iter_1_reg_176;
        end if; 
    end process;


    ap_predicate_op134_readreq_state6_assign_proc : process(icmp_ln720_reg_540, or_ln720_reg_544)
    begin
                ap_predicate_op134_readreq_state6 <= ((icmp_ln720_reg_540 = ap_const_lv1_0) and (or_ln720_reg_544 = ap_const_lv1_1));
    end process;


    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage7_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage7_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;

    ap_str_blocking_n <= (ap_const_logic_1 and ap_const_logic_1);

    gmem4_blk_n_AR_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln720_reg_540, m_axi_gmem4_ARREADY, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5, or_ln720_reg_544)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage5) and (icmp_ln720_reg_540 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (or_ln720_reg_544 = ap_const_lv1_1))) then 
            gmem4_blk_n_AR <= m_axi_gmem4_ARREADY;
        else 
            gmem4_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    gmem4_blk_n_R_assign_proc : process(ap_enable_reg_pp0_iter9, icmp_ln720_reg_540_pp0_iter9_reg, m_axi_gmem4_RVALID, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage3) and (icmp_ln720_reg_540_pp0_iter9_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            gmem4_blk_n_R <= m_axi_gmem4_RVALID;
        else 
            gmem4_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_188_p2_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter9, icmp_ln720_reg_540, icmp_ln720_reg_540_pp0_iter9_reg, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5, or_ln720_reg_544, sext_ln720_fu_314_p1, sext_ln720_reg_558_pp0_iter8_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage3) and (icmp_ln720_reg_540_pp0_iter9_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            grp_fu_188_p2 <= sext_ln720_reg_558_pp0_iter8_reg;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage5) and (icmp_ln720_reg_540 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (or_ln720_reg_544 = ap_const_lv1_1))) then 
            grp_fu_188_p2 <= sext_ln720_fu_314_p1;
        else 
            grp_fu_188_p2 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_488_ce_assign_proc : process(ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage1_11001, ap_block_pp0_stage4_11001, ap_block_pp0_stage3_11001, ap_block_pp0_stage2_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            grp_fu_488_ce <= ap_const_logic_1;
        else 
            grp_fu_488_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_488_p0 <= grp_fu_488_p00(11 - 1 downto 0);
    grp_fu_488_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln720_fu_255_p3),22));
    grp_fu_488_p1 <= p_cast12_cast_reg_530(11 - 1 downto 0);
    icmp_ln720_fu_224_p2 <= "1" when (indvar_flatten19_fu_124 = mul_ln50) else "0";
    icmp_ln721_fu_238_p2 <= "1" when (c_fu_116 = packcols_1) else "0";
    m_axi_gmem4_ARADDR <= grp_fu_188_p2;
    m_axi_gmem4_ARBURST <= ap_const_lv2_0;
    m_axi_gmem4_ARCACHE <= ap_const_lv4_0;
    m_axi_gmem4_ARID <= ap_const_lv1_0;
    m_axi_gmem4_ARLEN <= zext_ln715_1_cast_reg_535;
    m_axi_gmem4_ARLOCK <= ap_const_lv2_0;
    m_axi_gmem4_ARPROT <= ap_const_lv3_0;
    m_axi_gmem4_ARQOS <= ap_const_lv4_0;
    m_axi_gmem4_ARREGION <= ap_const_lv4_0;
    m_axi_gmem4_ARSIZE <= ap_const_lv3_0;
    m_axi_gmem4_ARUSER <= ap_const_lv1_0;

    m_axi_gmem4_ARVALID_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage5, ap_predicate_op134_readreq_state6, ap_block_pp0_stage5_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_predicate_op134_readreq_state6 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
            m_axi_gmem4_ARVALID <= ap_const_logic_1;
        else 
            m_axi_gmem4_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem4_AWADDR <= ap_const_lv64_0;
    m_axi_gmem4_AWBURST <= ap_const_lv2_0;
    m_axi_gmem4_AWCACHE <= ap_const_lv4_0;
    m_axi_gmem4_AWID <= ap_const_lv1_0;
    m_axi_gmem4_AWLEN <= ap_const_lv32_0;
    m_axi_gmem4_AWLOCK <= ap_const_lv2_0;
    m_axi_gmem4_AWPROT <= ap_const_lv3_0;
    m_axi_gmem4_AWQOS <= ap_const_lv4_0;
    m_axi_gmem4_AWREGION <= ap_const_lv4_0;
    m_axi_gmem4_AWSIZE <= ap_const_lv3_0;
    m_axi_gmem4_AWUSER <= ap_const_lv1_0;
    m_axi_gmem4_AWVALID <= ap_const_logic_0;
    m_axi_gmem4_BREADY <= ap_const_logic_0;

    m_axi_gmem4_RREADY_assign_proc : process(ap_enable_reg_pp0_iter9, icmp_ln720_reg_540_pp0_iter9_reg, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (icmp_ln720_reg_540_pp0_iter9_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            m_axi_gmem4_RREADY <= ap_const_logic_1;
        else 
            m_axi_gmem4_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem4_WDATA <= ap_const_lv64_0;
    m_axi_gmem4_WID <= ap_const_lv1_0;
    m_axi_gmem4_WLAST <= ap_const_logic_0;
    m_axi_gmem4_WSTRB <= ap_const_lv8_0;
    m_axi_gmem4_WUSER <= ap_const_lv1_0;
    m_axi_gmem4_WVALID <= ap_const_logic_0;
    or_ln720_fu_243_p2 <= (icmp_ln721_fu_238_p2 or ap_phi_mux_first_iter_1_phi_fu_180_p4);
    p_Result_694_1_fu_416_p5 <= (ap_const_lv64_0(63 downto 24) & trunc_ln729_2_reg_578 & ap_const_lv64_0(15 downto 0));
    p_Result_694_2_fu_428_p5 <= (ap_const_lv64_0(63 downto 32) & trunc_ln729_3_reg_583 & ap_const_lv64_0(23 downto 0));
    p_Result_694_3_fu_440_p5 <= (ap_const_lv64_0(63 downto 40) & trunc_ln729_4_reg_588 & ap_const_lv64_0(31 downto 0));
    p_Result_694_4_fu_452_p5 <= (ap_const_lv64_0(63 downto 48) & trunc_ln729_5_reg_593 & ap_const_lv64_0(39 downto 0));
    p_Result_694_5_fu_464_p5 <= (ap_const_lv64_0(63 downto 56) & trunc_ln729_6_reg_598 & ap_const_lv64_0(47 downto 0));
    p_Result_694_6_fu_476_p5 <= (trunc_ln729_7_reg_603 & ap_const_lv64_0(55 downto 0));
    p_Result_694_s_fu_404_p5 <= (ap_const_lv64_0(63 downto 16) & trunc_ln729_1_reg_573 & ap_const_lv64_0(7 downto 0));
    p_Result_s_fu_392_p5 <= (ap_const_lv64_0(63 downto 8) & trunc_ln729_reg_568);
    p_cast12_cast_fu_195_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_cast12),22));

    p_dst2_data_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_CS_fsm_pp0_stage7, p_dst2_data_full_n, icmp_ln720_reg_540_pp0_iter9_reg, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6, ap_block_pp0_stage7, ap_block_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2, icmp_ln720_reg_540_pp0_iter10_reg)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (icmp_ln720_reg_540_pp0_iter10_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1) and (icmp_ln720_reg_540_pp0_iter9_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln720_reg_540_pp0_iter9_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage7) and (icmp_ln720_reg_540_pp0_iter9_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7)) or ((ap_const_boolean_0 = ap_block_pp0_stage6) and (icmp_ln720_reg_540_pp0_iter9_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6)) or ((ap_const_boolean_0 = ap_block_pp0_stage4) and (icmp_ln720_reg_540_pp0_iter9_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage5) and (icmp_ln720_reg_540_pp0_iter9_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)) or ((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (icmp_ln720_reg_540_pp0_iter10_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)))) then 
            p_dst2_data_blk_n <= p_dst2_data_full_n;
        else 
            p_dst2_data_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    p_dst2_data_din_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_CS_fsm_pp0_stage7, icmp_ln720_reg_540_pp0_iter9_reg, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage6, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, icmp_ln720_reg_540_pp0_iter10_reg, p_Result_s_fu_392_p5, ap_block_pp0_stage4_01001, p_Result_694_s_fu_404_p5, ap_block_pp0_stage5_01001, p_Result_694_1_fu_416_p5, ap_block_pp0_stage6_01001, p_Result_694_2_fu_428_p5, ap_block_pp0_stage7_01001, p_Result_694_3_fu_440_p5, ap_block_pp0_stage0_01001, p_Result_694_4_fu_452_p5, ap_block_pp0_stage1_01001, p_Result_694_5_fu_464_p5, ap_block_pp0_stage2_01001, p_Result_694_6_fu_476_p5, ap_block_pp0_stage3_01001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage3_01001) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (icmp_ln720_reg_540_pp0_iter10_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            p_dst2_data_din <= p_Result_694_6_fu_476_p5;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_01001) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (icmp_ln720_reg_540_pp0_iter10_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            p_dst2_data_din <= p_Result_694_5_fu_464_p5;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_01001) and (icmp_ln720_reg_540_pp0_iter9_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            p_dst2_data_din <= p_Result_694_4_fu_452_p5;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (icmp_ln720_reg_540_pp0_iter9_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            p_dst2_data_din <= p_Result_694_3_fu_440_p5;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage7_01001) and (icmp_ln720_reg_540_pp0_iter9_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
            p_dst2_data_din <= p_Result_694_2_fu_428_p5;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage6_01001) and (icmp_ln720_reg_540_pp0_iter9_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then 
            p_dst2_data_din <= p_Result_694_1_fu_416_p5;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage5_01001) and (icmp_ln720_reg_540_pp0_iter9_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
            p_dst2_data_din <= p_Result_694_s_fu_404_p5;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage4_01001) and (icmp_ln720_reg_540_pp0_iter9_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            p_dst2_data_din <= p_Result_s_fu_392_p5;
        else 
            p_dst2_data_din <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    p_dst2_data_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_CS_fsm_pp0_stage7, icmp_ln720_reg_540_pp0_iter9_reg, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage6, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, icmp_ln720_reg_540_pp0_iter10_reg, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001, ap_block_pp0_stage4_11001, ap_block_pp0_stage5_11001, ap_block_pp0_stage3_11001, ap_block_pp0_stage6_11001, ap_block_pp0_stage7_11001, ap_block_pp0_stage2_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (icmp_ln720_reg_540_pp0_iter10_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (icmp_ln720_reg_540_pp0_iter9_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7)) or ((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (icmp_ln720_reg_540_pp0_iter9_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (icmp_ln720_reg_540_pp0_iter10_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (icmp_ln720_reg_540_pp0_iter9_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (icmp_ln720_reg_540_pp0_iter9_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln720_reg_540_pp0_iter9_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln720_reg_540_pp0_iter9_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            p_dst2_data_write <= ap_const_logic_1;
        else 
            p_dst2_data_write <= ap_const_logic_0;
        end if; 
    end process;

    select_ln720_fu_255_p3 <= 
        add_ln720_1_fu_249_p2 when (icmp_ln721_fu_238_p2(0) = '1') else 
        r_fu_120;
    select_ln721_fu_273_p3 <= 
        ap_const_lv8_1 when (icmp_ln721_fu_238_p2(0) = '1') else 
        add_ln721_fu_267_p2;
        sext_ln720_fu_314_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln721_1_mid2_v_reg_553),64));

    trunc_ln729_fu_318_p1 <= m_axi_gmem4_RDATA(8 - 1 downto 0);
    zext_ln715_1_cast_fu_199_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln715_1),32));
    zext_ln720_1_fu_296_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_488_p2),64));
end behav;
