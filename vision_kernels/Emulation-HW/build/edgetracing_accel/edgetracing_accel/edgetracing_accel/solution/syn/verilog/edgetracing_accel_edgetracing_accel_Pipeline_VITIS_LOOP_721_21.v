// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module edgetracing_accel_edgetracing_accel_Pipeline_VITIS_LOOP_721_21 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        p_dst2_data_din,
        p_dst2_data_full_n,
        p_dst2_data_write,
        m_axi_gmem4_AWVALID,
        m_axi_gmem4_AWREADY,
        m_axi_gmem4_AWADDR,
        m_axi_gmem4_AWID,
        m_axi_gmem4_AWLEN,
        m_axi_gmem4_AWSIZE,
        m_axi_gmem4_AWBURST,
        m_axi_gmem4_AWLOCK,
        m_axi_gmem4_AWCACHE,
        m_axi_gmem4_AWPROT,
        m_axi_gmem4_AWQOS,
        m_axi_gmem4_AWREGION,
        m_axi_gmem4_AWUSER,
        m_axi_gmem4_WVALID,
        m_axi_gmem4_WREADY,
        m_axi_gmem4_WDATA,
        m_axi_gmem4_WSTRB,
        m_axi_gmem4_WLAST,
        m_axi_gmem4_WID,
        m_axi_gmem4_WUSER,
        m_axi_gmem4_ARVALID,
        m_axi_gmem4_ARREADY,
        m_axi_gmem4_ARADDR,
        m_axi_gmem4_ARID,
        m_axi_gmem4_ARLEN,
        m_axi_gmem4_ARSIZE,
        m_axi_gmem4_ARBURST,
        m_axi_gmem4_ARLOCK,
        m_axi_gmem4_ARCACHE,
        m_axi_gmem4_ARPROT,
        m_axi_gmem4_ARQOS,
        m_axi_gmem4_ARREGION,
        m_axi_gmem4_ARUSER,
        m_axi_gmem4_RVALID,
        m_axi_gmem4_RREADY,
        m_axi_gmem4_RDATA,
        m_axi_gmem4_RLAST,
        m_axi_gmem4_RID,
        m_axi_gmem4_RFIFONUM,
        m_axi_gmem4_RUSER,
        m_axi_gmem4_RRESP,
        m_axi_gmem4_BVALID,
        m_axi_gmem4_BREADY,
        m_axi_gmem4_BRESP,
        m_axi_gmem4_BID,
        m_axi_gmem4_BUSER,
        mul_ln50,
        zext_ln715_1,
        packcols_1,
        p_cast12,
        img_out,
        ap_ext_blocking_n,
        ap_str_blocking_n,
        ap_int_blocking_n
);

parameter    ap_ST_fsm_pp0_stage0 = 8'd1;
parameter    ap_ST_fsm_pp0_stage1 = 8'd2;
parameter    ap_ST_fsm_pp0_stage2 = 8'd4;
parameter    ap_ST_fsm_pp0_stage3 = 8'd8;
parameter    ap_ST_fsm_pp0_stage4 = 8'd16;
parameter    ap_ST_fsm_pp0_stage5 = 8'd32;
parameter    ap_ST_fsm_pp0_stage6 = 8'd64;
parameter    ap_ST_fsm_pp0_stage7 = 8'd128;
parameter    ap_const_lv64_0 = 64'd0;








input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [63:0] p_dst2_data_din;
input   p_dst2_data_full_n;
output   p_dst2_data_write;
output   m_axi_gmem4_AWVALID;
input   m_axi_gmem4_AWREADY;
output  [63:0] m_axi_gmem4_AWADDR;
output  [0:0] m_axi_gmem4_AWID;
output  [31:0] m_axi_gmem4_AWLEN;
output  [2:0] m_axi_gmem4_AWSIZE;
output  [1:0] m_axi_gmem4_AWBURST;
output  [1:0] m_axi_gmem4_AWLOCK;
output  [3:0] m_axi_gmem4_AWCACHE;
output  [2:0] m_axi_gmem4_AWPROT;
output  [3:0] m_axi_gmem4_AWQOS;
output  [3:0] m_axi_gmem4_AWREGION;
output  [0:0] m_axi_gmem4_AWUSER;
output   m_axi_gmem4_WVALID;
input   m_axi_gmem4_WREADY;
output  [63:0] m_axi_gmem4_WDATA;
output  [7:0] m_axi_gmem4_WSTRB;
output   m_axi_gmem4_WLAST;
output  [0:0] m_axi_gmem4_WID;
output  [0:0] m_axi_gmem4_WUSER;
output   m_axi_gmem4_ARVALID;
input   m_axi_gmem4_ARREADY;
output  [63:0] m_axi_gmem4_ARADDR;
output  [0:0] m_axi_gmem4_ARID;
output  [31:0] m_axi_gmem4_ARLEN;
output  [2:0] m_axi_gmem4_ARSIZE;
output  [1:0] m_axi_gmem4_ARBURST;
output  [1:0] m_axi_gmem4_ARLOCK;
output  [3:0] m_axi_gmem4_ARCACHE;
output  [2:0] m_axi_gmem4_ARPROT;
output  [3:0] m_axi_gmem4_ARQOS;
output  [3:0] m_axi_gmem4_ARREGION;
output  [0:0] m_axi_gmem4_ARUSER;
input   m_axi_gmem4_RVALID;
output   m_axi_gmem4_RREADY;
input  [63:0] m_axi_gmem4_RDATA;
input   m_axi_gmem4_RLAST;
input  [0:0] m_axi_gmem4_RID;
input  [8:0] m_axi_gmem4_RFIFONUM;
input  [0:0] m_axi_gmem4_RUSER;
input  [1:0] m_axi_gmem4_RRESP;
input   m_axi_gmem4_BVALID;
output   m_axi_gmem4_BREADY;
input  [1:0] m_axi_gmem4_BRESP;
input  [0:0] m_axi_gmem4_BID;
input  [0:0] m_axi_gmem4_BUSER;
input  [18:0] mul_ln50;
input  [7:0] zext_ln715_1;
input  [7:0] packcols_1;
input  [10:0] p_cast12;
input  [63:0] img_out;
output   ap_ext_blocking_n;
output   ap_str_blocking_n;
output   ap_int_blocking_n;

reg ap_idle;
reg[63:0] p_dst2_data_din;
reg p_dst2_data_write;
reg m_axi_gmem4_ARVALID;
reg m_axi_gmem4_RREADY;

(* fsm_encoding = "none" *) reg   [7:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage7;
wire    ap_block_state8_pp0_stage7_iter0;
wire    ap_block_state16_pp0_stage7_iter1;
wire    ap_block_state24_pp0_stage7_iter2;
wire    ap_block_state32_pp0_stage7_iter3;
wire    ap_block_state40_pp0_stage7_iter4;
wire    ap_block_state48_pp0_stage7_iter5;
wire    ap_block_state56_pp0_stage7_iter6;
wire    ap_block_state64_pp0_stage7_iter7;
wire    ap_block_state72_pp0_stage7_iter8;
reg   [0:0] icmp_ln720_reg_540;
reg   [0:0] icmp_ln720_reg_540_pp0_iter9_reg;
reg    ap_block_state80_pp0_stage7_iter9;
reg    ap_block_pp0_stage7_subdone;
reg    ap_condition_exit_pp0_iter0_stage7;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    gmem4_blk_n_R;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_pp0_stage3;
reg    gmem4_blk_n_AR;
wire    ap_CS_fsm_pp0_stage5;
wire    ap_block_pp0_stage5;
reg   [0:0] or_ln720_reg_544;
reg    p_dst2_data_blk_n;
wire    ap_CS_fsm_pp0_stage4;
wire    ap_block_pp0_stage4;
wire    ap_CS_fsm_pp0_stage6;
wire    ap_block_pp0_stage6;
wire    ap_block_pp0_stage7;
wire    ap_block_pp0_stage0;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_pp0_stage1;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_pp0_stage2;
reg   [0:0] icmp_ln720_reg_540_pp0_iter10_reg;
reg   [0:0] first_iter_1_reg_176;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state9_pp0_stage0_iter1;
wire    ap_block_state17_pp0_stage0_iter2;
wire    ap_block_state25_pp0_stage0_iter3;
wire    ap_block_state33_pp0_stage0_iter4;
wire    ap_block_state41_pp0_stage0_iter5;
wire    ap_block_state49_pp0_stage0_iter6;
wire    ap_block_state57_pp0_stage0_iter7;
wire    ap_block_state65_pp0_stage0_iter8;
wire    ap_block_state73_pp0_stage0_iter9;
reg    ap_block_state81_pp0_stage0_iter10;
reg    ap_block_pp0_stage0_11001;
wire   [21:0] p_cast12_cast_fu_195_p1;
reg   [21:0] p_cast12_cast_reg_530;
wire   [31:0] zext_ln715_1_cast_fu_199_p1;
reg   [31:0] zext_ln715_1_cast_reg_535;
wire   [0:0] icmp_ln720_fu_224_p2;
wire    ap_block_state2_pp0_stage1_iter0;
wire    ap_block_state10_pp0_stage1_iter1;
wire    ap_block_state18_pp0_stage1_iter2;
wire    ap_block_state26_pp0_stage1_iter3;
wire    ap_block_state34_pp0_stage1_iter4;
wire    ap_block_state42_pp0_stage1_iter5;
wire    ap_block_state50_pp0_stage1_iter6;
wire    ap_block_state58_pp0_stage1_iter7;
wire    ap_block_state66_pp0_stage1_iter8;
wire    ap_block_state74_pp0_stage1_iter9;
reg    ap_block_state82_pp0_stage1_iter10;
reg    ap_block_pp0_stage1_11001;
reg   [0:0] icmp_ln720_reg_540_pp0_iter1_reg;
reg   [0:0] icmp_ln720_reg_540_pp0_iter2_reg;
reg   [0:0] icmp_ln720_reg_540_pp0_iter3_reg;
reg   [0:0] icmp_ln720_reg_540_pp0_iter4_reg;
reg   [0:0] icmp_ln720_reg_540_pp0_iter5_reg;
reg   [0:0] icmp_ln720_reg_540_pp0_iter6_reg;
reg   [0:0] icmp_ln720_reg_540_pp0_iter7_reg;
reg   [0:0] icmp_ln720_reg_540_pp0_iter8_reg;
wire   [0:0] or_ln720_fu_243_p2;
reg   [60:0] sext_ln721_1_mid2_v_reg_553;
wire    ap_block_state5_pp0_stage4_iter0;
wire    ap_block_state13_pp0_stage4_iter1;
wire    ap_block_state21_pp0_stage4_iter2;
wire    ap_block_state29_pp0_stage4_iter3;
wire    ap_block_state37_pp0_stage4_iter4;
wire    ap_block_state45_pp0_stage4_iter5;
wire    ap_block_state53_pp0_stage4_iter6;
wire    ap_block_state61_pp0_stage4_iter7;
wire    ap_block_state69_pp0_stage4_iter8;
reg    ap_block_state77_pp0_stage4_iter9;
reg    ap_block_pp0_stage4_11001;
wire  signed [63:0] sext_ln720_fu_314_p1;
reg  signed [63:0] sext_ln720_reg_558;
wire    ap_block_state6_pp0_stage5_iter0;
reg    ap_predicate_op134_readreq_state6;
reg    ap_block_state6_io;
wire    ap_block_state14_pp0_stage5_iter1;
wire    ap_block_state22_pp0_stage5_iter2;
wire    ap_block_state30_pp0_stage5_iter3;
wire    ap_block_state38_pp0_stage5_iter4;
wire    ap_block_state46_pp0_stage5_iter5;
wire    ap_block_state54_pp0_stage5_iter6;
wire    ap_block_state62_pp0_stage5_iter7;
wire    ap_block_state70_pp0_stage5_iter8;
reg    ap_block_state78_pp0_stage5_iter9;
reg    ap_block_pp0_stage5_11001;
reg  signed [63:0] sext_ln720_reg_558_pp0_iter1_reg;
reg  signed [63:0] sext_ln720_reg_558_pp0_iter2_reg;
reg  signed [63:0] sext_ln720_reg_558_pp0_iter3_reg;
reg  signed [63:0] sext_ln720_reg_558_pp0_iter4_reg;
reg  signed [63:0] sext_ln720_reg_558_pp0_iter5_reg;
reg  signed [63:0] sext_ln720_reg_558_pp0_iter6_reg;
reg  signed [63:0] sext_ln720_reg_558_pp0_iter7_reg;
reg  signed [63:0] sext_ln720_reg_558_pp0_iter8_reg;
reg   [63:0] grp_fu_188_p2;
wire   [7:0] trunc_ln729_fu_318_p1;
reg   [7:0] trunc_ln729_reg_568;
wire    ap_block_state4_pp0_stage3_iter0;
wire    ap_block_state12_pp0_stage3_iter1;
wire    ap_block_state20_pp0_stage3_iter2;
wire    ap_block_state28_pp0_stage3_iter3;
wire    ap_block_state36_pp0_stage3_iter4;
wire    ap_block_state44_pp0_stage3_iter5;
wire    ap_block_state52_pp0_stage3_iter6;
wire    ap_block_state60_pp0_stage3_iter7;
wire    ap_block_state68_pp0_stage3_iter8;
reg    ap_block_state76_pp0_stage3_iter9;
reg    ap_block_state84_pp0_stage3_iter10;
reg    ap_block_pp0_stage3_11001;
reg   [7:0] trunc_ln729_1_reg_573;
reg   [7:0] trunc_ln729_2_reg_578;
reg   [7:0] trunc_ln729_3_reg_583;
reg   [7:0] trunc_ln729_4_reg_588;
reg   [7:0] trunc_ln729_5_reg_593;
reg   [7:0] trunc_ln729_6_reg_598;
reg   [7:0] trunc_ln729_7_reg_603;
reg    ap_enable_reg_pp0_iter0_reg;
reg    ap_block_pp0_stage3_subdone;
reg   [0:0] ap_phi_mux_first_iter_1_phi_fu_180_p4;
wire    ap_loop_init;
reg    ap_block_pp0_stage0_subdone;
reg   [7:0] c_fu_116;
wire   [7:0] select_ln721_fu_273_p3;
reg   [10:0] r_fu_120;
wire   [10:0] select_ln720_fu_255_p3;
reg   [18:0] indvar_flatten19_fu_124;
wire   [18:0] add_ln720_fu_229_p2;
wire   [63:0] p_Result_s_fu_392_p5;
reg    ap_block_pp0_stage4_01001;
wire   [63:0] p_Result_694_s_fu_404_p5;
reg    ap_block_pp0_stage5_01001;
wire   [63:0] p_Result_694_1_fu_416_p5;
wire    ap_block_state7_pp0_stage6_iter0;
wire    ap_block_state15_pp0_stage6_iter1;
wire    ap_block_state23_pp0_stage6_iter2;
wire    ap_block_state31_pp0_stage6_iter3;
wire    ap_block_state39_pp0_stage6_iter4;
wire    ap_block_state47_pp0_stage6_iter5;
wire    ap_block_state55_pp0_stage6_iter6;
wire    ap_block_state63_pp0_stage6_iter7;
wire    ap_block_state71_pp0_stage6_iter8;
reg    ap_block_state79_pp0_stage6_iter9;
reg    ap_block_pp0_stage6_01001;
wire   [63:0] p_Result_694_2_fu_428_p5;
reg    ap_block_pp0_stage7_01001;
wire   [63:0] p_Result_694_3_fu_440_p5;
reg    ap_block_pp0_stage0_01001;
wire   [63:0] p_Result_694_4_fu_452_p5;
reg    ap_block_pp0_stage1_01001;
wire   [63:0] p_Result_694_5_fu_464_p5;
wire    ap_block_state3_pp0_stage2_iter0;
wire    ap_block_state11_pp0_stage2_iter1;
wire    ap_block_state19_pp0_stage2_iter2;
wire    ap_block_state27_pp0_stage2_iter3;
wire    ap_block_state35_pp0_stage2_iter4;
wire    ap_block_state43_pp0_stage2_iter5;
wire    ap_block_state51_pp0_stage2_iter6;
wire    ap_block_state59_pp0_stage2_iter7;
wire    ap_block_state67_pp0_stage2_iter8;
wire    ap_block_state75_pp0_stage2_iter9;
reg    ap_block_state83_pp0_stage2_iter10;
reg    ap_block_pp0_stage2_01001;
wire   [63:0] p_Result_694_6_fu_476_p5;
reg    ap_block_pp0_stage3_01001;
reg    ap_block_pp0_stage6_11001;
reg    ap_block_pp0_stage7_11001;
reg    ap_block_pp0_stage2_11001;
wire   [0:0] icmp_ln721_fu_238_p2;
wire   [10:0] add_ln720_1_fu_249_p2;
wire   [7:0] add_ln721_fu_267_p2;
wire   [21:0] grp_fu_488_p2;
wire   [63:0] zext_ln720_1_fu_296_p1;
wire   [63:0] add_ln720_2_fu_299_p2;
wire   [10:0] grp_fu_488_p0;
wire   [10:0] grp_fu_488_p1;
reg    grp_fu_488_ce;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_condition_exit_pp0_iter9_stage3;
reg    ap_idle_pp0_0to8;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg    ap_loop_exit_ready_pp0_iter7_reg;
reg    ap_loop_exit_ready_pp0_iter8_reg;
reg    ap_loop_exit_ready_pp0_iter9_reg;
reg   [7:0] ap_NS_fsm;
reg    ap_idle_pp0_1to10;
reg    ap_done_pending_pp0;
reg    ap_block_pp0_stage1_subdone;
reg    ap_block_pp0_stage2_subdone;
reg    ap_block_pp0_stage4_subdone;
reg    ap_block_pp0_stage5_subdone;
reg    ap_block_pp0_stage6_subdone;
wire    ap_ext_blocking_cur_n;
wire    ap_int_blocking_cur_n;
wire    ap_enable_pp0;
wire    ap_start_int;
wire   [21:0] grp_fu_488_p00;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 8'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 ap_done_reg = 1'b0;
end

edgetracing_accel_mul_mul_11ns_11ns_22_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 11 ),
    .din1_WIDTH( 11 ),
    .dout_WIDTH( 22 ))
mul_mul_11ns_11ns_22_4_1_U10(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_488_p0),
    .din1(grp_fu_488_p1),
    .ce(grp_fu_488_ce),
    .dout(grp_fu_488_p2)
);

edgetracing_accel_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage7),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage3_subdone) & (ap_loop_exit_ready_pp0_iter9_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage7)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage7_subdone) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage3_subdone) & (ap_enable_reg_pp0_iter10 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            ap_enable_reg_pp0_iter10 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage7_subdone) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage7_subdone) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage7_subdone) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage7_subdone) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage7_subdone) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage7_subdone) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage7_subdone) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage7_subdone) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage7_subdone) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to8 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter9_stage3))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= 1'b0;
    end else if (((1'b0 == ap_block_pp0_stage7_11001) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to8 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter9_stage3))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= 1'b0;
    end else if (((1'b0 == ap_block_pp0_stage7_11001) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to8 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter9_stage3))) begin
        ap_loop_exit_ready_pp0_iter3_reg <= 1'b0;
    end else if (((1'b0 == ap_block_pp0_stage7_11001) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to8 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter9_stage3))) begin
        ap_loop_exit_ready_pp0_iter4_reg <= 1'b0;
    end else if (((1'b0 == ap_block_pp0_stage7_11001) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to8 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter9_stage3))) begin
        ap_loop_exit_ready_pp0_iter5_reg <= 1'b0;
    end else if (((1'b0 == ap_block_pp0_stage7_11001) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to8 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter9_stage3))) begin
        ap_loop_exit_ready_pp0_iter6_reg <= 1'b0;
    end else if (((1'b0 == ap_block_pp0_stage7_11001) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to8 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter9_stage3))) begin
        ap_loop_exit_ready_pp0_iter7_reg <= 1'b0;
    end else if (((1'b0 == ap_block_pp0_stage7_11001) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
        ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to8 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter9_stage3))) begin
        ap_loop_exit_ready_pp0_iter8_reg <= 1'b0;
    end else if (((1'b0 == ap_block_pp0_stage7_11001) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
        ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to8 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter9_stage3))) begin
        ap_loop_exit_ready_pp0_iter9_reg <= 1'b0;
    end else if (((1'b0 == ap_block_pp0_stage7_11001) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
        ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        c_fu_116 <= 8'd0;
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln720_fu_224_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        c_fu_116 <= select_ln721_fu_273_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln720_reg_540 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        first_iter_1_reg_176 <= 1'd0;
    end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        first_iter_1_reg_176 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten19_fu_124 <= 19'd0;
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln720_fu_224_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        indvar_flatten19_fu_124 <= add_ln720_fu_229_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        r_fu_120 <= 11'd0;
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln720_fu_224_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        r_fu_120 <= select_ln720_fu_255_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        icmp_ln720_reg_540 <= icmp_ln720_fu_224_p2;
        icmp_ln720_reg_540_pp0_iter10_reg <= icmp_ln720_reg_540_pp0_iter9_reg;
        icmp_ln720_reg_540_pp0_iter1_reg <= icmp_ln720_reg_540;
        icmp_ln720_reg_540_pp0_iter2_reg <= icmp_ln720_reg_540_pp0_iter1_reg;
        icmp_ln720_reg_540_pp0_iter3_reg <= icmp_ln720_reg_540_pp0_iter2_reg;
        icmp_ln720_reg_540_pp0_iter4_reg <= icmp_ln720_reg_540_pp0_iter3_reg;
        icmp_ln720_reg_540_pp0_iter5_reg <= icmp_ln720_reg_540_pp0_iter4_reg;
        icmp_ln720_reg_540_pp0_iter6_reg <= icmp_ln720_reg_540_pp0_iter5_reg;
        icmp_ln720_reg_540_pp0_iter7_reg <= icmp_ln720_reg_540_pp0_iter6_reg;
        icmp_ln720_reg_540_pp0_iter8_reg <= icmp_ln720_reg_540_pp0_iter7_reg;
        icmp_ln720_reg_540_pp0_iter9_reg <= icmp_ln720_reg_540_pp0_iter8_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln720_fu_224_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        or_ln720_reg_544 <= or_ln720_fu_243_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_cast12_cast_reg_530[10 : 0] <= p_cast12_cast_fu_195_p1[10 : 0];
        zext_ln715_1_cast_reg_535[7 : 0] <= zext_ln715_1_cast_fu_199_p1[7 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage5_11001) & (icmp_ln720_reg_540 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        sext_ln720_reg_558 <= sext_ln720_fu_314_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        sext_ln720_reg_558_pp0_iter1_reg <= sext_ln720_reg_558;
        sext_ln720_reg_558_pp0_iter2_reg <= sext_ln720_reg_558_pp0_iter1_reg;
        sext_ln720_reg_558_pp0_iter3_reg <= sext_ln720_reg_558_pp0_iter2_reg;
        sext_ln720_reg_558_pp0_iter4_reg <= sext_ln720_reg_558_pp0_iter3_reg;
        sext_ln720_reg_558_pp0_iter5_reg <= sext_ln720_reg_558_pp0_iter4_reg;
        sext_ln720_reg_558_pp0_iter6_reg <= sext_ln720_reg_558_pp0_iter5_reg;
        sext_ln720_reg_558_pp0_iter7_reg <= sext_ln720_reg_558_pp0_iter6_reg;
        sext_ln720_reg_558_pp0_iter8_reg <= sext_ln720_reg_558_pp0_iter7_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage4_11001) & (icmp_ln720_reg_540 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        sext_ln721_1_mid2_v_reg_553 <= {{add_ln720_2_fu_299_p2[63:3]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (icmp_ln720_reg_540_pp0_iter9_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        trunc_ln729_1_reg_573 <= {{m_axi_gmem4_RDATA[15:8]}};
        trunc_ln729_2_reg_578 <= {{m_axi_gmem4_RDATA[23:16]}};
        trunc_ln729_3_reg_583 <= {{m_axi_gmem4_RDATA[31:24]}};
        trunc_ln729_4_reg_588 <= {{m_axi_gmem4_RDATA[39:32]}};
        trunc_ln729_5_reg_593 <= {{m_axi_gmem4_RDATA[47:40]}};
        trunc_ln729_6_reg_598 <= {{m_axi_gmem4_RDATA[55:48]}};
        trunc_ln729_7_reg_603 <= {{m_axi_gmem4_RDATA[63:56]}};
        trunc_ln729_reg_568 <= trunc_ln729_fu_318_p1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage7_subdone) & (icmp_ln720_reg_540 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
        ap_condition_exit_pp0_iter0_stage7 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage7 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3_subdone) & (icmp_ln720_reg_540_pp0_iter9_reg == 1'd1) & (ap_enable_reg_pp0_iter9 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        ap_condition_exit_pp0_iter9_stage3 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter9_stage3 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3_subdone) & (ap_loop_exit_ready_pp0_iter9_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (~((ap_loop_exit_ready_pp0_iter9_reg == 1'b0) & (ap_loop_exit_ready_pp0_iter8_reg == 1'b0) & (ap_loop_exit_ready_pp0_iter7_reg == 1'b0) & (ap_loop_exit_ready_pp0_iter6_reg == 1'b0) & (ap_loop_exit_ready_pp0_iter5_reg == 1'b0) & (ap_loop_exit_ready_pp0_iter4_reg == 1'b0) & (ap_loop_exit_ready_pp0_iter3_reg == 1'b0) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b0) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b0) & (ap_loop_exit_ready == 1'b0))) begin
        ap_done_pending_pp0 = 1'b1;
    end else begin
        ap_done_pending_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to8 = 1'b1;
    end else begin
        ap_idle_pp0_0to8 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0_1to10 = 1'b1;
    end else begin
        ap_idle_pp0_1to10 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (icmp_ln720_reg_540 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_phi_mux_first_iter_1_phi_fu_180_p4 = 1'd0;
    end else begin
        ap_phi_mux_first_iter_1_phi_fu_180_p4 = first_iter_1_reg_176;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage7_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage5) & (icmp_ln720_reg_540 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5) & (or_ln720_reg_544 == 1'd1))) begin
        gmem4_blk_n_AR = m_axi_gmem4_ARREADY;
    end else begin
        gmem4_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3) & (icmp_ln720_reg_540_pp0_iter9_reg == 1'd0) & (ap_enable_reg_pp0_iter9 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        gmem4_blk_n_R = m_axi_gmem4_RVALID;
    end else begin
        gmem4_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3) & (icmp_ln720_reg_540_pp0_iter9_reg == 1'd0) & (ap_enable_reg_pp0_iter9 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        grp_fu_188_p2 = sext_ln720_reg_558_pp0_iter8_reg;
    end else if (((1'b0 == ap_block_pp0_stage5) & (icmp_ln720_reg_540 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5) & (or_ln720_reg_544 == 1'd1))) begin
        grp_fu_188_p2 = sext_ln720_fu_314_p1;
    end else begin
        grp_fu_188_p2 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        grp_fu_488_ce = 1'b1;
    end else begin
        grp_fu_488_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage5_11001) & (ap_predicate_op134_readreq_state6 == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        m_axi_gmem4_ARVALID = 1'b1;
    end else begin
        m_axi_gmem4_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (icmp_ln720_reg_540_pp0_iter9_reg == 1'd0) & (ap_enable_reg_pp0_iter9 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        m_axi_gmem4_RREADY = 1'b1;
    end else begin
        m_axi_gmem4_RREADY = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter10 == 1'b1) & (icmp_ln720_reg_540_pp0_iter10_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1) & (icmp_ln720_reg_540_pp0_iter9_reg == 1'd0) & (ap_enable_reg_pp0_iter10 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0) & (icmp_ln720_reg_540_pp0_iter9_reg == 1'd0) & (ap_enable_reg_pp0_iter10 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage7) & (icmp_ln720_reg_540_pp0_iter9_reg == 1'd0) & (ap_enable_reg_pp0_iter9 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7)) | ((1'b0 == ap_block_pp0_stage6) & (icmp_ln720_reg_540_pp0_iter9_reg == 1'd0) & (ap_enable_reg_pp0_iter9 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6)) | ((1'b0 == ap_block_pp0_stage4) & (icmp_ln720_reg_540_pp0_iter9_reg == 1'd0) & (ap_enable_reg_pp0_iter9 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage5) & (icmp_ln720_reg_540_pp0_iter9_reg == 1'd0) & (ap_enable_reg_pp0_iter9 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5)) | ((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter10 == 1'b1) & (icmp_ln720_reg_540_pp0_iter10_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage3)))) begin
        p_dst2_data_blk_n = p_dst2_data_full_n;
    end else begin
        p_dst2_data_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3_01001) & (ap_enable_reg_pp0_iter10 == 1'b1) & (icmp_ln720_reg_540_pp0_iter10_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        p_dst2_data_din = p_Result_694_6_fu_476_p5;
    end else if (((1'b0 == ap_block_pp0_stage2_01001) & (ap_enable_reg_pp0_iter10 == 1'b1) & (icmp_ln720_reg_540_pp0_iter10_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        p_dst2_data_din = p_Result_694_5_fu_464_p5;
    end else if (((1'b0 == ap_block_pp0_stage1_01001) & (icmp_ln720_reg_540_pp0_iter9_reg == 1'd0) & (ap_enable_reg_pp0_iter10 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        p_dst2_data_din = p_Result_694_4_fu_452_p5;
    end else if (((1'b0 == ap_block_pp0_stage0_01001) & (icmp_ln720_reg_540_pp0_iter9_reg == 1'd0) & (ap_enable_reg_pp0_iter10 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_dst2_data_din = p_Result_694_3_fu_440_p5;
    end else if (((1'b0 == ap_block_pp0_stage7_01001) & (icmp_ln720_reg_540_pp0_iter9_reg == 1'd0) & (ap_enable_reg_pp0_iter9 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
        p_dst2_data_din = p_Result_694_2_fu_428_p5;
    end else if (((1'b0 == ap_block_pp0_stage6_01001) & (icmp_ln720_reg_540_pp0_iter9_reg == 1'd0) & (ap_enable_reg_pp0_iter9 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6))) begin
        p_dst2_data_din = p_Result_694_1_fu_416_p5;
    end else if (((1'b0 == ap_block_pp0_stage5_01001) & (icmp_ln720_reg_540_pp0_iter9_reg == 1'd0) & (ap_enable_reg_pp0_iter9 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        p_dst2_data_din = p_Result_694_s_fu_404_p5;
    end else if (((1'b0 == ap_block_pp0_stage4_01001) & (icmp_ln720_reg_540_pp0_iter9_reg == 1'd0) & (ap_enable_reg_pp0_iter9 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        p_dst2_data_din = p_Result_s_fu_392_p5;
    end else begin
        p_dst2_data_din = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter10 == 1'b1) & (icmp_ln720_reg_540_pp0_iter10_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage7_11001) & (icmp_ln720_reg_540_pp0_iter9_reg == 1'd0) & (ap_enable_reg_pp0_iter9 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7)) | ((1'b0 == ap_block_pp0_stage6_11001) & (icmp_ln720_reg_540_pp0_iter9_reg == 1'd0) & (ap_enable_reg_pp0_iter9 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6)) | ((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter10 == 1'b1) & (icmp_ln720_reg_540_pp0_iter10_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage5_11001) & (icmp_ln720_reg_540_pp0_iter9_reg == 1'd0) & (ap_enable_reg_pp0_iter9 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5)) | ((1'b0 == ap_block_pp0_stage4_11001) & (icmp_ln720_reg_540_pp0_iter9_reg == 1'd0) & (ap_enable_reg_pp0_iter9 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln720_reg_540_pp0_iter9_reg == 1'd0) & (ap_enable_reg_pp0_iter10 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln720_reg_540_pp0_iter9_reg == 1'd0) & (ap_enable_reg_pp0_iter10 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        p_dst2_data_write = 1'b1;
    end else begin
        p_dst2_data_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start_int == 1'b0) & (ap_done_pending_pp0 == 1'b0) & (ap_idle_pp0_1to10 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if (((ap_idle_pp0_0to8 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter9_stage3))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((1'b0 == ap_block_pp0_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_pp0_stage5 : begin
            if ((1'b0 == ap_block_pp0_stage5_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end
        end
        ap_ST_fsm_pp0_stage6 : begin
            if ((1'b0 == ap_block_pp0_stage6_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end
        end
        ap_ST_fsm_pp0_stage7 : begin
            if ((1'b0 == ap_block_pp0_stage7_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln720_1_fu_249_p2 = (r_fu_120 + 11'd1);

assign add_ln720_2_fu_299_p2 = (zext_ln720_1_fu_296_p1 + img_out);

assign add_ln720_fu_229_p2 = (indvar_flatten19_fu_124 + 19'd1);

assign add_ln721_fu_267_p2 = (c_fu_116 + 8'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage5 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_pp0_stage6 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_pp0_stage7 = ap_CS_fsm[32'd7];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((icmp_ln720_reg_540_pp0_iter9_reg == 1'd0) & (p_dst2_data_full_n == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((icmp_ln720_reg_540_pp0_iter9_reg == 1'd0) & (p_dst2_data_full_n == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((icmp_ln720_reg_540_pp0_iter9_reg == 1'd0) & (p_dst2_data_full_n == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b1));
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_01001 = ((icmp_ln720_reg_540_pp0_iter9_reg == 1'd0) & (p_dst2_data_full_n == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage1_11001 = ((icmp_ln720_reg_540_pp0_iter9_reg == 1'd0) & (p_dst2_data_full_n == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = ((icmp_ln720_reg_540_pp0_iter9_reg == 1'd0) & (p_dst2_data_full_n == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b1));
end

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage2_01001 = ((p_dst2_data_full_n == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b1) & (icmp_ln720_reg_540_pp0_iter10_reg == 1'd0));
end

always @ (*) begin
    ap_block_pp0_stage2_11001 = ((p_dst2_data_full_n == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b1) & (icmp_ln720_reg_540_pp0_iter10_reg == 1'd0));
end

always @ (*) begin
    ap_block_pp0_stage2_subdone = ((p_dst2_data_full_n == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b1) & (icmp_ln720_reg_540_pp0_iter10_reg == 1'd0));
end

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage3_01001 = (((icmp_ln720_reg_540_pp0_iter9_reg == 1'd0) & (ap_enable_reg_pp0_iter9 == 1'b1) & (m_axi_gmem4_RVALID == 1'b0)) | ((p_dst2_data_full_n == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b1) & (icmp_ln720_reg_540_pp0_iter10_reg == 1'd0)));
end

always @ (*) begin
    ap_block_pp0_stage3_11001 = (((icmp_ln720_reg_540_pp0_iter9_reg == 1'd0) & (ap_enable_reg_pp0_iter9 == 1'b1) & (m_axi_gmem4_RVALID == 1'b0)) | ((p_dst2_data_full_n == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b1) & (icmp_ln720_reg_540_pp0_iter10_reg == 1'd0)));
end

always @ (*) begin
    ap_block_pp0_stage3_subdone = (((icmp_ln720_reg_540_pp0_iter9_reg == 1'd0) & (ap_enable_reg_pp0_iter9 == 1'b1) & (m_axi_gmem4_RVALID == 1'b0)) | ((p_dst2_data_full_n == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b1) & (icmp_ln720_reg_540_pp0_iter10_reg == 1'd0)));
end

assign ap_block_pp0_stage4 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage4_01001 = ((icmp_ln720_reg_540_pp0_iter9_reg == 1'd0) & (p_dst2_data_full_n == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage4_11001 = ((icmp_ln720_reg_540_pp0_iter9_reg == 1'd0) & (p_dst2_data_full_n == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage4_subdone = ((icmp_ln720_reg_540_pp0_iter9_reg == 1'd0) & (p_dst2_data_full_n == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b1));
end

assign ap_block_pp0_stage5 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage5_01001 = ((icmp_ln720_reg_540_pp0_iter9_reg == 1'd0) & (p_dst2_data_full_n == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage5_11001 = (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state6_io)) | ((icmp_ln720_reg_540_pp0_iter9_reg == 1'd0) & (p_dst2_data_full_n == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage5_subdone = (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state6_io)) | ((icmp_ln720_reg_540_pp0_iter9_reg == 1'd0) & (p_dst2_data_full_n == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b1)));
end

assign ap_block_pp0_stage6 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage6_01001 = ((icmp_ln720_reg_540_pp0_iter9_reg == 1'd0) & (p_dst2_data_full_n == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage6_11001 = ((icmp_ln720_reg_540_pp0_iter9_reg == 1'd0) & (p_dst2_data_full_n == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage6_subdone = ((icmp_ln720_reg_540_pp0_iter9_reg == 1'd0) & (p_dst2_data_full_n == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b1));
end

assign ap_block_pp0_stage7 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage7_01001 = ((icmp_ln720_reg_540_pp0_iter9_reg == 1'd0) & (p_dst2_data_full_n == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage7_11001 = ((icmp_ln720_reg_540_pp0_iter9_reg == 1'd0) & (p_dst2_data_full_n == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage7_subdone = ((icmp_ln720_reg_540_pp0_iter9_reg == 1'd0) & (p_dst2_data_full_n == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b1));
end

assign ap_block_state10_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage3_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage4_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage5_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage6_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage7_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage2_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp0_stage3_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp0_stage4_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp0_stage5_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp0_stage6_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state24_pp0_stage7_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state25_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state26_pp0_stage1_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state27_pp0_stage2_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state28_pp0_stage3_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state29_pp0_stage4_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state30_pp0_stage5_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state31_pp0_stage6_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state32_pp0_stage7_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state33_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state34_pp0_stage1_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state35_pp0_stage2_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state36_pp0_stage3_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state37_pp0_stage4_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state38_pp0_stage5_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state39_pp0_stage6_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state40_pp0_stage7_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state41_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state42_pp0_stage1_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state43_pp0_stage2_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state44_pp0_stage3_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state45_pp0_stage4_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state46_pp0_stage5_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state47_pp0_stage6_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state48_pp0_stage7_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state49_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state50_pp0_stage1_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state51_pp0_stage2_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state52_pp0_stage3_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state53_pp0_stage4_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state54_pp0_stage5_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state55_pp0_stage6_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state56_pp0_stage7_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state57_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state58_pp0_stage1_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state59_pp0_stage2_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state60_pp0_stage3_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state61_pp0_stage4_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state62_pp0_stage5_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state63_pp0_stage6_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state64_pp0_stage7_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state65_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state66_pp0_stage1_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state67_pp0_stage2_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state68_pp0_stage3_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state69_pp0_stage4_iter8 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state6_io = ((ap_predicate_op134_readreq_state6 == 1'b1) & (m_axi_gmem4_ARREADY == 1'b0));
end

assign ap_block_state6_pp0_stage5_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state70_pp0_stage5_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state71_pp0_stage6_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state72_pp0_stage7_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state73_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state74_pp0_stage1_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state75_pp0_stage2_iter9 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state76_pp0_stage3_iter9 = ((icmp_ln720_reg_540_pp0_iter9_reg == 1'd0) & (m_axi_gmem4_RVALID == 1'b0));
end

always @ (*) begin
    ap_block_state77_pp0_stage4_iter9 = ((icmp_ln720_reg_540_pp0_iter9_reg == 1'd0) & (p_dst2_data_full_n == 1'b0));
end

always @ (*) begin
    ap_block_state78_pp0_stage5_iter9 = ((icmp_ln720_reg_540_pp0_iter9_reg == 1'd0) & (p_dst2_data_full_n == 1'b0));
end

always @ (*) begin
    ap_block_state79_pp0_stage6_iter9 = ((icmp_ln720_reg_540_pp0_iter9_reg == 1'd0) & (p_dst2_data_full_n == 1'b0));
end

assign ap_block_state7_pp0_stage6_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state80_pp0_stage7_iter9 = ((icmp_ln720_reg_540_pp0_iter9_reg == 1'd0) & (p_dst2_data_full_n == 1'b0));
end

always @ (*) begin
    ap_block_state81_pp0_stage0_iter10 = ((icmp_ln720_reg_540_pp0_iter9_reg == 1'd0) & (p_dst2_data_full_n == 1'b0));
end

always @ (*) begin
    ap_block_state82_pp0_stage1_iter10 = ((icmp_ln720_reg_540_pp0_iter9_reg == 1'd0) & (p_dst2_data_full_n == 1'b0));
end

always @ (*) begin
    ap_block_state83_pp0_stage2_iter10 = ((p_dst2_data_full_n == 1'b0) & (icmp_ln720_reg_540_pp0_iter10_reg == 1'd0));
end

always @ (*) begin
    ap_block_state84_pp0_stage3_iter10 = ((p_dst2_data_full_n == 1'b0) & (icmp_ln720_reg_540_pp0_iter10_reg == 1'd0));
end

assign ap_block_state8_pp0_stage7_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_ext_blocking_cur_n = (gmem4_blk_n_R & gmem4_blk_n_AR);

assign ap_ext_blocking_n = (ap_ext_blocking_cur_n & 1'b1);

assign ap_int_blocking_cur_n = p_dst2_data_blk_n;

assign ap_int_blocking_n = (ap_int_blocking_cur_n & 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage7;

always @ (*) begin
    ap_predicate_op134_readreq_state6 = ((icmp_ln720_reg_540 == 1'd0) & (or_ln720_reg_544 == 1'd1));
end

assign ap_str_blocking_n = (1'b1 & 1'b1);

assign grp_fu_488_p0 = grp_fu_488_p00;

assign grp_fu_488_p00 = select_ln720_fu_255_p3;

assign grp_fu_488_p1 = p_cast12_cast_reg_530;

assign icmp_ln720_fu_224_p2 = ((indvar_flatten19_fu_124 == mul_ln50) ? 1'b1 : 1'b0);

assign icmp_ln721_fu_238_p2 = ((c_fu_116 == packcols_1) ? 1'b1 : 1'b0);

assign m_axi_gmem4_ARADDR = grp_fu_188_p2;

assign m_axi_gmem4_ARBURST = 2'd0;

assign m_axi_gmem4_ARCACHE = 4'd0;

assign m_axi_gmem4_ARID = 1'd0;

assign m_axi_gmem4_ARLEN = zext_ln715_1_cast_reg_535;

assign m_axi_gmem4_ARLOCK = 2'd0;

assign m_axi_gmem4_ARPROT = 3'd0;

assign m_axi_gmem4_ARQOS = 4'd0;

assign m_axi_gmem4_ARREGION = 4'd0;

assign m_axi_gmem4_ARSIZE = 3'd0;

assign m_axi_gmem4_ARUSER = 1'd0;

assign m_axi_gmem4_AWADDR = 64'd0;

assign m_axi_gmem4_AWBURST = 2'd0;

assign m_axi_gmem4_AWCACHE = 4'd0;

assign m_axi_gmem4_AWID = 1'd0;

assign m_axi_gmem4_AWLEN = 32'd0;

assign m_axi_gmem4_AWLOCK = 2'd0;

assign m_axi_gmem4_AWPROT = 3'd0;

assign m_axi_gmem4_AWQOS = 4'd0;

assign m_axi_gmem4_AWREGION = 4'd0;

assign m_axi_gmem4_AWSIZE = 3'd0;

assign m_axi_gmem4_AWUSER = 1'd0;

assign m_axi_gmem4_AWVALID = 1'b0;

assign m_axi_gmem4_BREADY = 1'b0;

assign m_axi_gmem4_WDATA = 64'd0;

assign m_axi_gmem4_WID = 1'd0;

assign m_axi_gmem4_WLAST = 1'b0;

assign m_axi_gmem4_WSTRB = 8'd0;

assign m_axi_gmem4_WUSER = 1'd0;

assign m_axi_gmem4_WVALID = 1'b0;

assign or_ln720_fu_243_p2 = (icmp_ln721_fu_238_p2 | ap_phi_mux_first_iter_1_phi_fu_180_p4);

assign p_Result_694_1_fu_416_p5 = {{ap_const_lv64_0[63:24]}, {trunc_ln729_2_reg_578}, {ap_const_lv64_0[15:0]}};

assign p_Result_694_2_fu_428_p5 = {{ap_const_lv64_0[63:32]}, {trunc_ln729_3_reg_583}, {ap_const_lv64_0[23:0]}};

assign p_Result_694_3_fu_440_p5 = {{ap_const_lv64_0[63:40]}, {trunc_ln729_4_reg_588}, {ap_const_lv64_0[31:0]}};

assign p_Result_694_4_fu_452_p5 = {{ap_const_lv64_0[63:48]}, {trunc_ln729_5_reg_593}, {ap_const_lv64_0[39:0]}};

assign p_Result_694_5_fu_464_p5 = {{ap_const_lv64_0[63:56]}, {trunc_ln729_6_reg_598}, {ap_const_lv64_0[47:0]}};

assign p_Result_694_6_fu_476_p5 = {{trunc_ln729_7_reg_603}, {ap_const_lv64_0[55:0]}};

assign p_Result_694_s_fu_404_p5 = {{ap_const_lv64_0[63:16]}, {trunc_ln729_1_reg_573}, {ap_const_lv64_0[7:0]}};

assign p_Result_s_fu_392_p5 = {{ap_const_lv64_0[63:8]}, {trunc_ln729_reg_568}};

assign p_cast12_cast_fu_195_p1 = p_cast12;

assign select_ln720_fu_255_p3 = ((icmp_ln721_fu_238_p2[0:0] == 1'b1) ? add_ln720_1_fu_249_p2 : r_fu_120);

assign select_ln721_fu_273_p3 = ((icmp_ln721_fu_238_p2[0:0] == 1'b1) ? 8'd1 : add_ln721_fu_267_p2);

assign sext_ln720_fu_314_p1 = $signed(sext_ln721_1_mid2_v_reg_553);

assign trunc_ln729_fu_318_p1 = m_axi_gmem4_RDATA[7:0];

assign zext_ln715_1_cast_fu_199_p1 = zext_ln715_1;

assign zext_ln720_1_fu_296_p1 = grp_fu_488_p2;

always @ (posedge ap_clk) begin
    p_cast12_cast_reg_530[21:11] <= 11'b00000000000;
    zext_ln715_1_cast_reg_535[31:8] <= 24'b000000000000000000000000;
end

endmodule //edgetracing_accel_edgetracing_accel_Pipeline_VITIS_LOOP_721_21
