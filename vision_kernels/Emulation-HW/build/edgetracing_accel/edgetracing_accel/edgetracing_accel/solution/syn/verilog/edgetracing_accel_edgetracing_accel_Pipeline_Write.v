// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module edgetracing_accel_edgetracing_accel_Pipeline_Write (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        p_dst1_data_din,
        p_dst1_data_full_n,
        p_dst1_data_write,
        lBound,
        zext_ln303,
        op2_assign_32_cast,
        iBuff_V_address0,
        iBuff_V_ce0,
        iBuff_V_q0,
        iBuff_V_1_address0,
        iBuff_V_1_ce0,
        iBuff_V_1_q0,
        iBuff_V_2_address0,
        iBuff_V_2_ce0,
        iBuff_V_2_q0,
        iBuff_V_3_address0,
        iBuff_V_3_ce0,
        iBuff_V_3_q0,
        iBuff_V_4_address0,
        iBuff_V_4_ce0,
        iBuff_V_4_q0,
        iBuff_V_5_address0,
        iBuff_V_5_ce0,
        iBuff_V_5_q0,
        iBuff_V_6_address0,
        iBuff_V_6_ce0,
        iBuff_V_6_q0,
        iBuff_V_7_address0,
        iBuff_V_7_ce0,
        iBuff_V_7_q0,
        iBuff_V_8_address0,
        iBuff_V_8_ce0,
        iBuff_V_8_q0,
        iBuff_V_9_address0,
        iBuff_V_9_ce0,
        iBuff_V_9_q0,
        iBuff_V_10_address0,
        iBuff_V_10_ce0,
        iBuff_V_10_q0,
        iBuff_V_11_address0,
        iBuff_V_11_ce0,
        iBuff_V_11_q0,
        iBuff_V_12_address0,
        iBuff_V_12_ce0,
        iBuff_V_12_q0,
        iBuff_V_13_address0,
        iBuff_V_13_ce0,
        iBuff_V_13_q0,
        iBuff_V_14_address0,
        iBuff_V_14_ce0,
        iBuff_V_14_q0,
        iBuff_V_15_address0,
        iBuff_V_15_ce0,
        iBuff_V_15_q0,
        iBuff_V_16_address0,
        iBuff_V_16_ce0,
        iBuff_V_16_q0,
        iBuff_V_17_address0,
        iBuff_V_17_ce0,
        iBuff_V_17_q0,
        iBuff_V_18_address0,
        iBuff_V_18_ce0,
        iBuff_V_18_q0,
        iBuff_V_19_address0,
        iBuff_V_19_ce0,
        iBuff_V_19_q0,
        ap_ext_blocking_n,
        ap_str_blocking_n,
        ap_int_blocking_n
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [63:0] p_dst1_data_din;
input   p_dst1_data_full_n;
output   p_dst1_data_write;
input  [31:0] lBound;
input  [5:0] zext_ln303;
input  [15:0] op2_assign_32_cast;
output  [9:0] iBuff_V_address0;
output   iBuff_V_ce0;
input  [63:0] iBuff_V_q0;
output  [9:0] iBuff_V_1_address0;
output   iBuff_V_1_ce0;
input  [63:0] iBuff_V_1_q0;
output  [9:0] iBuff_V_2_address0;
output   iBuff_V_2_ce0;
input  [63:0] iBuff_V_2_q0;
output  [9:0] iBuff_V_3_address0;
output   iBuff_V_3_ce0;
input  [63:0] iBuff_V_3_q0;
output  [9:0] iBuff_V_4_address0;
output   iBuff_V_4_ce0;
input  [63:0] iBuff_V_4_q0;
output  [9:0] iBuff_V_5_address0;
output   iBuff_V_5_ce0;
input  [63:0] iBuff_V_5_q0;
output  [9:0] iBuff_V_6_address0;
output   iBuff_V_6_ce0;
input  [63:0] iBuff_V_6_q0;
output  [9:0] iBuff_V_7_address0;
output   iBuff_V_7_ce0;
input  [63:0] iBuff_V_7_q0;
output  [9:0] iBuff_V_8_address0;
output   iBuff_V_8_ce0;
input  [63:0] iBuff_V_8_q0;
output  [9:0] iBuff_V_9_address0;
output   iBuff_V_9_ce0;
input  [63:0] iBuff_V_9_q0;
output  [9:0] iBuff_V_10_address0;
output   iBuff_V_10_ce0;
input  [63:0] iBuff_V_10_q0;
output  [9:0] iBuff_V_11_address0;
output   iBuff_V_11_ce0;
input  [63:0] iBuff_V_11_q0;
output  [9:0] iBuff_V_12_address0;
output   iBuff_V_12_ce0;
input  [63:0] iBuff_V_12_q0;
output  [9:0] iBuff_V_13_address0;
output   iBuff_V_13_ce0;
input  [63:0] iBuff_V_13_q0;
output  [9:0] iBuff_V_14_address0;
output   iBuff_V_14_ce0;
input  [63:0] iBuff_V_14_q0;
output  [9:0] iBuff_V_15_address0;
output   iBuff_V_15_ce0;
input  [63:0] iBuff_V_15_q0;
output  [9:0] iBuff_V_16_address0;
output   iBuff_V_16_ce0;
input  [63:0] iBuff_V_16_q0;
output  [9:0] iBuff_V_17_address0;
output   iBuff_V_17_ce0;
input  [63:0] iBuff_V_17_q0;
output  [9:0] iBuff_V_18_address0;
output   iBuff_V_18_ce0;
input  [63:0] iBuff_V_18_q0;
output  [9:0] iBuff_V_19_address0;
output   iBuff_V_19_ce0;
input  [63:0] iBuff_V_19_q0;
output   ap_ext_blocking_n;
output   ap_str_blocking_n;
output   ap_int_blocking_n;

reg ap_idle;
reg p_dst1_data_write;
reg iBuff_V_ce0;
reg iBuff_V_1_ce0;
reg iBuff_V_2_ce0;
reg iBuff_V_3_ce0;
reg iBuff_V_4_ce0;
reg iBuff_V_5_ce0;
reg iBuff_V_6_ce0;
reg iBuff_V_7_ce0;
reg iBuff_V_8_ce0;
reg iBuff_V_9_ce0;
reg iBuff_V_10_ce0;
reg iBuff_V_11_ce0;
reg iBuff_V_12_ce0;
reg iBuff_V_13_ce0;
reg iBuff_V_14_ce0;
reg iBuff_V_15_ce0;
reg iBuff_V_16_ce0;
reg iBuff_V_17_ce0;
reg iBuff_V_18_ce0;
reg iBuff_V_19_ce0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
reg    ap_block_state4_pp0_stage0_iter3;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln387_fu_430_p2;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    p_dst1_data_blk_n;
wire    ap_block_pp0_stage0;
reg    ap_block_pp0_stage0_11001;
wire  signed [16:0] op2_assign_32_cast_cast_fu_399_p1;
reg  signed [16:0] op2_assign_32_cast_cast_reg_653;
wire   [15:0] zext_ln303_cast_fu_403_p1;
reg   [15:0] zext_ln303_cast_reg_658;
wire   [9:0] ret_V_fu_515_p2;
reg   [9:0] ret_V_reg_668;
wire   [4:0] trunc_ln402_fu_521_p1;
reg   [4:0] trunc_ln402_reg_673;
reg   [4:0] trunc_ln402_reg_673_pp0_iter2_reg;
wire   [63:0] zext_ln541_fu_551_p1;
reg   [15:0] idx1_V_fu_98;
wire   [15:0] idx1_V_2_fu_525_p2;
wire    ap_loop_init;
reg   [15:0] dep_V_fu_102;
wire   [15:0] rhs_fu_491_p3;
reg   [15:0] idx2_V_fu_106;
wire   [15:0] idx2_V_3_fu_499_p3;
reg   [31:0] i_fu_110;
wire   [31:0] i_2_fu_435_p2;
wire   [63:0] oReg_V_fu_574_p22;
reg    ap_block_pp0_stage0_01001;
wire   [0:0] icmp_ln1019_fu_450_p2;
wire   [15:0] idx2_V_1_fu_455_p2;
wire   [15:0] idx2_V_2_fu_469_p3;
wire   [16:0] zext_ln1019_fu_477_p1;
wire   [0:0] icmp_ln1019_1_fu_481_p2;
wire   [15:0] dep_V_1_fu_486_p2;
wire   [15:0] idx1_V_3_fu_461_p3;
wire   [9:0] trunc_ln1495_1_fu_511_p1;
wire   [9:0] trunc_ln1495_fu_507_p1;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_int_blocking_cur_n;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_done_reg = 1'b0;
end

edgetracing_accel_mux_205_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .din2_WIDTH( 64 ),
    .din3_WIDTH( 64 ),
    .din4_WIDTH( 64 ),
    .din5_WIDTH( 64 ),
    .din6_WIDTH( 64 ),
    .din7_WIDTH( 64 ),
    .din8_WIDTH( 64 ),
    .din9_WIDTH( 64 ),
    .din10_WIDTH( 64 ),
    .din11_WIDTH( 64 ),
    .din12_WIDTH( 64 ),
    .din13_WIDTH( 64 ),
    .din14_WIDTH( 64 ),
    .din15_WIDTH( 64 ),
    .din16_WIDTH( 64 ),
    .din17_WIDTH( 64 ),
    .din18_WIDTH( 64 ),
    .din19_WIDTH( 64 ),
    .din20_WIDTH( 5 ),
    .dout_WIDTH( 64 ))
mux_205_64_1_1_U183(
    .din0(iBuff_V_q0),
    .din1(iBuff_V_1_q0),
    .din2(iBuff_V_2_q0),
    .din3(iBuff_V_3_q0),
    .din4(iBuff_V_4_q0),
    .din5(iBuff_V_5_q0),
    .din6(iBuff_V_6_q0),
    .din7(iBuff_V_7_q0),
    .din8(iBuff_V_8_q0),
    .din9(iBuff_V_9_q0),
    .din10(iBuff_V_10_q0),
    .din11(iBuff_V_11_q0),
    .din12(iBuff_V_12_q0),
    .din13(iBuff_V_13_q0),
    .din14(iBuff_V_14_q0),
    .din15(iBuff_V_15_q0),
    .din16(iBuff_V_16_q0),
    .din17(iBuff_V_17_q0),
    .din18(iBuff_V_18_q0),
    .din19(iBuff_V_19_q0),
    .din20(trunc_ln402_reg_673_pp0_iter2_reg),
    .dout(oReg_V_fu_574_p22)
);

edgetracing_accel_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter1_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            dep_V_fu_102 <= 16'd0;
        end else if (((icmp_ln387_fu_430_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            dep_V_fu_102 <= rhs_fu_491_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            i_fu_110 <= 32'd0;
        end else if (((icmp_ln387_fu_430_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            i_fu_110 <= i_2_fu_435_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            idx1_V_fu_98 <= 16'd0;
        end else if (((icmp_ln387_fu_430_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            idx1_V_fu_98 <= idx1_V_2_fu_525_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            idx2_V_fu_106 <= 16'd1;
        end else if (((icmp_ln387_fu_430_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            idx2_V_fu_106 <= idx2_V_3_fu_499_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
        op2_assign_32_cast_cast_reg_653 <= op2_assign_32_cast_cast_fu_399_p1;
        zext_ln303_cast_reg_658[5 : 0] <= zext_ln303_cast_fu_403_p1[5 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln387_fu_430_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ret_V_reg_668 <= ret_V_fu_515_p2;
        trunc_ln402_reg_673 <= trunc_ln402_fu_521_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        trunc_ln402_reg_673_pp0_iter2_reg <= trunc_ln402_reg_673;
    end
end

always @ (*) begin
    if (((icmp_ln387_fu_430_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        iBuff_V_10_ce0 = 1'b1;
    end else begin
        iBuff_V_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        iBuff_V_11_ce0 = 1'b1;
    end else begin
        iBuff_V_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        iBuff_V_12_ce0 = 1'b1;
    end else begin
        iBuff_V_12_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        iBuff_V_13_ce0 = 1'b1;
    end else begin
        iBuff_V_13_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        iBuff_V_14_ce0 = 1'b1;
    end else begin
        iBuff_V_14_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        iBuff_V_15_ce0 = 1'b1;
    end else begin
        iBuff_V_15_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        iBuff_V_16_ce0 = 1'b1;
    end else begin
        iBuff_V_16_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        iBuff_V_17_ce0 = 1'b1;
    end else begin
        iBuff_V_17_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        iBuff_V_18_ce0 = 1'b1;
    end else begin
        iBuff_V_18_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        iBuff_V_19_ce0 = 1'b1;
    end else begin
        iBuff_V_19_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        iBuff_V_1_ce0 = 1'b1;
    end else begin
        iBuff_V_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        iBuff_V_2_ce0 = 1'b1;
    end else begin
        iBuff_V_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        iBuff_V_3_ce0 = 1'b1;
    end else begin
        iBuff_V_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        iBuff_V_4_ce0 = 1'b1;
    end else begin
        iBuff_V_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        iBuff_V_5_ce0 = 1'b1;
    end else begin
        iBuff_V_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        iBuff_V_6_ce0 = 1'b1;
    end else begin
        iBuff_V_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        iBuff_V_7_ce0 = 1'b1;
    end else begin
        iBuff_V_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        iBuff_V_8_ce0 = 1'b1;
    end else begin
        iBuff_V_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        iBuff_V_9_ce0 = 1'b1;
    end else begin
        iBuff_V_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        iBuff_V_ce0 = 1'b1;
    end else begin
        iBuff_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        p_dst1_data_blk_n = p_dst1_data_full_n;
    end else begin
        p_dst1_data_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        p_dst1_data_write = 1'b1;
    end else begin
        p_dst1_data_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((p_dst1_data_full_n == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((p_dst1_data_full_n == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((p_dst1_data_full_n == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1));
end

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_pp0_stage0_iter3 = (p_dst1_data_full_n == 1'b0);
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_ext_blocking_n = (1'b1 & 1'b1);

assign ap_int_blocking_cur_n = p_dst1_data_blk_n;

assign ap_int_blocking_n = (ap_int_blocking_cur_n & 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter1_stage0;

assign ap_str_blocking_n = (1'b1 & 1'b1);

assign dep_V_1_fu_486_p2 = (dep_V_fu_102 + zext_ln303_cast_reg_658);

assign iBuff_V_10_address0 = zext_ln541_fu_551_p1;

assign iBuff_V_11_address0 = zext_ln541_fu_551_p1;

assign iBuff_V_12_address0 = zext_ln541_fu_551_p1;

assign iBuff_V_13_address0 = zext_ln541_fu_551_p1;

assign iBuff_V_14_address0 = zext_ln541_fu_551_p1;

assign iBuff_V_15_address0 = zext_ln541_fu_551_p1;

assign iBuff_V_16_address0 = zext_ln541_fu_551_p1;

assign iBuff_V_17_address0 = zext_ln541_fu_551_p1;

assign iBuff_V_18_address0 = zext_ln541_fu_551_p1;

assign iBuff_V_19_address0 = zext_ln541_fu_551_p1;

assign iBuff_V_1_address0 = zext_ln541_fu_551_p1;

assign iBuff_V_2_address0 = zext_ln541_fu_551_p1;

assign iBuff_V_3_address0 = zext_ln541_fu_551_p1;

assign iBuff_V_4_address0 = zext_ln541_fu_551_p1;

assign iBuff_V_5_address0 = zext_ln541_fu_551_p1;

assign iBuff_V_6_address0 = zext_ln541_fu_551_p1;

assign iBuff_V_7_address0 = zext_ln541_fu_551_p1;

assign iBuff_V_8_address0 = zext_ln541_fu_551_p1;

assign iBuff_V_9_address0 = zext_ln541_fu_551_p1;

assign iBuff_V_address0 = zext_ln541_fu_551_p1;

assign i_2_fu_435_p2 = (i_fu_110 + 32'd1);

assign icmp_ln1019_1_fu_481_p2 = ((op2_assign_32_cast_cast_reg_653 == zext_ln1019_fu_477_p1) ? 1'b1 : 1'b0);

assign icmp_ln1019_fu_450_p2 = ((zext_ln303_cast_reg_658 == idx1_V_fu_98) ? 1'b1 : 1'b0);

assign icmp_ln387_fu_430_p2 = ((i_fu_110 == lBound) ? 1'b1 : 1'b0);

assign idx1_V_2_fu_525_p2 = (idx1_V_3_fu_461_p3 + 16'd1);

assign idx1_V_3_fu_461_p3 = ((icmp_ln1019_fu_450_p2[0:0] == 1'b1) ? 16'd0 : idx1_V_fu_98);

assign idx2_V_1_fu_455_p2 = (idx2_V_fu_106 + 16'd1);

assign idx2_V_2_fu_469_p3 = ((icmp_ln1019_fu_450_p2[0:0] == 1'b1) ? idx2_V_1_fu_455_p2 : idx2_V_fu_106);

assign idx2_V_3_fu_499_p3 = ((icmp_ln1019_1_fu_481_p2[0:0] == 1'b1) ? 16'd1 : idx2_V_2_fu_469_p3);

assign op2_assign_32_cast_cast_fu_399_p1 = $signed(op2_assign_32_cast);

assign p_dst1_data_din = oReg_V_fu_574_p22;

assign ret_V_fu_515_p2 = (trunc_ln1495_1_fu_511_p1 + trunc_ln1495_fu_507_p1);

assign rhs_fu_491_p3 = ((icmp_ln1019_1_fu_481_p2[0:0] == 1'b1) ? dep_V_1_fu_486_p2 : dep_V_fu_102);

assign trunc_ln1495_1_fu_511_p1 = rhs_fu_491_p3[9:0];

assign trunc_ln1495_fu_507_p1 = idx1_V_3_fu_461_p3[9:0];

assign trunc_ln402_fu_521_p1 = idx2_V_3_fu_499_p3[4:0];

assign zext_ln1019_fu_477_p1 = idx2_V_2_fu_469_p3;

assign zext_ln303_cast_fu_403_p1 = zext_ln303;

assign zext_ln541_fu_551_p1 = ret_V_reg_668;

always @ (posedge ap_clk) begin
    zext_ln303_cast_reg_658[15:6] <= 10'b0000000000;
end

endmodule //edgetracing_accel_edgetracing_accel_Pipeline_Write
