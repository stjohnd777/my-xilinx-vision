-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity edgetracing_accel_edgetracing_accel_Pipeline_Write is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    p_dst1_data_din : OUT STD_LOGIC_VECTOR (63 downto 0);
    p_dst1_data_full_n : IN STD_LOGIC;
    p_dst1_data_write : OUT STD_LOGIC;
    lBound : IN STD_LOGIC_VECTOR (31 downto 0);
    zext_ln303 : IN STD_LOGIC_VECTOR (5 downto 0);
    op2_assign_32_cast : IN STD_LOGIC_VECTOR (15 downto 0);
    iBuff_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    iBuff_V_ce0 : OUT STD_LOGIC;
    iBuff_V_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    iBuff_V_1_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    iBuff_V_1_ce0 : OUT STD_LOGIC;
    iBuff_V_1_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    iBuff_V_2_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    iBuff_V_2_ce0 : OUT STD_LOGIC;
    iBuff_V_2_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    iBuff_V_3_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    iBuff_V_3_ce0 : OUT STD_LOGIC;
    iBuff_V_3_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    iBuff_V_4_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    iBuff_V_4_ce0 : OUT STD_LOGIC;
    iBuff_V_4_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    iBuff_V_5_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    iBuff_V_5_ce0 : OUT STD_LOGIC;
    iBuff_V_5_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    iBuff_V_6_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    iBuff_V_6_ce0 : OUT STD_LOGIC;
    iBuff_V_6_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    iBuff_V_7_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    iBuff_V_7_ce0 : OUT STD_LOGIC;
    iBuff_V_7_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    iBuff_V_8_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    iBuff_V_8_ce0 : OUT STD_LOGIC;
    iBuff_V_8_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    iBuff_V_9_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    iBuff_V_9_ce0 : OUT STD_LOGIC;
    iBuff_V_9_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    iBuff_V_10_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    iBuff_V_10_ce0 : OUT STD_LOGIC;
    iBuff_V_10_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    iBuff_V_11_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    iBuff_V_11_ce0 : OUT STD_LOGIC;
    iBuff_V_11_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    iBuff_V_12_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    iBuff_V_12_ce0 : OUT STD_LOGIC;
    iBuff_V_12_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    iBuff_V_13_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    iBuff_V_13_ce0 : OUT STD_LOGIC;
    iBuff_V_13_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    iBuff_V_14_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    iBuff_V_14_ce0 : OUT STD_LOGIC;
    iBuff_V_14_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    iBuff_V_15_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    iBuff_V_15_ce0 : OUT STD_LOGIC;
    iBuff_V_15_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    iBuff_V_16_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    iBuff_V_16_ce0 : OUT STD_LOGIC;
    iBuff_V_16_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    iBuff_V_17_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    iBuff_V_17_ce0 : OUT STD_LOGIC;
    iBuff_V_17_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    iBuff_V_18_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    iBuff_V_18_ce0 : OUT STD_LOGIC;
    iBuff_V_18_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    iBuff_V_19_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    iBuff_V_19_ce0 : OUT STD_LOGIC;
    iBuff_V_19_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    ap_ext_blocking_n : OUT STD_LOGIC;
    ap_str_blocking_n : OUT STD_LOGIC;
    ap_int_blocking_n : OUT STD_LOGIC );
end;


architecture behav of edgetracing_accel_edgetracing_accel_Pipeline_Write is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln387_fu_430_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal p_dst1_data_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal op2_assign_32_cast_cast_fu_399_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal op2_assign_32_cast_cast_reg_653 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln303_cast_fu_403_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln303_cast_reg_658 : STD_LOGIC_VECTOR (15 downto 0);
    signal ret_V_fu_515_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ret_V_reg_668 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln402_fu_521_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln402_reg_673 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln402_reg_673_pp0_iter2_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln541_fu_551_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal idx1_V_fu_98 : STD_LOGIC_VECTOR (15 downto 0);
    signal idx1_V_2_fu_525_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal dep_V_fu_102 : STD_LOGIC_VECTOR (15 downto 0);
    signal rhs_fu_491_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal idx2_V_fu_106 : STD_LOGIC_VECTOR (15 downto 0);
    signal idx2_V_3_fu_499_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_fu_110 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_2_fu_435_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal oReg_V_fu_574_p22 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal icmp_ln1019_fu_450_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal idx2_V_1_fu_455_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal idx2_V_2_fu_469_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln1019_fu_477_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal icmp_ln1019_1_fu_481_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal dep_V_1_fu_486_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal idx1_V_3_fu_461_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln1495_1_fu_511_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln1495_fu_507_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_int_blocking_cur_n : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component edgetracing_accel_mux_205_64_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        din10_WIDTH : INTEGER;
        din11_WIDTH : INTEGER;
        din12_WIDTH : INTEGER;
        din13_WIDTH : INTEGER;
        din14_WIDTH : INTEGER;
        din15_WIDTH : INTEGER;
        din16_WIDTH : INTEGER;
        din17_WIDTH : INTEGER;
        din18_WIDTH : INTEGER;
        din19_WIDTH : INTEGER;
        din20_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        din2 : IN STD_LOGIC_VECTOR (63 downto 0);
        din3 : IN STD_LOGIC_VECTOR (63 downto 0);
        din4 : IN STD_LOGIC_VECTOR (63 downto 0);
        din5 : IN STD_LOGIC_VECTOR (63 downto 0);
        din6 : IN STD_LOGIC_VECTOR (63 downto 0);
        din7 : IN STD_LOGIC_VECTOR (63 downto 0);
        din8 : IN STD_LOGIC_VECTOR (63 downto 0);
        din9 : IN STD_LOGIC_VECTOR (63 downto 0);
        din10 : IN STD_LOGIC_VECTOR (63 downto 0);
        din11 : IN STD_LOGIC_VECTOR (63 downto 0);
        din12 : IN STD_LOGIC_VECTOR (63 downto 0);
        din13 : IN STD_LOGIC_VECTOR (63 downto 0);
        din14 : IN STD_LOGIC_VECTOR (63 downto 0);
        din15 : IN STD_LOGIC_VECTOR (63 downto 0);
        din16 : IN STD_LOGIC_VECTOR (63 downto 0);
        din17 : IN STD_LOGIC_VECTOR (63 downto 0);
        din18 : IN STD_LOGIC_VECTOR (63 downto 0);
        din19 : IN STD_LOGIC_VECTOR (63 downto 0);
        din20 : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component edgetracing_accel_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mux_205_64_1_1_U183 : component edgetracing_accel_mux_205_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        din2_WIDTH => 64,
        din3_WIDTH => 64,
        din4_WIDTH => 64,
        din5_WIDTH => 64,
        din6_WIDTH => 64,
        din7_WIDTH => 64,
        din8_WIDTH => 64,
        din9_WIDTH => 64,
        din10_WIDTH => 64,
        din11_WIDTH => 64,
        din12_WIDTH => 64,
        din13_WIDTH => 64,
        din14_WIDTH => 64,
        din15_WIDTH => 64,
        din16_WIDTH => 64,
        din17_WIDTH => 64,
        din18_WIDTH => 64,
        din19_WIDTH => 64,
        din20_WIDTH => 5,
        dout_WIDTH => 64)
    port map (
        din0 => iBuff_V_q0,
        din1 => iBuff_V_1_q0,
        din2 => iBuff_V_2_q0,
        din3 => iBuff_V_3_q0,
        din4 => iBuff_V_4_q0,
        din5 => iBuff_V_5_q0,
        din6 => iBuff_V_6_q0,
        din7 => iBuff_V_7_q0,
        din8 => iBuff_V_8_q0,
        din9 => iBuff_V_9_q0,
        din10 => iBuff_V_10_q0,
        din11 => iBuff_V_11_q0,
        din12 => iBuff_V_12_q0,
        din13 => iBuff_V_13_q0,
        din14 => iBuff_V_14_q0,
        din15 => iBuff_V_15_q0,
        din16 => iBuff_V_16_q0,
        din17 => iBuff_V_17_q0,
        din18 => iBuff_V_18_q0,
        din19 => iBuff_V_19_q0,
        din20 => trunc_ln402_reg_673_pp0_iter2_reg,
        dout => oReg_V_fu_574_p22);

    flow_control_loop_pipe_sequential_init_U : component edgetracing_accel_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter1_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    dep_V_fu_102_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    dep_V_fu_102 <= ap_const_lv16_0;
                elsif (((icmp_ln387_fu_430_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    dep_V_fu_102 <= rhs_fu_491_p3;
                end if;
            end if; 
        end if;
    end process;

    i_fu_110_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_110 <= ap_const_lv32_0;
                elsif (((icmp_ln387_fu_430_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    i_fu_110 <= i_2_fu_435_p2;
                end if;
            end if; 
        end if;
    end process;

    idx1_V_fu_98_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    idx1_V_fu_98 <= ap_const_lv16_0;
                elsif (((icmp_ln387_fu_430_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    idx1_V_fu_98 <= idx1_V_2_fu_525_p2;
                end if;
            end if; 
        end if;
    end process;

    idx2_V_fu_106_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    idx2_V_fu_106 <= ap_const_lv16_1;
                elsif (((icmp_ln387_fu_430_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    idx2_V_fu_106 <= idx2_V_3_fu_499_p3;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
                op2_assign_32_cast_cast_reg_653 <= op2_assign_32_cast_cast_fu_399_p1;
                    zext_ln303_cast_reg_658(5 downto 0) <= zext_ln303_cast_fu_403_p1(5 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln387_fu_430_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ret_V_reg_668 <= ret_V_fu_515_p2;
                trunc_ln402_reg_673 <= trunc_ln402_fu_521_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                trunc_ln402_reg_673_pp0_iter2_reg <= trunc_ln402_reg_673;
            end if;
        end if;
    end process;
    zext_ln303_cast_reg_658(15 downto 6) <= "0000000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter3, p_dst1_data_full_n)
    begin
                ap_block_pp0_stage0_01001 <= ((p_dst1_data_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter3, p_dst1_data_full_n)
    begin
                ap_block_pp0_stage0_11001 <= ((p_dst1_data_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter3, p_dst1_data_full_n)
    begin
                ap_block_pp0_stage0_subdone <= ((p_dst1_data_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1));
    end process;

        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state4_pp0_stage0_iter3_assign_proc : process(p_dst1_data_full_n)
    begin
                ap_block_state4_pp0_stage0_iter3 <= (p_dst1_data_full_n = ap_const_logic_0);
    end process;


    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, icmp_ln387_fu_430_p2)
    begin
        if (((icmp_ln387_fu_430_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter2_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;
    ap_ext_blocking_n <= (ap_const_logic_1 and ap_const_logic_1);

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_int_blocking_cur_n <= (p_dst1_data_blk_n);
    ap_int_blocking_n <= (ap_int_blocking_cur_n and ap_const_logic_1);
    ap_loop_exit_ready <= ap_condition_exit_pp0_iter1_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;

    ap_str_blocking_n <= (ap_const_logic_1 and ap_const_logic_1);
    dep_V_1_fu_486_p2 <= std_logic_vector(unsigned(dep_V_fu_102) + unsigned(zext_ln303_cast_reg_658));
    iBuff_V_10_address0 <= zext_ln541_fu_551_p1(10 - 1 downto 0);

    iBuff_V_10_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            iBuff_V_10_ce0 <= ap_const_logic_1;
        else 
            iBuff_V_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    iBuff_V_11_address0 <= zext_ln541_fu_551_p1(10 - 1 downto 0);

    iBuff_V_11_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            iBuff_V_11_ce0 <= ap_const_logic_1;
        else 
            iBuff_V_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    iBuff_V_12_address0 <= zext_ln541_fu_551_p1(10 - 1 downto 0);

    iBuff_V_12_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            iBuff_V_12_ce0 <= ap_const_logic_1;
        else 
            iBuff_V_12_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    iBuff_V_13_address0 <= zext_ln541_fu_551_p1(10 - 1 downto 0);

    iBuff_V_13_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            iBuff_V_13_ce0 <= ap_const_logic_1;
        else 
            iBuff_V_13_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    iBuff_V_14_address0 <= zext_ln541_fu_551_p1(10 - 1 downto 0);

    iBuff_V_14_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            iBuff_V_14_ce0 <= ap_const_logic_1;
        else 
            iBuff_V_14_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    iBuff_V_15_address0 <= zext_ln541_fu_551_p1(10 - 1 downto 0);

    iBuff_V_15_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            iBuff_V_15_ce0 <= ap_const_logic_1;
        else 
            iBuff_V_15_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    iBuff_V_16_address0 <= zext_ln541_fu_551_p1(10 - 1 downto 0);

    iBuff_V_16_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            iBuff_V_16_ce0 <= ap_const_logic_1;
        else 
            iBuff_V_16_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    iBuff_V_17_address0 <= zext_ln541_fu_551_p1(10 - 1 downto 0);

    iBuff_V_17_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            iBuff_V_17_ce0 <= ap_const_logic_1;
        else 
            iBuff_V_17_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    iBuff_V_18_address0 <= zext_ln541_fu_551_p1(10 - 1 downto 0);

    iBuff_V_18_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            iBuff_V_18_ce0 <= ap_const_logic_1;
        else 
            iBuff_V_18_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    iBuff_V_19_address0 <= zext_ln541_fu_551_p1(10 - 1 downto 0);

    iBuff_V_19_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            iBuff_V_19_ce0 <= ap_const_logic_1;
        else 
            iBuff_V_19_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    iBuff_V_1_address0 <= zext_ln541_fu_551_p1(10 - 1 downto 0);

    iBuff_V_1_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            iBuff_V_1_ce0 <= ap_const_logic_1;
        else 
            iBuff_V_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    iBuff_V_2_address0 <= zext_ln541_fu_551_p1(10 - 1 downto 0);

    iBuff_V_2_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            iBuff_V_2_ce0 <= ap_const_logic_1;
        else 
            iBuff_V_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    iBuff_V_3_address0 <= zext_ln541_fu_551_p1(10 - 1 downto 0);

    iBuff_V_3_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            iBuff_V_3_ce0 <= ap_const_logic_1;
        else 
            iBuff_V_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    iBuff_V_4_address0 <= zext_ln541_fu_551_p1(10 - 1 downto 0);

    iBuff_V_4_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            iBuff_V_4_ce0 <= ap_const_logic_1;
        else 
            iBuff_V_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    iBuff_V_5_address0 <= zext_ln541_fu_551_p1(10 - 1 downto 0);

    iBuff_V_5_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            iBuff_V_5_ce0 <= ap_const_logic_1;
        else 
            iBuff_V_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    iBuff_V_6_address0 <= zext_ln541_fu_551_p1(10 - 1 downto 0);

    iBuff_V_6_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            iBuff_V_6_ce0 <= ap_const_logic_1;
        else 
            iBuff_V_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    iBuff_V_7_address0 <= zext_ln541_fu_551_p1(10 - 1 downto 0);

    iBuff_V_7_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            iBuff_V_7_ce0 <= ap_const_logic_1;
        else 
            iBuff_V_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    iBuff_V_8_address0 <= zext_ln541_fu_551_p1(10 - 1 downto 0);

    iBuff_V_8_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            iBuff_V_8_ce0 <= ap_const_logic_1;
        else 
            iBuff_V_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    iBuff_V_9_address0 <= zext_ln541_fu_551_p1(10 - 1 downto 0);

    iBuff_V_9_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            iBuff_V_9_ce0 <= ap_const_logic_1;
        else 
            iBuff_V_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    iBuff_V_address0 <= zext_ln541_fu_551_p1(10 - 1 downto 0);

    iBuff_V_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            iBuff_V_ce0 <= ap_const_logic_1;
        else 
            iBuff_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    i_2_fu_435_p2 <= std_logic_vector(unsigned(i_fu_110) + unsigned(ap_const_lv32_1));
    icmp_ln1019_1_fu_481_p2 <= "1" when (op2_assign_32_cast_cast_reg_653 = zext_ln1019_fu_477_p1) else "0";
    icmp_ln1019_fu_450_p2 <= "1" when (zext_ln303_cast_reg_658 = idx1_V_fu_98) else "0";
    icmp_ln387_fu_430_p2 <= "1" when (i_fu_110 = lBound) else "0";
    idx1_V_2_fu_525_p2 <= std_logic_vector(unsigned(idx1_V_3_fu_461_p3) + unsigned(ap_const_lv16_1));
    idx1_V_3_fu_461_p3 <= 
        ap_const_lv16_0 when (icmp_ln1019_fu_450_p2(0) = '1') else 
        idx1_V_fu_98;
    idx2_V_1_fu_455_p2 <= std_logic_vector(unsigned(idx2_V_fu_106) + unsigned(ap_const_lv16_1));
    idx2_V_2_fu_469_p3 <= 
        idx2_V_1_fu_455_p2 when (icmp_ln1019_fu_450_p2(0) = '1') else 
        idx2_V_fu_106;
    idx2_V_3_fu_499_p3 <= 
        ap_const_lv16_1 when (icmp_ln1019_1_fu_481_p2(0) = '1') else 
        idx2_V_2_fu_469_p3;
        op2_assign_32_cast_cast_fu_399_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(op2_assign_32_cast),17));


    p_dst1_data_blk_n_assign_proc : process(ap_enable_reg_pp0_iter3, p_dst1_data_full_n, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            p_dst1_data_blk_n <= p_dst1_data_full_n;
        else 
            p_dst1_data_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    p_dst1_data_din <= oReg_V_fu_574_p22;

    p_dst1_data_write_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            p_dst1_data_write <= ap_const_logic_1;
        else 
            p_dst1_data_write <= ap_const_logic_0;
        end if; 
    end process;

    ret_V_fu_515_p2 <= std_logic_vector(unsigned(trunc_ln1495_1_fu_511_p1) + unsigned(trunc_ln1495_fu_507_p1));
    rhs_fu_491_p3 <= 
        dep_V_1_fu_486_p2 when (icmp_ln1019_1_fu_481_p2(0) = '1') else 
        dep_V_fu_102;
    trunc_ln1495_1_fu_511_p1 <= rhs_fu_491_p3(10 - 1 downto 0);
    trunc_ln1495_fu_507_p1 <= idx1_V_3_fu_461_p3(10 - 1 downto 0);
    trunc_ln402_fu_521_p1 <= idx2_V_3_fu_499_p3(5 - 1 downto 0);
    zext_ln1019_fu_477_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(idx2_V_2_fu_469_p3),17));
    zext_ln303_cast_fu_403_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln303),16));
    zext_ln541_fu_551_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_reg_668),64));
end behav;
