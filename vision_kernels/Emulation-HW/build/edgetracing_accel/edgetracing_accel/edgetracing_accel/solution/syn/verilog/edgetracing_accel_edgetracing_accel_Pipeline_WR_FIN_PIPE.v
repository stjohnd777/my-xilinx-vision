// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module edgetracing_accel_edgetracing_accel_Pipeline_WR_FIN_PIPE (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        p_dst2_data_din,
        p_dst2_data_full_n,
        p_dst2_data_write,
        tmp_7,
        oBuff_V_address0,
        oBuff_V_ce0,
        oBuff_V_q0,
        packcols_1,
        ap_ext_blocking_n,
        ap_str_blocking_n,
        ap_int_blocking_n
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [63:0] p_dst2_data_din;
input   p_dst2_data_full_n;
output   p_dst2_data_write;
input  [7:0] tmp_7;
output  [5:0] oBuff_V_address0;
output   oBuff_V_ce0;
input  [63:0] oBuff_V_q0;
input  [7:0] packcols_1;
output   ap_ext_blocking_n;
output   ap_str_blocking_n;
output   ap_int_blocking_n;

reg ap_idle;
reg p_dst2_data_write;
reg oBuff_V_ce0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
reg   [0:0] icmp_ln452_reg_598;
reg    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln433_fu_143_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    p_dst2_data_blk_n;
wire    ap_block_pp0_stage0;
wire   [0:0] icmp_ln1019_fu_161_p2;
reg   [0:0] icmp_ln1019_reg_588;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln452_fu_200_p2;
wire   [63:0] conv_i_i_i_fu_181_p1;
reg   [2:0] id_V_fu_72;
wire   [2:0] id_V_1_fu_192_p3;
wire    ap_loop_init;
reg   [2:0] ap_sig_allocacmp_id_V_load;
reg   [8:0] pixel_V_fu_76;
wire   [8:0] pixel_V_2_fu_173_p3;
reg   [8:0] ap_sig_allocacmp_pixel_V_load;
reg   [7:0] j_fu_80;
wire   [7:0] j_2_fu_149_p2;
reg   [7:0] ap_sig_allocacmp_j_1;
reg   [31:0] bit_fu_84;
wire   [31:0] bit_2_fu_546_p2;
reg    ap_block_pp0_stage0_01001;
wire   [8:0] pixel_V_1_fu_167_p2;
wire   [2:0] add_ln840_fu_186_p2;
wire   [31:0] bit_1_fu_224_p3;
wire   [5:0] trunc_ln628_fu_231_p1;
wire   [63:0] zext_ln628_fu_235_p1;
wire   [63:0] lshr_ln628_fu_239_p2;
wire   [1:0] pix_fu_245_p1;
wire   [0:0] icmp_ln1019_2_fu_249_p2;
wire   [5:0] trunc_ln444_fu_263_p1;
wire   [5:0] add_ln628_fu_267_p2;
wire   [63:0] zext_ln628_1_fu_273_p1;
wire   [63:0] lshr_ln628_1_fu_277_p2;
wire   [1:0] pix_1_fu_283_p1;
wire   [0:0] icmp_ln1019_3_fu_287_p2;
wire   [5:0] trunc_ln444_1_fu_301_p1;
wire   [5:0] add_ln628_1_fu_305_p2;
wire   [63:0] zext_ln628_2_fu_311_p1;
wire   [63:0] lshr_ln628_2_fu_315_p2;
wire   [1:0] pix_2_fu_321_p1;
wire   [0:0] icmp_ln1019_4_fu_325_p2;
wire   [5:0] trunc_ln444_2_fu_339_p1;
wire   [5:0] add_ln628_2_fu_343_p2;
wire   [63:0] zext_ln628_3_fu_349_p1;
wire   [63:0] lshr_ln628_3_fu_353_p2;
wire   [1:0] pix_3_fu_359_p1;
wire   [0:0] icmp_ln1019_5_fu_363_p2;
wire   [5:0] trunc_ln444_3_fu_377_p1;
wire   [5:0] add_ln628_3_fu_381_p2;
wire   [63:0] zext_ln628_4_fu_387_p1;
wire   [63:0] lshr_ln628_4_fu_391_p2;
wire   [1:0] pix_4_fu_397_p1;
wire   [0:0] icmp_ln1019_6_fu_401_p2;
wire   [5:0] trunc_ln444_4_fu_415_p1;
wire   [5:0] add_ln628_4_fu_419_p2;
wire   [63:0] zext_ln628_5_fu_425_p1;
wire   [63:0] lshr_ln628_5_fu_429_p2;
wire   [1:0] pix_5_fu_435_p1;
wire   [0:0] icmp_ln1019_7_fu_439_p2;
wire   [5:0] trunc_ln444_5_fu_453_p1;
wire   [5:0] add_ln628_5_fu_457_p2;
wire   [63:0] zext_ln628_6_fu_463_p1;
wire   [63:0] lshr_ln628_6_fu_467_p2;
wire   [1:0] pix_6_fu_473_p1;
wire   [0:0] icmp_ln1019_8_fu_477_p2;
wire   [5:0] trunc_ln444_6_fu_491_p1;
wire   [5:0] add_ln628_6_fu_495_p2;
wire   [63:0] zext_ln628_7_fu_501_p1;
wire   [63:0] lshr_ln628_7_fu_505_p2;
wire   [1:0] pix_7_fu_511_p1;
wire   [0:0] icmp_ln1019_9_fu_515_p2;
wire   [7:0] select_ln1019_6_fu_483_p3;
wire   [7:0] select_ln1019_5_fu_445_p3;
wire   [7:0] select_ln1019_4_fu_407_p3;
wire   [7:0] select_ln1019_3_fu_369_p3;
wire   [7:0] select_ln1019_2_fu_331_p3;
wire   [7:0] select_ln1019_1_fu_293_p3;
wire   [7:0] select_ln1019_fu_255_p3;
wire   [56:0] oRegF_V_fu_521_p9;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_int_blocking_cur_n;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
end

edgetracing_accel_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            bit_fu_84 <= 32'd0;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            bit_fu_84 <= bit_2_fu_546_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln433_fu_143_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            id_V_fu_72 <= id_V_1_fu_192_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            id_V_fu_72 <= 3'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln433_fu_143_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            j_fu_80 <= j_2_fu_149_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            j_fu_80 <= 8'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln433_fu_143_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            pixel_V_fu_76 <= pixel_V_2_fu_173_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            pixel_V_fu_76 <= 9'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln433_fu_143_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln1019_reg_588 <= icmp_ln1019_fu_161_p2;
        icmp_ln452_reg_598 <= icmp_ln452_fu_200_p2;
    end
end

always @ (*) begin
    if (((icmp_ln433_fu_143_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_id_V_load = 3'd0;
    end else begin
        ap_sig_allocacmp_id_V_load = id_V_fu_72;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_j_1 = 8'd0;
    end else begin
        ap_sig_allocacmp_j_1 = j_fu_80;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_pixel_V_load = 9'd0;
    end else begin
        ap_sig_allocacmp_pixel_V_load = pixel_V_fu_76;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        oBuff_V_ce0 = 1'b1;
    end else begin
        oBuff_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln452_reg_598 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_dst2_data_blk_n = p_dst2_data_full_n;
    end else begin
        p_dst2_data_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln452_reg_598 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_dst2_data_write = 1'b1;
    end else begin
        p_dst2_data_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln628_1_fu_305_p2 = (trunc_ln444_1_fu_301_p1 + 6'd4);

assign add_ln628_2_fu_343_p2 = (trunc_ln444_2_fu_339_p1 + 6'd6);

assign add_ln628_3_fu_381_p2 = (trunc_ln444_3_fu_377_p1 + 6'd8);

assign add_ln628_4_fu_419_p2 = (trunc_ln444_4_fu_415_p1 + 6'd10);

assign add_ln628_5_fu_457_p2 = (trunc_ln444_5_fu_453_p1 + 6'd12);

assign add_ln628_6_fu_495_p2 = (trunc_ln444_6_fu_491_p1 + 6'd14);

assign add_ln628_fu_267_p2 = (trunc_ln444_fu_263_p1 + 6'd2);

assign add_ln840_fu_186_p2 = (ap_sig_allocacmp_id_V_load + 3'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((icmp_ln452_reg_598 == 1'd1) & (p_dst2_data_full_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((icmp_ln452_reg_598 == 1'd1) & (p_dst2_data_full_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((icmp_ln452_reg_598 == 1'd1) & (p_dst2_data_full_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = ((icmp_ln452_reg_598 == 1'd1) & (p_dst2_data_full_n == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_ext_blocking_n = (1'b1 & 1'b1);

assign ap_int_blocking_cur_n = p_dst2_data_blk_n;

assign ap_int_blocking_n = (ap_int_blocking_cur_n & 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_str_blocking_n = (1'b1 & 1'b1);

assign bit_1_fu_224_p3 = ((icmp_ln1019_reg_588[0:0] == 1'b1) ? 32'd0 : bit_fu_84);

assign bit_2_fu_546_p2 = (bit_1_fu_224_p3 + 32'd16);

assign conv_i_i_i_fu_181_p1 = pixel_V_2_fu_173_p3;

assign icmp_ln1019_2_fu_249_p2 = ((pix_fu_245_p1 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln1019_3_fu_287_p2 = ((pix_1_fu_283_p1 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln1019_4_fu_325_p2 = ((pix_2_fu_321_p1 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln1019_5_fu_363_p2 = ((pix_3_fu_359_p1 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln1019_6_fu_401_p2 = ((pix_4_fu_397_p1 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln1019_7_fu_439_p2 = ((pix_5_fu_435_p1 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln1019_8_fu_477_p2 = ((pix_6_fu_473_p1 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln1019_9_fu_515_p2 = ((pix_7_fu_511_p1 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln1019_fu_161_p2 = ((ap_sig_allocacmp_id_V_load == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln433_fu_143_p2 = ((ap_sig_allocacmp_j_1 == tmp_7) ? 1'b1 : 1'b0);

assign icmp_ln452_fu_200_p2 = ((ap_sig_allocacmp_j_1 < packcols_1) ? 1'b1 : 1'b0);

assign id_V_1_fu_192_p3 = ((icmp_ln1019_fu_161_p2[0:0] == 1'b1) ? 3'd1 : add_ln840_fu_186_p2);

assign j_2_fu_149_p2 = (ap_sig_allocacmp_j_1 + 8'd1);

assign lshr_ln628_1_fu_277_p2 = oBuff_V_q0 >> zext_ln628_1_fu_273_p1;

assign lshr_ln628_2_fu_315_p2 = oBuff_V_q0 >> zext_ln628_2_fu_311_p1;

assign lshr_ln628_3_fu_353_p2 = oBuff_V_q0 >> zext_ln628_3_fu_349_p1;

assign lshr_ln628_4_fu_391_p2 = oBuff_V_q0 >> zext_ln628_4_fu_387_p1;

assign lshr_ln628_5_fu_429_p2 = oBuff_V_q0 >> zext_ln628_5_fu_425_p1;

assign lshr_ln628_6_fu_467_p2 = oBuff_V_q0 >> zext_ln628_6_fu_463_p1;

assign lshr_ln628_7_fu_505_p2 = oBuff_V_q0 >> zext_ln628_7_fu_501_p1;

assign lshr_ln628_fu_239_p2 = oBuff_V_q0 >> zext_ln628_fu_235_p1;

assign oBuff_V_address0 = conv_i_i_i_fu_181_p1;

assign oRegF_V_fu_521_p9 = {{{{{{{{icmp_ln1019_9_fu_515_p2}, {select_ln1019_6_fu_483_p3}}, {select_ln1019_5_fu_445_p3}}, {select_ln1019_4_fu_407_p3}}, {select_ln1019_3_fu_369_p3}}, {select_ln1019_2_fu_331_p3}}, {select_ln1019_1_fu_293_p3}}, {select_ln1019_fu_255_p3}};

assign p_dst2_data_din = $signed(oRegF_V_fu_521_p9);

assign pix_1_fu_283_p1 = lshr_ln628_1_fu_277_p2[1:0];

assign pix_2_fu_321_p1 = lshr_ln628_2_fu_315_p2[1:0];

assign pix_3_fu_359_p1 = lshr_ln628_3_fu_353_p2[1:0];

assign pix_4_fu_397_p1 = lshr_ln628_4_fu_391_p2[1:0];

assign pix_5_fu_435_p1 = lshr_ln628_5_fu_429_p2[1:0];

assign pix_6_fu_473_p1 = lshr_ln628_6_fu_467_p2[1:0];

assign pix_7_fu_511_p1 = lshr_ln628_7_fu_505_p2[1:0];

assign pix_fu_245_p1 = lshr_ln628_fu_239_p2[1:0];

assign pixel_V_1_fu_167_p2 = (ap_sig_allocacmp_pixel_V_load + 9'd1);

assign pixel_V_2_fu_173_p3 = ((icmp_ln1019_fu_161_p2[0:0] == 1'b1) ? pixel_V_1_fu_167_p2 : ap_sig_allocacmp_pixel_V_load);

assign select_ln1019_1_fu_293_p3 = ((icmp_ln1019_3_fu_287_p2[0:0] == 1'b1) ? 8'd255 : 8'd0);

assign select_ln1019_2_fu_331_p3 = ((icmp_ln1019_4_fu_325_p2[0:0] == 1'b1) ? 8'd255 : 8'd0);

assign select_ln1019_3_fu_369_p3 = ((icmp_ln1019_5_fu_363_p2[0:0] == 1'b1) ? 8'd255 : 8'd0);

assign select_ln1019_4_fu_407_p3 = ((icmp_ln1019_6_fu_401_p2[0:0] == 1'b1) ? 8'd255 : 8'd0);

assign select_ln1019_5_fu_445_p3 = ((icmp_ln1019_7_fu_439_p2[0:0] == 1'b1) ? 8'd255 : 8'd0);

assign select_ln1019_6_fu_483_p3 = ((icmp_ln1019_8_fu_477_p2[0:0] == 1'b1) ? 8'd255 : 8'd0);

assign select_ln1019_fu_255_p3 = ((icmp_ln1019_2_fu_249_p2[0:0] == 1'b1) ? 8'd255 : 8'd0);

assign trunc_ln444_1_fu_301_p1 = bit_1_fu_224_p3[5:0];

assign trunc_ln444_2_fu_339_p1 = bit_1_fu_224_p3[5:0];

assign trunc_ln444_3_fu_377_p1 = bit_1_fu_224_p3[5:0];

assign trunc_ln444_4_fu_415_p1 = bit_1_fu_224_p3[5:0];

assign trunc_ln444_5_fu_453_p1 = bit_1_fu_224_p3[5:0];

assign trunc_ln444_6_fu_491_p1 = bit_1_fu_224_p3[5:0];

assign trunc_ln444_fu_263_p1 = bit_1_fu_224_p3[5:0];

assign trunc_ln628_fu_231_p1 = bit_1_fu_224_p3[5:0];

assign zext_ln628_1_fu_273_p1 = add_ln628_fu_267_p2;

assign zext_ln628_2_fu_311_p1 = add_ln628_1_fu_305_p2;

assign zext_ln628_3_fu_349_p1 = add_ln628_2_fu_343_p2;

assign zext_ln628_4_fu_387_p1 = add_ln628_3_fu_381_p2;

assign zext_ln628_5_fu_425_p1 = add_ln628_4_fu_419_p2;

assign zext_ln628_6_fu_463_p1 = add_ln628_5_fu_457_p2;

assign zext_ln628_7_fu_501_p1 = add_ln628_6_fu_495_p2;

assign zext_ln628_fu_235_p1 = trunc_ln628_fu_231_p1;

endmodule //edgetracing_accel_edgetracing_accel_Pipeline_WR_FIN_PIPE
