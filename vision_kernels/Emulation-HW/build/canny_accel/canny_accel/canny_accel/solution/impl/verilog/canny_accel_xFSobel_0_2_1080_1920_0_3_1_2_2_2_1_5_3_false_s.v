// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module canny_accel_xFSobel_0_2_1080_1920_0_3_1_2_2_2_1_5_3_false_s (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        gaussian_mat_data1_dout,
        gaussian_mat_data1_num_data_valid,
        gaussian_mat_data1_fifo_cap,
        gaussian_mat_data1_empty_n,
        gaussian_mat_data1_read,
        gradx_mat_data2_din,
        gradx_mat_data2_num_data_valid,
        gradx_mat_data2_fifo_cap,
        gradx_mat_data2_full_n,
        gradx_mat_data2_write,
        grady_mat_data5_din,
        grady_mat_data5_num_data_valid,
        grady_mat_data5_fifo_cap,
        grady_mat_data5_full_n,
        grady_mat_data5_write,
        imgheight_dout,
        imgheight_num_data_valid,
        imgheight_fifo_cap,
        imgheight_empty_n,
        imgheight_read,
        imgwidth_dout,
        imgwidth_num_data_valid,
        imgwidth_fifo_cap,
        imgwidth_empty_n,
        imgwidth_read,
        img_height_c21_din,
        img_height_c21_num_data_valid,
        img_height_c21_fifo_cap,
        img_height_c21_full_n,
        img_height_c21_write,
        img_width_c25_din,
        img_width_c25_num_data_valid,
        img_width_c25_fifo_cap,
        img_width_c25_full_n,
        img_width_c25_write,
        ap_ext_blocking_n,
        ap_str_blocking_n,
        ap_int_blocking_n
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [7:0] gaussian_mat_data1_dout;
input  [1:0] gaussian_mat_data1_num_data_valid;
input  [1:0] gaussian_mat_data1_fifo_cap;
input   gaussian_mat_data1_empty_n;
output   gaussian_mat_data1_read;
output  [15:0] gradx_mat_data2_din;
input  [1:0] gradx_mat_data2_num_data_valid;
input  [1:0] gradx_mat_data2_fifo_cap;
input   gradx_mat_data2_full_n;
output   gradx_mat_data2_write;
output  [15:0] grady_mat_data5_din;
input  [1:0] grady_mat_data5_num_data_valid;
input  [1:0] grady_mat_data5_fifo_cap;
input   grady_mat_data5_full_n;
output   grady_mat_data5_write;
input  [15:0] imgheight_dout;
input  [1:0] imgheight_num_data_valid;
input  [1:0] imgheight_fifo_cap;
input   imgheight_empty_n;
output   imgheight_read;
input  [15:0] imgwidth_dout;
input  [1:0] imgwidth_num_data_valid;
input  [1:0] imgwidth_fifo_cap;
input   imgwidth_empty_n;
output   imgwidth_read;
output  [15:0] img_height_c21_din;
input  [1:0] img_height_c21_num_data_valid;
input  [1:0] img_height_c21_fifo_cap;
input   img_height_c21_full_n;
output   img_height_c21_write;
output  [15:0] img_width_c25_din;
input  [1:0] img_width_c25_num_data_valid;
input  [1:0] img_width_c25_fifo_cap;
input   img_width_c25_full_n;
output   img_width_c25_write;
output   ap_ext_blocking_n;
output   ap_str_blocking_n;
output   ap_int_blocking_n;

reg ap_done;
reg ap_idle;
reg start_write;
reg gaussian_mat_data1_read;
reg gradx_mat_data2_write;
reg grady_mat_data5_write;
reg imgheight_read;
reg imgwidth_read;
reg img_height_c21_write;
reg img_width_c25_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    imgheight_blk_n;
reg    imgwidth_blk_n;
reg    img_height_c21_blk_n;
reg    img_width_c25_blk_n;
reg   [15:0] imgwidth_read_reg_82;
reg   [15:0] imgheight_read_reg_87;
wire    grp_xFSobel3x3_0_2_1080_1920_0_3_1_2_2_2_1_5_1921_3_9_false_s_fu_68_ap_start;
wire    grp_xFSobel3x3_0_2_1080_1920_0_3_1_2_2_2_1_5_1921_3_9_false_s_fu_68_ap_done;
wire    grp_xFSobel3x3_0_2_1080_1920_0_3_1_2_2_2_1_5_1921_3_9_false_s_fu_68_ap_idle;
wire    grp_xFSobel3x3_0_2_1080_1920_0_3_1_2_2_2_1_5_1921_3_9_false_s_fu_68_ap_ready;
wire    grp_xFSobel3x3_0_2_1080_1920_0_3_1_2_2_2_1_5_1921_3_9_false_s_fu_68_gaussian_mat_data1_read;
wire   [15:0] grp_xFSobel3x3_0_2_1080_1920_0_3_1_2_2_2_1_5_1921_3_9_false_s_fu_68_gradx_mat_data2_din;
wire    grp_xFSobel3x3_0_2_1080_1920_0_3_1_2_2_2_1_5_1921_3_9_false_s_fu_68_gradx_mat_data2_write;
wire   [15:0] grp_xFSobel3x3_0_2_1080_1920_0_3_1_2_2_2_1_5_1921_3_9_false_s_fu_68_grady_mat_data5_din;
wire    grp_xFSobel3x3_0_2_1080_1920_0_3_1_2_2_2_1_5_1921_3_9_false_s_fu_68_grady_mat_data5_write;
wire    grp_xFSobel3x3_0_2_1080_1920_0_3_1_2_2_2_1_5_1921_3_9_false_s_fu_68_ap_ext_blocking_n;
wire    grp_xFSobel3x3_0_2_1080_1920_0_3_1_2_2_2_1_5_1921_3_9_false_s_fu_68_ap_str_blocking_n;
wire    grp_xFSobel3x3_0_2_1080_1920_0_3_1_2_2_2_1_5_1921_3_9_false_s_fu_68_ap_int_blocking_n;
reg    grp_xFSobel3x3_0_2_1080_1920_0_3_1_2_2_2_1_5_1921_3_9_false_s_fu_68_ap_start_reg;
reg    ap_block_state1_ignore_call11;
wire    ap_CS_fsm_state2;
reg    ap_block_state1;
reg   [1:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
reg    ap_ST_fsm_state2_blk;
wire    ap_int_blocking_cur_n;
reg    ap_ext_blocking_sub_n;
reg    ap_wait_0;
reg    ap_sub_ext_blocking_0;
reg    ap_str_blocking_sub_n;
reg    ap_sub_str_blocking_0;
reg    ap_int_blocking_sub_n;
reg    ap_sub_int_blocking_0;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 2'd1;
#0 grp_xFSobel3x3_0_2_1080_1920_0_3_1_2_2_2_1_5_1921_3_9_false_s_fu_68_ap_start_reg = 1'b0;
end

canny_accel_xFSobel3x3_0_2_1080_1920_0_3_1_2_2_2_1_5_1921_3_9_false_s grp_xFSobel3x3_0_2_1080_1920_0_3_1_2_2_2_1_5_1921_3_9_false_s_fu_68(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_xFSobel3x3_0_2_1080_1920_0_3_1_2_2_2_1_5_1921_3_9_false_s_fu_68_ap_start),
    .ap_done(grp_xFSobel3x3_0_2_1080_1920_0_3_1_2_2_2_1_5_1921_3_9_false_s_fu_68_ap_done),
    .ap_idle(grp_xFSobel3x3_0_2_1080_1920_0_3_1_2_2_2_1_5_1921_3_9_false_s_fu_68_ap_idle),
    .ap_ready(grp_xFSobel3x3_0_2_1080_1920_0_3_1_2_2_2_1_5_1921_3_9_false_s_fu_68_ap_ready),
    .gaussian_mat_data1_dout(gaussian_mat_data1_dout),
    .gaussian_mat_data1_num_data_valid(2'd0),
    .gaussian_mat_data1_fifo_cap(2'd0),
    .gaussian_mat_data1_empty_n(gaussian_mat_data1_empty_n),
    .gaussian_mat_data1_read(grp_xFSobel3x3_0_2_1080_1920_0_3_1_2_2_2_1_5_1921_3_9_false_s_fu_68_gaussian_mat_data1_read),
    .gradx_mat_data2_din(grp_xFSobel3x3_0_2_1080_1920_0_3_1_2_2_2_1_5_1921_3_9_false_s_fu_68_gradx_mat_data2_din),
    .gradx_mat_data2_num_data_valid(2'd0),
    .gradx_mat_data2_fifo_cap(2'd0),
    .gradx_mat_data2_full_n(gradx_mat_data2_full_n),
    .gradx_mat_data2_write(grp_xFSobel3x3_0_2_1080_1920_0_3_1_2_2_2_1_5_1921_3_9_false_s_fu_68_gradx_mat_data2_write),
    .grady_mat_data5_din(grp_xFSobel3x3_0_2_1080_1920_0_3_1_2_2_2_1_5_1921_3_9_false_s_fu_68_grady_mat_data5_din),
    .grady_mat_data5_num_data_valid(2'd0),
    .grady_mat_data5_fifo_cap(2'd0),
    .grady_mat_data5_full_n(grady_mat_data5_full_n),
    .grady_mat_data5_write(grp_xFSobel3x3_0_2_1080_1920_0_3_1_2_2_2_1_5_1921_3_9_false_s_fu_68_grady_mat_data5_write),
    .img_height(imgheight_read_reg_87),
    .img_width(imgwidth_read_reg_82),
    .ap_ext_blocking_n(grp_xFSobel3x3_0_2_1080_1920_0_3_1_2_2_2_1_5_1921_3_9_false_s_fu_68_ap_ext_blocking_n),
    .ap_str_blocking_n(grp_xFSobel3x3_0_2_1080_1920_0_3_1_2_2_2_1_5_1921_3_9_false_s_fu_68_ap_str_blocking_n),
    .ap_int_blocking_n(grp_xFSobel3x3_0_2_1080_1920_0_3_1_2_2_2_1_5_1921_3_9_false_s_fu_68_ap_int_blocking_n)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((grp_xFSobel3x3_0_2_1080_1920_0_3_1_2_2_2_1_5_1921_3_9_false_s_fu_68_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_xFSobel3x3_0_2_1080_1920_0_3_1_2_2_2_1_5_1921_3_9_false_s_fu_68_ap_start_reg <= 1'b0;
    end else begin
        if ((~((real_start == 1'b0) | (img_width_c25_full_n == 1'b0) | (img_height_c21_full_n == 1'b0) | (imgwidth_empty_n == 1'b0) | (imgheight_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            grp_xFSobel3x3_0_2_1080_1920_0_3_1_2_2_2_1_5_1921_3_9_false_s_fu_68_ap_start_reg <= 1'b1;
        end else if ((grp_xFSobel3x3_0_2_1080_1920_0_3_1_2_2_2_1_5_1921_3_9_false_s_fu_68_ap_ready == 1'b1)) begin
            grp_xFSobel3x3_0_2_1080_1920_0_3_1_2_2_2_1_5_1921_3_9_false_s_fu_68_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        imgheight_read_reg_87 <= imgheight_dout;
        imgwidth_read_reg_82 <= imgwidth_dout;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) | (img_width_c25_full_n == 1'b0) | (img_height_c21_full_n == 1'b0) | (imgwidth_empty_n == 1'b0) | (imgheight_empty_n == 1'b0) | (ap_done_reg == 1'b1))) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if ((grp_xFSobel3x3_0_2_1080_1920_0_3_1_2_2_2_1_5_1921_3_9_false_s_fu_68_ap_done == 1'b0)) begin
        ap_ST_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_fsm_state2_blk = 1'b0;
    end
end

always @ (*) begin
    if (((grp_xFSobel3x3_0_2_1080_1920_0_3_1_2_2_2_1_5_1921_3_9_false_s_fu_68_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_wait_0 & ap_sub_ext_blocking_0) == 1'b1)) begin
        ap_ext_blocking_sub_n = 1'b0;
    end else begin
        ap_ext_blocking_sub_n = 1'b1;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_wait_0 & ap_sub_int_blocking_0) == 1'b1)) begin
        ap_int_blocking_sub_n = 1'b0;
    end else begin
        ap_int_blocking_sub_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_wait_0 & ap_sub_str_blocking_0) == 1'b1)) begin
        ap_str_blocking_sub_n = 1'b0;
    end else begin
        ap_str_blocking_sub_n = 1'b1;
    end
end

always @ (*) begin
    if ((grp_xFSobel3x3_0_2_1080_1920_0_3_1_2_2_2_1_5_1921_3_9_false_s_fu_68_ap_ext_blocking_n == 1'b0)) begin
        ap_sub_ext_blocking_0 = 1'b1;
    end else begin
        ap_sub_ext_blocking_0 = 1'b0;
    end
end

always @ (*) begin
    if ((grp_xFSobel3x3_0_2_1080_1920_0_3_1_2_2_2_1_5_1921_3_9_false_s_fu_68_ap_int_blocking_n == 1'b0)) begin
        ap_sub_int_blocking_0 = 1'b1;
    end else begin
        ap_sub_int_blocking_0 = 1'b0;
    end
end

always @ (*) begin
    if ((grp_xFSobel3x3_0_2_1080_1920_0_3_1_2_2_2_1_5_1921_3_9_false_s_fu_68_ap_str_blocking_n == 1'b0)) begin
        ap_sub_str_blocking_0 = 1'b1;
    end else begin
        ap_sub_str_blocking_0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_ST_fsm_state2 == ap_CS_fsm)) begin
        ap_wait_0 = 1'b1;
    end else begin
        ap_wait_0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        gaussian_mat_data1_read = grp_xFSobel3x3_0_2_1080_1920_0_3_1_2_2_2_1_5_1921_3_9_false_s_fu_68_gaussian_mat_data1_read;
    end else begin
        gaussian_mat_data1_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        gradx_mat_data2_write = grp_xFSobel3x3_0_2_1080_1920_0_3_1_2_2_2_1_5_1921_3_9_false_s_fu_68_gradx_mat_data2_write;
    end else begin
        gradx_mat_data2_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        grady_mat_data5_write = grp_xFSobel3x3_0_2_1080_1920_0_3_1_2_2_2_1_5_1921_3_9_false_s_fu_68_grady_mat_data5_write;
    end else begin
        grady_mat_data5_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        img_height_c21_blk_n = img_height_c21_full_n;
    end else begin
        img_height_c21_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (img_width_c25_full_n == 1'b0) | (img_height_c21_full_n == 1'b0) | (imgwidth_empty_n == 1'b0) | (imgheight_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        img_height_c21_write = 1'b1;
    end else begin
        img_height_c21_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        img_width_c25_blk_n = img_width_c25_full_n;
    end else begin
        img_width_c25_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (img_width_c25_full_n == 1'b0) | (img_height_c21_full_n == 1'b0) | (imgwidth_empty_n == 1'b0) | (imgheight_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        img_width_c25_write = 1'b1;
    end else begin
        img_width_c25_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        imgheight_blk_n = imgheight_empty_n;
    end else begin
        imgheight_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (img_width_c25_full_n == 1'b0) | (img_height_c21_full_n == 1'b0) | (imgwidth_empty_n == 1'b0) | (imgheight_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        imgheight_read = 1'b1;
    end else begin
        imgheight_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        imgwidth_blk_n = imgwidth_empty_n;
    end else begin
        imgwidth_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (img_width_c25_full_n == 1'b0) | (img_height_c21_full_n == 1'b0) | (imgwidth_empty_n == 1'b0) | (imgheight_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        imgwidth_read = 1'b1;
    end else begin
        imgwidth_read = 1'b0;
    end
end

always @ (*) begin
    if (((grp_xFSobel3x3_0_2_1080_1920_0_3_1_2_2_2_1_5_1921_3_9_false_s_fu_68_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((start_full_n == 1'b0) & (start_once_reg == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (start_once_reg == 1'b0))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (img_width_c25_full_n == 1'b0) | (img_height_c21_full_n == 1'b0) | (imgwidth_empty_n == 1'b0) | (imgheight_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((grp_xFSobel3x3_0_2_1080_1920_0_3_1_2_2_2_1_5_1921_3_9_false_s_fu_68_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (img_width_c25_full_n == 1'b0) | (img_height_c21_full_n == 1'b0) | (imgwidth_empty_n == 1'b0) | (imgheight_empty_n == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state1_ignore_call11 = ((real_start == 1'b0) | (img_width_c25_full_n == 1'b0) | (img_height_c21_full_n == 1'b0) | (imgwidth_empty_n == 1'b0) | (imgheight_empty_n == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_ext_blocking_n = (ap_ext_blocking_sub_n & 1'b1);

assign ap_int_blocking_cur_n = (imgwidth_blk_n & imgheight_blk_n & img_width_c25_blk_n & img_height_c21_blk_n);

assign ap_int_blocking_n = (ap_int_blocking_sub_n & ap_int_blocking_cur_n);

assign ap_ready = internal_ap_ready;

assign ap_str_blocking_n = (ap_str_blocking_sub_n & 1'b1);

assign gradx_mat_data2_din = grp_xFSobel3x3_0_2_1080_1920_0_3_1_2_2_2_1_5_1921_3_9_false_s_fu_68_gradx_mat_data2_din;

assign grady_mat_data5_din = grp_xFSobel3x3_0_2_1080_1920_0_3_1_2_2_2_1_5_1921_3_9_false_s_fu_68_grady_mat_data5_din;

assign grp_xFSobel3x3_0_2_1080_1920_0_3_1_2_2_2_1_5_1921_3_9_false_s_fu_68_ap_start = grp_xFSobel3x3_0_2_1080_1920_0_3_1_2_2_2_1_5_1921_3_9_false_s_fu_68_ap_start_reg;

assign img_height_c21_din = imgheight_dout;

assign img_width_c25_din = imgwidth_dout;

assign start_out = real_start;

endmodule //canny_accel_xFSobel_0_2_1080_1920_0_3_1_2_2_2_1_5_3_false_s
