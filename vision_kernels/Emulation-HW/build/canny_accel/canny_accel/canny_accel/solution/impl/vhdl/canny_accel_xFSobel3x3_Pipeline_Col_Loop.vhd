-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity canny_accel_xFSobel3x3_Pipeline_Col_Loop is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    gaussian_mat_data1_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    gaussian_mat_data1_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    gaussian_mat_data1_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    gaussian_mat_data1_empty_n : IN STD_LOGIC;
    gaussian_mat_data1_read : OUT STD_LOGIC;
    gradx_mat_data2_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    gradx_mat_data2_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    gradx_mat_data2_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    gradx_mat_data2_full_n : IN STD_LOGIC;
    gradx_mat_data2_write : OUT STD_LOGIC;
    grady_mat_data5_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    grady_mat_data5_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    grady_mat_data5_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    grady_mat_data5_full_n : IN STD_LOGIC;
    grady_mat_data5_write : OUT STD_LOGIC;
    img_width : IN STD_LOGIC_VECTOR (15 downto 0);
    buf_V_4_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    buf_V_4_ce0 : OUT STD_LOGIC;
    buf_V_4_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buf_V_4_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
    buf_V_4_ce1 : OUT STD_LOGIC;
    buf_V_4_we1 : OUT STD_LOGIC;
    buf_V_4_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    buf_V_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    buf_V_ce0 : OUT STD_LOGIC;
    buf_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buf_V_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
    buf_V_ce1 : OUT STD_LOGIC;
    buf_V_we1 : OUT STD_LOGIC;
    buf_V_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    buf_V_3_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    buf_V_3_ce0 : OUT STD_LOGIC;
    buf_V_3_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buf_V_3_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
    buf_V_3_ce1 : OUT STD_LOGIC;
    buf_V_3_we1 : OUT STD_LOGIC;
    buf_V_3_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    row_ind_V_9 : IN STD_LOGIC_VECTOR (12 downto 0);
    row_ind_V_10 : IN STD_LOGIC_VECTOR (12 downto 0);
    row_ind_V_11 : IN STD_LOGIC_VECTOR (12 downto 0);
    sub_i460_i_cast : IN STD_LOGIC_VECTOR (1 downto 0);
    row_ind_V_9_cast : IN STD_LOGIC_VECTOR (1 downto 0);
    spec_select57 : IN STD_LOGIC_VECTOR (0 downto 0);
    row_ind_V_10_cast : IN STD_LOGIC_VECTOR (1 downto 0);
    spec_select61 : IN STD_LOGIC_VECTOR (0 downto 0);
    row_ind_V_11_cast : IN STD_LOGIC_VECTOR (1 downto 0);
    spec_select65 : IN STD_LOGIC_VECTOR (0 downto 0);
    cmp_i_i554_i : IN STD_LOGIC_VECTOR (0 downto 0);
    ap_ext_blocking_n : OUT STD_LOGIC;
    ap_str_blocking_n : OUT STD_LOGIC;
    ap_int_blocking_n : OUT STD_LOGIC );
end;


architecture behav of canny_accel_xFSobel3x3_Pipeline_Col_Loop is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv13_1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal icmp_ln1027_reg_817 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln207_reg_828 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_predicate_op54_read_state2 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal icmp_ln1027_reg_817_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1031_reg_847 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1031_reg_847_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_predicate_op130_write_state5 : BOOLEAN;
    signal ap_predicate_op131_write_state5 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln1027_fu_365_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal gaussian_mat_data1_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal gradx_mat_data2_blk_n : STD_LOGIC;
    signal grady_mat_data5_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal row_ind_V_11_cast_read_reg_765 : STD_LOGIC_VECTOR (1 downto 0);
    signal col_V_reg_810 : STD_LOGIC_VECTOR (12 downto 0);
    signal col_V_reg_810_pp0_iter1_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal icmp_ln1027_reg_817_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1027_reg_817_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1027_1_fu_377_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1027_1_reg_821 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1027_1_reg_821_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1027_1_reg_821_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln207_fu_383_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1031_fu_406_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal src_buf_V_17_reg_851 : STD_LOGIC_VECTOR (7 downto 0);
    signal src_buf_V_15_reg_862 : STD_LOGIC_VECTOR (7 downto 0);
    signal src_buf_V_18_fu_498_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal src_buf_V_18_reg_868 : STD_LOGIC_VECTOR (7 downto 0);
    signal src_buf_V_19_fu_505_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal src_buf_V_19_reg_874 : STD_LOGIC_VECTOR (7 downto 0);
    signal src_buf_V_20_fu_512_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal src_buf_V_20_reg_880 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_condition_exit_pp0_iter3_stage0 : STD_LOGIC;
    signal ap_phi_reg_pp0_iter0_src_buf_V_14_reg_296 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_reg_pp0_iter1_src_buf_V_14_reg_296 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_reg_pp0_iter2_src_buf_V_14_reg_296 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_reg_pp0_iter3_src_buf_V_14_reg_296 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_reg_pp0_iter4_src_buf_V_14_reg_296 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_reg_pp0_iter0_src_buf_V_13_reg_305 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_reg_pp0_iter1_src_buf_V_13_reg_305 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_reg_pp0_iter2_src_buf_V_13_reg_305 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_reg_pp0_iter3_src_buf_V_13_reg_305 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_reg_pp0_iter4_src_buf_V_13_reg_305 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_reg_pp0_iter0_src_buf_V_12_reg_314 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_reg_pp0_iter1_src_buf_V_12_reg_314 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_reg_pp0_iter2_src_buf_V_12_reg_314 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_reg_pp0_iter3_src_buf_V_12_reg_314 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_reg_pp0_iter4_src_buf_V_12_reg_314 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln541_fu_394_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal conv_i377_i_fu_400_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal col_V_7_fu_98 : STD_LOGIC_VECTOR (12 downto 0);
    signal col_V_8_fu_371_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_col_V : STD_LOGIC_VECTOR (12 downto 0);
    signal src_buf_V_fu_102 : STD_LOGIC_VECTOR (7 downto 0);
    signal src_buf_V_3_fu_106 : STD_LOGIC_VECTOR (7 downto 0);
    signal src_buf_V_5_fu_110 : STD_LOGIC_VECTOR (7 downto 0);
    signal src_buf_V_1_fu_114 : STD_LOGIC_VECTOR (7 downto 0);
    signal src_buf_V_4_fu_118 : STD_LOGIC_VECTOR (7 downto 0);
    signal src_buf_V_2_fu_122 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal zext_ln1027_fu_361_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_5_fu_420_p5 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_6_fu_432_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_6_fu_432_p5 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_7_fu_444_p5 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_s_fu_462_p5 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_4_fu_480_p5 : STD_LOGIC_VECTOR (7 downto 0);
    signal src_buf_V_8_fu_491_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal src_buf_V_7_fu_473_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal src_buf_V_6_fu_455_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_fu_543_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal r_V_1_fu_555_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln1495_fu_566_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln1495_1_fu_569_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln1495_2_fu_578_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln1495_3_fu_582_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal ret_V_fu_572_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ret_V_1_fu_586_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln1669_1_fu_562_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln1669_fu_551_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal g_x_V_3_fu_600_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln106_fu_606_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln100_fu_592_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal g_x_V_4_fu_610_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln105_fu_596_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal g_x_V_fu_616_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal r_V_2_fu_627_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal r_V_3_fu_638_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal ret_V_2_fu_649_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ret_V_3_fu_655_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln121_fu_661_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln1669_3_fu_645_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal g_y_V_3_fu_669_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln129_fu_675_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln1669_2_fu_634_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal g_y_V_4_fu_679_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln128_fu_665_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal g_y_V_fu_685_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_int_blocking_cur_n : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component canny_accel_mux_32_13_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (12 downto 0);
        din1 : IN STD_LOGIC_VECTOR (12 downto 0);
        din2 : IN STD_LOGIC_VECTOR (12 downto 0);
        din3 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (12 downto 0) );
    end component;


    component canny_accel_mux_32_8_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (7 downto 0);
        din3 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component canny_accel_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mux_32_13_1_1_U117 : component canny_accel_mux_32_13_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 13,
        din1_WIDTH => 13,
        din2_WIDTH => 13,
        din3_WIDTH => 2,
        dout_WIDTH => 13)
    port map (
        din0 => row_ind_V_9,
        din1 => row_ind_V_10,
        din2 => row_ind_V_11,
        din3 => sub_i460_i_cast,
        dout => tmp_5_fu_420_p5);

    mux_32_8_1_1_U118 : component canny_accel_mux_32_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 2,
        dout_WIDTH => 8)
    port map (
        din0 => buf_V_q0,
        din1 => buf_V_3_q0,
        din2 => buf_V_4_q0,
        din3 => tmp_6_fu_432_p4,
        dout => tmp_6_fu_432_p5);

    mux_32_8_1_1_U119 : component canny_accel_mux_32_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 2,
        dout_WIDTH => 8)
    port map (
        din0 => buf_V_q0,
        din1 => buf_V_3_q0,
        din2 => buf_V_4_q0,
        din3 => row_ind_V_9_cast,
        dout => tmp_7_fu_444_p5);

    mux_32_8_1_1_U120 : component canny_accel_mux_32_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 2,
        dout_WIDTH => 8)
    port map (
        din0 => buf_V_q0,
        din1 => buf_V_3_q0,
        din2 => buf_V_4_q0,
        din3 => row_ind_V_10_cast,
        dout => tmp_s_fu_462_p5);

    mux_32_8_1_1_U121 : component canny_accel_mux_32_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 2,
        dout_WIDTH => 8)
    port map (
        din0 => buf_V_q0,
        din1 => buf_V_3_q0,
        din2 => buf_V_4_q0,
        din3 => row_ind_V_11_cast,
        dout => tmp_4_fu_480_p5);

    flow_control_loop_pipe_sequential_init_U : component canny_accel_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter3_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter3_stage0)) then 
                    ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_phi_reg_pp0_iter4_src_buf_V_12_reg_314_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then
                if (((icmp_ln1031_reg_847 = ap_const_lv1_1) and (icmp_ln1027_reg_817_pp0_iter2_reg = ap_const_lv1_0))) then 
                    ap_phi_reg_pp0_iter4_src_buf_V_12_reg_314 <= src_buf_V_20_fu_512_p3;
                elsif (((icmp_ln1031_reg_847 = ap_const_lv1_0) and (icmp_ln1027_reg_817_pp0_iter2_reg = ap_const_lv1_0))) then 
                    ap_phi_reg_pp0_iter4_src_buf_V_12_reg_314 <= src_buf_V_1_fu_114;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter4_src_buf_V_12_reg_314 <= ap_phi_reg_pp0_iter3_src_buf_V_12_reg_314;
                end if;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter4_src_buf_V_13_reg_305_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then
                if (((icmp_ln1031_reg_847 = ap_const_lv1_1) and (icmp_ln1027_reg_817_pp0_iter2_reg = ap_const_lv1_0))) then 
                    ap_phi_reg_pp0_iter4_src_buf_V_13_reg_305 <= src_buf_V_19_fu_505_p3;
                elsif (((icmp_ln1031_reg_847 = ap_const_lv1_0) and (icmp_ln1027_reg_817_pp0_iter2_reg = ap_const_lv1_0))) then 
                    ap_phi_reg_pp0_iter4_src_buf_V_13_reg_305 <= src_buf_V_4_fu_118;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter4_src_buf_V_13_reg_305 <= ap_phi_reg_pp0_iter3_src_buf_V_13_reg_305;
                end if;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter4_src_buf_V_14_reg_296_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then
                if (((icmp_ln1031_reg_847 = ap_const_lv1_1) and (icmp_ln1027_reg_817_pp0_iter2_reg = ap_const_lv1_0))) then 
                    ap_phi_reg_pp0_iter4_src_buf_V_14_reg_296 <= src_buf_V_18_fu_498_p3;
                elsif (((icmp_ln1031_reg_847 = ap_const_lv1_0) and (icmp_ln1027_reg_817_pp0_iter2_reg = ap_const_lv1_0))) then 
                    ap_phi_reg_pp0_iter4_src_buf_V_14_reg_296 <= src_buf_V_2_fu_122;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter4_src_buf_V_14_reg_296 <= ap_phi_reg_pp0_iter3_src_buf_V_14_reg_296;
                end if;
            end if; 
        end if;
    end process;

    col_V_7_fu_98_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln1027_fu_365_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    col_V_7_fu_98 <= col_V_8_fu_371_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    col_V_7_fu_98 <= ap_const_lv13_0;
                end if;
            end if; 
        end if;
    end process;

    src_buf_V_1_fu_114_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    src_buf_V_1_fu_114 <= ap_const_lv8_0;
                elsif (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (icmp_ln1027_reg_817_pp0_iter2_reg = ap_const_lv1_0))) then 
                    src_buf_V_1_fu_114 <= src_buf_V_20_fu_512_p3;
                end if;
            end if; 
        end if;
    end process;

    src_buf_V_2_fu_122_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    src_buf_V_2_fu_122 <= ap_const_lv8_0;
                elsif (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (icmp_ln1027_reg_817_pp0_iter2_reg = ap_const_lv1_0))) then 
                    src_buf_V_2_fu_122 <= src_buf_V_18_fu_498_p3;
                end if;
            end if; 
        end if;
    end process;

    src_buf_V_3_fu_106_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    src_buf_V_3_fu_106 <= ap_const_lv8_0;
                elsif ((ap_enable_reg_pp0_iter4 = ap_const_logic_1)) then 
                    src_buf_V_3_fu_106 <= ap_phi_reg_pp0_iter4_src_buf_V_13_reg_305;
                end if;
            end if; 
        end if;
    end process;

    src_buf_V_4_fu_118_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    src_buf_V_4_fu_118 <= ap_const_lv8_0;
                elsif (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (icmp_ln1027_reg_817_pp0_iter2_reg = ap_const_lv1_0))) then 
                    src_buf_V_4_fu_118 <= src_buf_V_19_fu_505_p3;
                end if;
            end if; 
        end if;
    end process;

    src_buf_V_5_fu_110_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    src_buf_V_5_fu_110 <= ap_const_lv8_0;
                elsif ((ap_enable_reg_pp0_iter4 = ap_const_logic_1)) then 
                    src_buf_V_5_fu_110 <= ap_phi_reg_pp0_iter4_src_buf_V_14_reg_296;
                end if;
            end if; 
        end if;
    end process;

    src_buf_V_fu_102_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    src_buf_V_fu_102 <= ap_const_lv8_0;
                elsif ((ap_enable_reg_pp0_iter4 = ap_const_logic_1)) then 
                    src_buf_V_fu_102 <= ap_phi_reg_pp0_iter4_src_buf_V_12_reg_314;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1027_fu_365_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                and_ln207_reg_828 <= and_ln207_fu_383_p2;
                icmp_ln1027_1_reg_821 <= icmp_ln1027_1_fu_377_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                col_V_reg_810 <= ap_sig_allocacmp_col_V;
                col_V_reg_810_pp0_iter1_reg <= col_V_reg_810;
                icmp_ln1027_1_reg_821_pp0_iter1_reg <= icmp_ln1027_1_reg_821;
                icmp_ln1027_reg_817 <= icmp_ln1027_fu_365_p2;
                icmp_ln1027_reg_817_pp0_iter1_reg <= icmp_ln1027_reg_817;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                icmp_ln1027_1_reg_821_pp0_iter2_reg <= icmp_ln1027_1_reg_821_pp0_iter1_reg;
                icmp_ln1027_reg_817_pp0_iter2_reg <= icmp_ln1027_reg_817_pp0_iter1_reg;
                icmp_ln1027_reg_817_pp0_iter3_reg <= icmp_ln1027_reg_817_pp0_iter2_reg;
                icmp_ln1031_reg_847_pp0_iter3_reg <= icmp_ln1031_reg_847;
                src_buf_V_15_reg_862 <= src_buf_V_2_fu_122;
                src_buf_V_17_reg_851 <= src_buf_V_1_fu_114;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_phi_reg_pp0_iter1_src_buf_V_12_reg_314 <= ap_phi_reg_pp0_iter0_src_buf_V_12_reg_314;
                ap_phi_reg_pp0_iter1_src_buf_V_13_reg_305 <= ap_phi_reg_pp0_iter0_src_buf_V_13_reg_305;
                ap_phi_reg_pp0_iter1_src_buf_V_14_reg_296 <= ap_phi_reg_pp0_iter0_src_buf_V_14_reg_296;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_phi_reg_pp0_iter2_src_buf_V_12_reg_314 <= ap_phi_reg_pp0_iter1_src_buf_V_12_reg_314;
                ap_phi_reg_pp0_iter2_src_buf_V_13_reg_305 <= ap_phi_reg_pp0_iter1_src_buf_V_13_reg_305;
                ap_phi_reg_pp0_iter2_src_buf_V_14_reg_296 <= ap_phi_reg_pp0_iter1_src_buf_V_14_reg_296;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then
                ap_phi_reg_pp0_iter3_src_buf_V_12_reg_314 <= ap_phi_reg_pp0_iter2_src_buf_V_12_reg_314;
                ap_phi_reg_pp0_iter3_src_buf_V_13_reg_305 <= ap_phi_reg_pp0_iter2_src_buf_V_13_reg_305;
                ap_phi_reg_pp0_iter3_src_buf_V_14_reg_296 <= ap_phi_reg_pp0_iter2_src_buf_V_14_reg_296;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln1027_reg_817_pp0_iter1_reg = ap_const_lv1_0))) then
                icmp_ln1031_reg_847 <= icmp_ln1031_fu_406_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln1027_reg_817_pp0_iter2_reg = ap_const_lv1_0))) then
                src_buf_V_18_reg_868 <= src_buf_V_18_fu_498_p3;
                src_buf_V_19_reg_874 <= src_buf_V_19_fu_505_p3;
                src_buf_V_20_reg_880 <= src_buf_V_20_fu_512_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    and_ln207_fu_383_p2 <= (icmp_ln1027_1_fu_377_p2 and cmp_i_i554_i);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter4, gaussian_mat_data1_empty_n, ap_predicate_op54_read_state2, gradx_mat_data2_full_n, ap_predicate_op130_write_state5, grady_mat_data5_full_n, ap_predicate_op131_write_state5)
    begin
                ap_block_pp0_stage0_01001 <= (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (((ap_predicate_op131_write_state5 = ap_const_boolean_1) and (grady_mat_data5_full_n = ap_const_logic_0)) or ((ap_predicate_op130_write_state5 = ap_const_boolean_1) and (gradx_mat_data2_full_n = ap_const_logic_0)))) or ((ap_predicate_op54_read_state2 = ap_const_boolean_1) and (gaussian_mat_data1_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter4, gaussian_mat_data1_empty_n, ap_predicate_op54_read_state2, gradx_mat_data2_full_n, ap_predicate_op130_write_state5, grady_mat_data5_full_n, ap_predicate_op131_write_state5)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (((ap_predicate_op131_write_state5 = ap_const_boolean_1) and (grady_mat_data5_full_n = ap_const_logic_0)) or ((ap_predicate_op130_write_state5 = ap_const_boolean_1) and (gradx_mat_data2_full_n = ap_const_logic_0)))) or ((ap_predicate_op54_read_state2 = ap_const_boolean_1) and (gaussian_mat_data1_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter4, gaussian_mat_data1_empty_n, ap_predicate_op54_read_state2, gradx_mat_data2_full_n, ap_predicate_op130_write_state5, grady_mat_data5_full_n, ap_predicate_op131_write_state5)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (((ap_predicate_op131_write_state5 = ap_const_boolean_1) and (grady_mat_data5_full_n = ap_const_logic_0)) or ((ap_predicate_op130_write_state5 = ap_const_boolean_1) and (gradx_mat_data2_full_n = ap_const_logic_0)))) or ((ap_predicate_op54_read_state2 = ap_const_boolean_1) and (gaussian_mat_data1_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;

        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state2_pp0_stage0_iter1_assign_proc : process(gaussian_mat_data1_empty_n, ap_predicate_op54_read_state2)
    begin
                ap_block_state2_pp0_stage0_iter1 <= ((ap_predicate_op54_read_state2 = ap_const_boolean_1) and (gaussian_mat_data1_empty_n = ap_const_logic_0));
    end process;

        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state5_pp0_stage0_iter4_assign_proc : process(gradx_mat_data2_full_n, ap_predicate_op130_write_state5, grady_mat_data5_full_n, ap_predicate_op131_write_state5)
    begin
                ap_block_state5_pp0_stage0_iter4 <= (((ap_predicate_op131_write_state5 = ap_const_boolean_1) and (grady_mat_data5_full_n = ap_const_logic_0)) or ((ap_predicate_op130_write_state5 = ap_const_boolean_1) and (gradx_mat_data2_full_n = ap_const_logic_0)));
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln1027_fu_365_p2)
    begin
        if (((icmp_ln1027_fu_365_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_exit_pp0_iter3_stage0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_subdone, icmp_ln1027_reg_817_pp0_iter2_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (icmp_ln1027_reg_817_pp0_iter2_reg = ap_const_lv1_1))) then 
            ap_condition_exit_pp0_iter3_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter3_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter3_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter3_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;
    ap_ext_blocking_n <= (ap_const_logic_1 and ap_const_logic_1);

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_int_blocking_cur_n <= (grady_mat_data5_blk_n and gradx_mat_data2_blk_n and gaussian_mat_data1_blk_n);
    ap_int_blocking_n <= (ap_int_blocking_cur_n and ap_const_logic_1);
    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;
    ap_phi_reg_pp0_iter0_src_buf_V_12_reg_314 <= "XXXXXXXX";
    ap_phi_reg_pp0_iter0_src_buf_V_13_reg_305 <= "XXXXXXXX";
    ap_phi_reg_pp0_iter0_src_buf_V_14_reg_296 <= "XXXXXXXX";

    ap_predicate_op130_write_state5_assign_proc : process(icmp_ln1027_reg_817_pp0_iter3_reg, icmp_ln1031_reg_847_pp0_iter3_reg)
    begin
                ap_predicate_op130_write_state5 <= ((icmp_ln1031_reg_847_pp0_iter3_reg = ap_const_lv1_0) and (icmp_ln1027_reg_817_pp0_iter3_reg = ap_const_lv1_0));
    end process;


    ap_predicate_op131_write_state5_assign_proc : process(icmp_ln1027_reg_817_pp0_iter3_reg, icmp_ln1031_reg_847_pp0_iter3_reg)
    begin
                ap_predicate_op131_write_state5 <= ((icmp_ln1031_reg_847_pp0_iter3_reg = ap_const_lv1_0) and (icmp_ln1027_reg_817_pp0_iter3_reg = ap_const_lv1_0));
    end process;


    ap_predicate_op54_read_state2_assign_proc : process(icmp_ln1027_reg_817, and_ln207_reg_828)
    begin
                ap_predicate_op54_read_state2 <= ((ap_const_lv1_1 = and_ln207_reg_828) and (icmp_ln1027_reg_817 = ap_const_lv1_0));
    end process;


    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_col_V_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, col_V_7_fu_98, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_col_V <= ap_const_lv13_0;
        else 
            ap_sig_allocacmp_col_V <= col_V_7_fu_98;
        end if; 
    end process;

    ap_str_blocking_n <= (ap_const_logic_1 and ap_const_logic_1);
    buf_V_3_address0 <= conv_i377_i_fu_400_p1(11 - 1 downto 0);
    buf_V_3_address1 <= zext_ln541_fu_394_p1(11 - 1 downto 0);

    buf_V_3_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            buf_V_3_ce0 <= ap_const_logic_1;
        else 
            buf_V_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buf_V_3_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            buf_V_3_ce1 <= ap_const_logic_1;
        else 
            buf_V_3_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    buf_V_3_d1 <= gaussian_mat_data1_dout;

    buf_V_3_we1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln1027_reg_817, and_ln207_reg_828, ap_block_pp0_stage0_11001, row_ind_V_11_cast_read_reg_765)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_lv1_1 = and_ln207_reg_828) and (icmp_ln1027_reg_817 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (row_ind_V_11_cast_read_reg_765 = ap_const_lv2_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            buf_V_3_we1 <= ap_const_logic_1;
        else 
            buf_V_3_we1 <= ap_const_logic_0;
        end if; 
    end process;

    buf_V_4_address0 <= conv_i377_i_fu_400_p1(11 - 1 downto 0);
    buf_V_4_address1 <= zext_ln541_fu_394_p1(11 - 1 downto 0);

    buf_V_4_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            buf_V_4_ce0 <= ap_const_logic_1;
        else 
            buf_V_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buf_V_4_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            buf_V_4_ce1 <= ap_const_logic_1;
        else 
            buf_V_4_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    buf_V_4_d1 <= gaussian_mat_data1_dout;

    buf_V_4_we1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln1027_reg_817, and_ln207_reg_828, ap_block_pp0_stage0_11001, row_ind_V_11_cast_read_reg_765)
    begin
        if ((not((row_ind_V_11_cast_read_reg_765 = ap_const_lv2_0)) and not((row_ind_V_11_cast_read_reg_765 = ap_const_lv2_1)) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_lv1_1 = and_ln207_reg_828) and (icmp_ln1027_reg_817 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            buf_V_4_we1 <= ap_const_logic_1;
        else 
            buf_V_4_we1 <= ap_const_logic_0;
        end if; 
    end process;

    buf_V_address0 <= conv_i377_i_fu_400_p1(11 - 1 downto 0);
    buf_V_address1 <= zext_ln541_fu_394_p1(11 - 1 downto 0);

    buf_V_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            buf_V_ce0 <= ap_const_logic_1;
        else 
            buf_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buf_V_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            buf_V_ce1 <= ap_const_logic_1;
        else 
            buf_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    buf_V_d1 <= gaussian_mat_data1_dout;

    buf_V_we1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln1027_reg_817, and_ln207_reg_828, ap_block_pp0_stage0_11001, row_ind_V_11_cast_read_reg_765)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_lv1_1 = and_ln207_reg_828) and (icmp_ln1027_reg_817 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (row_ind_V_11_cast_read_reg_765 = ap_const_lv2_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            buf_V_we1 <= ap_const_logic_1;
        else 
            buf_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    col_V_8_fu_371_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_col_V) + unsigned(ap_const_lv13_1));
    conv_i377_i_fu_400_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(col_V_reg_810_pp0_iter1_reg),64));
    g_x_V_3_fu_600_p2 <= std_logic_vector(unsigned(zext_ln1669_1_fu_562_p1) - unsigned(zext_ln1669_fu_551_p1));
    g_x_V_4_fu_610_p2 <= std_logic_vector(signed(sext_ln106_fu_606_p1) + signed(zext_ln100_fu_592_p1));
    g_x_V_fu_616_p2 <= std_logic_vector(unsigned(g_x_V_4_fu_610_p2) - unsigned(zext_ln105_fu_596_p1));
    g_y_V_3_fu_669_p2 <= std_logic_vector(unsigned(zext_ln121_fu_661_p1) + unsigned(zext_ln1669_3_fu_645_p1));
    g_y_V_4_fu_679_p2 <= std_logic_vector(unsigned(zext_ln129_fu_675_p1) - unsigned(zext_ln1669_2_fu_634_p1));
    g_y_V_fu_685_p2 <= std_logic_vector(unsigned(g_y_V_4_fu_679_p2) - unsigned(zext_ln128_fu_665_p1));

    gaussian_mat_data1_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, gaussian_mat_data1_empty_n, ap_predicate_op54_read_state2, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_predicate_op54_read_state2 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            gaussian_mat_data1_blk_n <= gaussian_mat_data1_empty_n;
        else 
            gaussian_mat_data1_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    gaussian_mat_data1_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_predicate_op54_read_state2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_predicate_op54_read_state2 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            gaussian_mat_data1_read <= ap_const_logic_1;
        else 
            gaussian_mat_data1_read <= ap_const_logic_0;
        end if; 
    end process;


    gradx_mat_data2_blk_n_assign_proc : process(ap_enable_reg_pp0_iter4, gradx_mat_data2_full_n, ap_predicate_op130_write_state5, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_predicate_op130_write_state5 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            gradx_mat_data2_blk_n <= gradx_mat_data2_full_n;
        else 
            gradx_mat_data2_blk_n <= ap_const_logic_1;
        end if; 
    end process;

        gradx_mat_data2_din <= std_logic_vector(IEEE.numeric_std.resize(signed(g_x_V_fu_616_p2),16));


    gradx_mat_data2_write_assign_proc : process(ap_enable_reg_pp0_iter4, ap_predicate_op130_write_state5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_predicate_op130_write_state5 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            gradx_mat_data2_write <= ap_const_logic_1;
        else 
            gradx_mat_data2_write <= ap_const_logic_0;
        end if; 
    end process;


    grady_mat_data5_blk_n_assign_proc : process(ap_enable_reg_pp0_iter4, grady_mat_data5_full_n, ap_predicate_op131_write_state5, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_predicate_op131_write_state5 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            grady_mat_data5_blk_n <= grady_mat_data5_full_n;
        else 
            grady_mat_data5_blk_n <= ap_const_logic_1;
        end if; 
    end process;

        grady_mat_data5_din <= std_logic_vector(IEEE.numeric_std.resize(signed(g_y_V_fu_685_p2),16));


    grady_mat_data5_write_assign_proc : process(ap_enable_reg_pp0_iter4, ap_predicate_op131_write_state5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_predicate_op131_write_state5 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            grady_mat_data5_write <= ap_const_logic_1;
        else 
            grady_mat_data5_write <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln1027_1_fu_377_p2 <= "1" when (unsigned(zext_ln1027_fu_361_p1) < unsigned(img_width)) else "0";
    icmp_ln1027_fu_365_p2 <= "1" when (unsigned(zext_ln1027_fu_361_p1) > unsigned(img_width)) else "0";
    icmp_ln1031_fu_406_p2 <= "1" when (col_V_reg_810_pp0_iter1_reg = ap_const_lv13_0) else "0";
    r_V_1_fu_555_p3 <= (src_buf_V_19_reg_874 & ap_const_lv1_0);
    r_V_2_fu_627_p3 <= (src_buf_V_17_reg_851 & ap_const_lv1_0);
    r_V_3_fu_638_p3 <= (src_buf_V_15_reg_862 & ap_const_lv1_0);
    r_V_fu_543_p3 <= (src_buf_V_3_fu_106 & ap_const_lv1_0);
    ret_V_1_fu_586_p2 <= std_logic_vector(unsigned(zext_ln1495_2_fu_578_p1) + unsigned(zext_ln1495_3_fu_582_p1));
    ret_V_2_fu_649_p2 <= std_logic_vector(unsigned(zext_ln1495_3_fu_582_p1) + unsigned(zext_ln1495_1_fu_569_p1));
    ret_V_3_fu_655_p2 <= std_logic_vector(unsigned(zext_ln1495_2_fu_578_p1) + unsigned(zext_ln1495_fu_566_p1));
    ret_V_fu_572_p2 <= std_logic_vector(unsigned(zext_ln1495_fu_566_p1) + unsigned(zext_ln1495_1_fu_569_p1));
    row_ind_V_11_cast_read_reg_765 <= row_ind_V_11_cast;
        sext_ln106_fu_606_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(g_x_V_3_fu_600_p2),11));

    src_buf_V_18_fu_498_p3 <= 
        src_buf_V_8_fu_491_p3 when (icmp_ln1027_1_reg_821_pp0_iter2_reg(0) = '1') else 
        src_buf_V_2_fu_122;
    src_buf_V_19_fu_505_p3 <= 
        src_buf_V_7_fu_473_p3 when (icmp_ln1027_1_reg_821_pp0_iter2_reg(0) = '1') else 
        src_buf_V_4_fu_118;
    src_buf_V_20_fu_512_p3 <= 
        src_buf_V_6_fu_455_p3 when (icmp_ln1027_1_reg_821_pp0_iter2_reg(0) = '1') else 
        src_buf_V_1_fu_114;
    src_buf_V_6_fu_455_p3 <= 
        tmp_6_fu_432_p5 when (spec_select57(0) = '1') else 
        tmp_7_fu_444_p5;
    src_buf_V_7_fu_473_p3 <= 
        tmp_6_fu_432_p5 when (spec_select61(0) = '1') else 
        tmp_s_fu_462_p5;
    src_buf_V_8_fu_491_p3 <= 
        tmp_6_fu_432_p5 when (spec_select65(0) = '1') else 
        tmp_4_fu_480_p5;
    tmp_6_fu_432_p4 <= tmp_5_fu_420_p5(2 - 1 downto 0);
    zext_ln100_fu_592_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_fu_572_p2),11));
    zext_ln1027_fu_361_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_col_V),16));
    zext_ln105_fu_596_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_1_fu_586_p2),11));
    zext_ln121_fu_661_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_2_fu_649_p2),10));
    zext_ln128_fu_665_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_3_fu_655_p2),11));
    zext_ln129_fu_675_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(g_y_V_3_fu_669_p2),11));
    zext_ln1495_1_fu_569_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(src_buf_V_18_reg_868),9));
    zext_ln1495_2_fu_578_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(src_buf_V_fu_102),9));
    zext_ln1495_3_fu_582_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(src_buf_V_5_fu_110),9));
    zext_ln1495_fu_566_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(src_buf_V_20_reg_880),9));
    zext_ln1669_1_fu_562_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_1_fu_555_p3),10));
    zext_ln1669_2_fu_634_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_2_fu_627_p3),11));
    zext_ln1669_3_fu_645_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_3_fu_638_p3),10));
    zext_ln1669_fu_551_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_fu_543_p3),10));
    zext_ln541_fu_394_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(col_V_reg_810),64));
end behav;
