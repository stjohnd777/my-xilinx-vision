// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module canny_accel_AxiStream2MatStream_2_Pipeline_MMIterInLoopRow (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        ldata1_dout,
        ldata1_num_data_valid,
        ldata1_fifo_cap,
        ldata1_empty_n,
        ldata1_read,
        in_mat_data1_din,
        in_mat_data1_num_data_valid,
        in_mat_data1_fifo_cap,
        in_mat_data1_full_n,
        in_mat_data1_write,
        bound,
        sext_ln1075,
        cols_bound_per_npc_load,
        sub,
        last_blk_width_load,
        sub3,
        add_ln1075,
        ap_ext_blocking_n,
        ap_str_blocking_n,
        ap_int_blocking_n
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [63:0] ldata1_dout;
input  [1:0] ldata1_num_data_valid;
input  [1:0] ldata1_fifo_cap;
input   ldata1_empty_n;
output   ldata1_read;
output  [7:0] in_mat_data1_din;
input  [1:0] in_mat_data1_num_data_valid;
input  [1:0] in_mat_data1_fifo_cap;
input   in_mat_data1_full_n;
output   in_mat_data1_write;
input  [31:0] bound;
input  [4:0] sext_ln1075;
input  [31:0] cols_bound_per_npc_load;
input  [31:0] sub;
input  [3:0] last_blk_width_load;
input  [6:0] sub3;
input  [6:0] add_ln1075;
output   ap_ext_blocking_n;
output   ap_str_blocking_n;
output   ap_int_blocking_n;

reg ap_idle;
reg ldata1_read;
reg in_mat_data1_write;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
reg   [0:0] icmp_ln1055_reg_779;
reg   [0:0] icmp_ln1066_reg_788;
reg    ap_predicate_op107_read_state3;
reg    ap_block_state3_pp0_stage0_iter2;
reg   [0:0] icmp_ln1085_reg_847;
reg   [0:0] icmp_ln1085_reg_847_pp0_iter2_reg;
reg    ap_block_state4_pp0_stage0_iter3;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln1055_fu_207_p2;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    ldata1_blk_n;
wire    ap_block_pp0_stage0;
reg    in_mat_data1_blk_n;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] bLast_width_fu_218_p2;
reg   [0:0] bLast_width_reg_783;
reg   [0:0] bLast_width_reg_783_pp0_iter2_reg;
wire   [0:0] icmp_ln1066_fu_249_p2;
wire   [0:0] icmp_ln628_fu_278_p2;
reg   [0:0] icmp_ln628_reg_792;
wire   [5:0] trunc_ln628_fu_284_p1;
reg   [5:0] trunc_ln628_reg_798;
wire   [63:0] lshr_ln628_4_fu_322_p2;
reg   [63:0] lshr_ln628_4_reg_804;
wire   [0:0] icmp_ln1067_fu_339_p2;
reg   [0:0] icmp_ln1067_reg_809;
wire   [5:0] trunc_ln1068_fu_345_p1;
reg   [5:0] trunc_ln1068_reg_814;
wire   [2:0] trunc_ln1068_1_fu_349_p1;
reg   [2:0] trunc_ln1068_1_reg_819;
wire   [5:0] sub_ln628_1_fu_371_p2;
reg   [5:0] sub_ln628_1_reg_824;
wire   [0:0] icmp_ln368_fu_377_p2;
reg   [0:0] icmp_ln368_reg_829;
wire   [2:0] trunc_ln368_fu_383_p1;
reg   [2:0] trunc_ln368_reg_835;
wire   [7:0] and_ln368_fu_433_p2;
reg   [7:0] and_ln368_reg_841;
wire   [0:0] icmp_ln1085_fu_450_p2;
wire   [7:0] localbuffer_V_6_fu_525_p1;
wire   [7:0] p_Result_66_fu_671_p2;
wire   [7:0] ap_phi_reg_pp0_iter0_localbuffer_V_8_reg_165;
reg   [7:0] ap_phi_reg_pp0_iter1_localbuffer_V_8_reg_165;
reg   [7:0] ap_phi_reg_pp0_iter2_localbuffer_V_8_reg_165;
reg   [7:0] ap_phi_reg_pp0_iter3_localbuffer_V_8_reg_165;
reg   [31:0] rem_fu_94;
wire   [31:0] rem_3_fu_328_p2;
wire   [31:0] rem_2_fu_439_p2;
wire    ap_loop_init;
reg   [30:0] i_fu_98;
wire   [30:0] add_ln1055_fu_212_p2;
reg   [31:0] j_fu_102;
wire   [31:0] j_7_fu_461_p3;
reg   [63:0] p_Val2_s_fu_106;
reg    ap_block_pp0_stage0_01001;
wire   [31:0] zext_ln1055_fu_203_p1;
wire   [3:0] xf_bits_per_clock_fu_223_p3;
wire   [6:0] ptr_width_minus_fu_238_p3;
wire   [31:0] zext_ln1061_fu_230_p1;
wire   [6:0] select_ln1075_fu_255_p3;
wire   [31:0] zext_ln1075_fu_262_p1;
wire   [31:0] sub_ln1075_1_fu_272_p2;
wire   [31:0] sub_ln1075_fu_266_p2;
wire   [5:0] trunc_ln628_1_fu_288_p1;
wire   [5:0] sub_ln628_2_fu_292_p2;
wire   [5:0] sub_ln628_3_fu_298_p2;
wire   [5:0] select_ln628_fu_304_p3;
wire   [5:0] xor_ln628_2_fu_312_p2;
wire   [63:0] zext_ln628_4_fu_318_p1;
wire   [4:0] zext_ln1061_1_fu_234_p1;
wire  signed [4:0] add_ln1072_fu_353_p2;
wire  signed [5:0] sext_ln1072_1_fu_363_p1;
wire   [5:0] trunc_ln1072_fu_367_p1;
wire  signed [31:0] sext_ln1072_fu_359_p1;
wire   [2:0] trunc_ln368_1_fu_387_p1;
wire   [2:0] select_ln368_fu_391_p3;
wire   [2:0] select_ln368_3_fu_399_p3;
wire   [2:0] xor_ln368_1_fu_407_p2;
wire   [7:0] zext_ln368_2_fu_413_p1;
wire   [7:0] zext_ln368_3_fu_417_p1;
wire   [7:0] shl_ln368_1_fu_421_p2;
wire   [7:0] lshr_ln368_1_fu_427_p2;
wire   [31:0] zext_ln1062_fu_245_p1;
wire   [31:0] add_ln1087_fu_455_p2;
reg   [63:0] tmp_9_fu_482_p4;
wire   [5:0] xor_ln628_1_fu_492_p2;
wire   [5:0] select_ln628_2_fu_504_p3;
wire   [63:0] select_ln628_1_fu_497_p3;
wire   [63:0] zext_ln628_3_fu_510_p1;
wire   [63:0] lshr_ln628_3_fu_514_p2;
wire   [63:0] p_Result_67_fu_520_p2;
wire   [5:0] sub_ln628_fu_529_p2;
wire   [63:0] zext_ln628_fu_534_p1;
wire   [63:0] zext_ln628_1_fu_538_p1;
wire   [63:0] lshr_ln628_fu_542_p2;
wire   [63:0] lshr_ln628_1_fu_548_p2;
wire   [63:0] p_Result_s_fu_554_p2;
wire   [2:0] sub_ln368_fu_564_p2;
wire   [7:0] zext_ln368_fu_569_p1;
wire   [7:0] tmp_10_fu_560_p1;
wire   [7:0] lshr_ln368_fu_573_p2;
wire   [7:0] p_Result_64_fu_579_p2;
wire   [5:0] xor_ln628_fu_592_p2;
wire   [63:0] zext_ln628_2_fu_597_p1;
wire   [63:0] lshr_ln628_2_fu_601_p2;
wire   [63:0] p_Result_65_fu_607_p2;
wire   [2:0] xor_ln368_fu_617_p2;
wire   [2:0] select_ln368_4_fu_622_p3;
wire   [7:0] tmp_11_fu_613_p1;
wire   [7:0] zext_ln368_1_fu_628_p1;
wire   [7:0] shl_ln368_fu_632_p2;
reg   [7:0] tmp_fu_638_p4;
wire   [7:0] localbuffer_V_fu_585_p3;
wire   [7:0] xor_ln368_2_fu_655_p2;
wire   [7:0] select_ln368_5_fu_648_p3;
wire   [7:0] and_ln368_1_fu_660_p2;
wire   [7:0] and_ln368_2_fu_666_p2;
wire   [2:0] trunc_ln628_2_fu_682_p1;
wire   [2:0] xor_ln628_3_fu_685_p2;
wire   [7:0] zext_ln628_5_fu_691_p1;
wire   [7:0] lshr_ln628_5_fu_695_p2;
wire   [7:0] select_ln1060_fu_701_p3;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_int_blocking_cur_n;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_612;
reg    ap_condition_615;
reg    ap_condition_618;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_done_reg = 1'b0;
end

canny_accel_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter1_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        if (((icmp_ln1066_reg_788 == 1'd0) & (icmp_ln1055_reg_779 == 1'd1))) begin
            ap_phi_reg_pp0_iter3_localbuffer_V_8_reg_165 <= localbuffer_V_6_fu_525_p1;
        end else if (((icmp_ln1066_reg_788 == 1'd1) & (icmp_ln1055_reg_779 == 1'd1))) begin
            ap_phi_reg_pp0_iter3_localbuffer_V_8_reg_165 <= p_Result_66_fu_671_p2;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter3_localbuffer_V_8_reg_165 <= ap_phi_reg_pp0_iter2_localbuffer_V_8_reg_165;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            i_fu_98 <= 31'd0;
        end else if (((icmp_ln1055_fu_207_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            i_fu_98 <= add_ln1055_fu_212_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            j_fu_102 <= 32'd0;
        end else if (((icmp_ln1055_fu_207_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            j_fu_102 <= j_7_fu_461_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            p_Val2_s_fu_106 <= 64'd0;
        end else if ((1'b1 == ap_condition_612)) begin
            p_Val2_s_fu_106 <= ldata1_dout;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            rem_fu_94 <= 32'd0;
        end else if ((1'b1 == ap_condition_618)) begin
            rem_fu_94 <= rem_2_fu_439_p2;
        end else if ((1'b1 == ap_condition_615)) begin
            rem_fu_94 <= rem_3_fu_328_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1055_fu_207_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln1066_fu_249_p2 == 1'd1))) begin
        and_ln368_reg_841 <= and_ln368_fu_433_p2;
        icmp_ln1067_reg_809 <= icmp_ln1067_fu_339_p2;
        icmp_ln368_reg_829 <= icmp_ln368_fu_377_p2;
        sub_ln628_1_reg_824 <= sub_ln628_1_fu_371_p2;
        trunc_ln1068_1_reg_819 <= trunc_ln1068_1_fu_349_p1;
        trunc_ln1068_reg_814 <= trunc_ln1068_fu_345_p1;
        trunc_ln368_reg_835 <= trunc_ln368_fu_383_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
        icmp_ln1055_reg_779 <= icmp_ln1055_fu_207_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_localbuffer_V_8_reg_165 <= ap_phi_reg_pp0_iter0_localbuffer_V_8_reg_165;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter2_localbuffer_V_8_reg_165 <= ap_phi_reg_pp0_iter1_localbuffer_V_8_reg_165;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1055_fu_207_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        bLast_width_reg_783 <= bLast_width_fu_218_p2;
        icmp_ln1066_reg_788 <= icmp_ln1066_fu_249_p2;
        icmp_ln1085_reg_847 <= icmp_ln1085_fu_450_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        bLast_width_reg_783_pp0_iter2_reg <= bLast_width_reg_783;
        icmp_ln1085_reg_847_pp0_iter2_reg <= icmp_ln1085_reg_847;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1055_fu_207_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln1066_fu_249_p2 == 1'd0))) begin
        icmp_ln628_reg_792 <= icmp_ln628_fu_278_p2;
        lshr_ln628_4_reg_804 <= lshr_ln628_4_fu_322_p2;
        trunc_ln628_reg_798 <= trunc_ln628_fu_284_p1;
    end
end

always @ (*) begin
    if (((icmp_ln1055_fu_207_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln1085_reg_847_pp0_iter2_reg == 1'd1) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        in_mat_data1_blk_n = in_mat_data1_full_n;
    end else begin
        in_mat_data1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln1085_reg_847_pp0_iter2_reg == 1'd1) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        in_mat_data1_write = 1'b1;
    end else begin
        in_mat_data1_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_predicate_op107_read_state3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        ldata1_blk_n = ldata1_empty_n;
    end else begin
        ldata1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op107_read_state3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        ldata1_read = 1'b1;
    end else begin
        ldata1_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln1055_fu_212_p2 = (i_fu_98 + 31'd1);

assign add_ln1072_fu_353_p2 = ($signed(zext_ln1061_1_fu_234_p1) + $signed(5'd31));

assign add_ln1087_fu_455_p2 = (j_fu_102 + 32'd1);

assign and_ln368_1_fu_660_p2 = (xor_ln368_2_fu_655_p2 & localbuffer_V_fu_585_p3);

assign and_ln368_2_fu_666_p2 = (select_ln368_5_fu_648_p3 & and_ln368_reg_841);

assign and_ln368_fu_433_p2 = (shl_ln368_1_fu_421_p2 & lshr_ln368_1_fu_427_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((icmp_ln1085_reg_847_pp0_iter2_reg == 1'd1) & (in_mat_data1_full_n == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((ap_predicate_op107_read_state3 == 1'b1) & (ldata1_empty_n == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((icmp_ln1085_reg_847_pp0_iter2_reg == 1'd1) & (in_mat_data1_full_n == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((ap_predicate_op107_read_state3 == 1'b1) & (ldata1_empty_n == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((icmp_ln1085_reg_847_pp0_iter2_reg == 1'd1) & (in_mat_data1_full_n == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((ap_predicate_op107_read_state3 == 1'b1) & (ldata1_empty_n == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)));
end

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter2 = ((ap_predicate_op107_read_state3 == 1'b1) & (ldata1_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state4_pp0_stage0_iter3 = ((icmp_ln1085_reg_847_pp0_iter2_reg == 1'd1) & (in_mat_data1_full_n == 1'b0));
end

always @ (*) begin
    ap_condition_612 = ((icmp_ln1066_reg_788 == 1'd1) & (icmp_ln1055_reg_779 == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1));
end

always @ (*) begin
    ap_condition_615 = ((icmp_ln1055_fu_207_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln1066_fu_249_p2 == 1'd0));
end

always @ (*) begin
    ap_condition_618 = ((icmp_ln1055_fu_207_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln1066_fu_249_p2 == 1'd1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_ext_blocking_n = (1'b1 & 1'b1);

assign ap_int_blocking_cur_n = (ldata1_blk_n & in_mat_data1_blk_n);

assign ap_int_blocking_n = (ap_int_blocking_cur_n & 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter1_stage0;

assign ap_phi_reg_pp0_iter0_localbuffer_V_8_reg_165 = 'bx;

always @ (*) begin
    ap_predicate_op107_read_state3 = ((icmp_ln1066_reg_788 == 1'd1) & (icmp_ln1055_reg_779 == 1'd1));
end

assign ap_str_blocking_n = (1'b1 & 1'b1);

assign bLast_width_fu_218_p2 = ((j_fu_102 == sub) ? 1'b1 : 1'b0);

assign icmp_ln1055_fu_207_p2 = (($signed(zext_ln1055_fu_203_p1) < $signed(bound)) ? 1'b1 : 1'b0);

assign icmp_ln1066_fu_249_p2 = (($signed(zext_ln1061_fu_230_p1) > $signed(rem_fu_94)) ? 1'b1 : 1'b0);

assign icmp_ln1067_fu_339_p2 = ((rem_fu_94 == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln1085_fu_450_p2 = (($signed(j_fu_102) < $signed(cols_bound_per_npc_load)) ? 1'b1 : 1'b0);

assign icmp_ln368_fu_377_p2 = ((rem_fu_94 > sext_ln1072_fu_359_p1) ? 1'b1 : 1'b0);

assign icmp_ln628_fu_278_p2 = ((sub_ln1075_1_fu_272_p2 > sub_ln1075_fu_266_p2) ? 1'b1 : 1'b0);

assign in_mat_data1_din = (select_ln1060_fu_701_p3 & ap_phi_reg_pp0_iter3_localbuffer_V_8_reg_165);

assign j_7_fu_461_p3 = ((bLast_width_fu_218_p2[0:0] == 1'b1) ? 32'd0 : add_ln1087_fu_455_p2);

assign localbuffer_V_6_fu_525_p1 = p_Result_67_fu_520_p2[7:0];

assign localbuffer_V_fu_585_p3 = ((icmp_ln1067_reg_809[0:0] == 1'b1) ? 8'd0 : p_Result_64_fu_579_p2);

assign lshr_ln368_1_fu_427_p2 = 8'd255 >> zext_ln368_3_fu_417_p1;

assign lshr_ln368_fu_573_p2 = 8'd255 >> zext_ln368_fu_569_p1;

assign lshr_ln628_1_fu_548_p2 = 64'd18446744073709551615 >> zext_ln628_1_fu_538_p1;

assign lshr_ln628_2_fu_601_p2 = 64'd18446744073709551615 >> zext_ln628_2_fu_597_p1;

assign lshr_ln628_3_fu_514_p2 = select_ln628_1_fu_497_p3 >> zext_ln628_3_fu_510_p1;

assign lshr_ln628_4_fu_322_p2 = 64'd18446744073709551615 >> zext_ln628_4_fu_318_p1;

assign lshr_ln628_5_fu_695_p2 = 8'd255 >> zext_ln628_5_fu_691_p1;

assign lshr_ln628_fu_542_p2 = p_Val2_s_fu_106 >> zext_ln628_fu_534_p1;

assign p_Result_64_fu_579_p2 = (tmp_10_fu_560_p1 & lshr_ln368_fu_573_p2);

assign p_Result_65_fu_607_p2 = (lshr_ln628_2_fu_601_p2 & ldata1_dout);

assign p_Result_66_fu_671_p2 = (and_ln368_2_fu_666_p2 | and_ln368_1_fu_660_p2);

assign p_Result_67_fu_520_p2 = (lshr_ln628_4_reg_804 & lshr_ln628_3_fu_514_p2);

assign p_Result_s_fu_554_p2 = (lshr_ln628_fu_542_p2 & lshr_ln628_1_fu_548_p2);

assign ptr_width_minus_fu_238_p3 = ((bLast_width_fu_218_p2[0:0] == 1'b1) ? sub3 : 7'd56);

assign rem_2_fu_439_p2 = (rem_fu_94 + zext_ln1062_fu_245_p1);

assign rem_3_fu_328_p2 = (rem_fu_94 - zext_ln1061_fu_230_p1);

assign select_ln1060_fu_701_p3 = ((bLast_width_reg_783_pp0_iter2_reg[0:0] == 1'b1) ? lshr_ln628_5_fu_695_p2 : 8'd255);

assign select_ln1075_fu_255_p3 = ((bLast_width_fu_218_p2[0:0] == 1'b1) ? add_ln1075 : 7'd71);

assign select_ln368_3_fu_399_p3 = ((icmp_ln368_fu_377_p2[0:0] == 1'b1) ? trunc_ln368_1_fu_387_p1 : trunc_ln368_fu_383_p1);

assign select_ln368_4_fu_622_p3 = ((icmp_ln368_reg_829[0:0] == 1'b1) ? xor_ln368_fu_617_p2 : trunc_ln368_reg_835);

assign select_ln368_5_fu_648_p3 = ((icmp_ln368_reg_829[0:0] == 1'b1) ? tmp_fu_638_p4 : shl_ln368_fu_632_p2);

assign select_ln368_fu_391_p3 = ((icmp_ln368_fu_377_p2[0:0] == 1'b1) ? trunc_ln368_fu_383_p1 : trunc_ln368_1_fu_387_p1);

assign select_ln628_1_fu_497_p3 = ((icmp_ln628_reg_792[0:0] == 1'b1) ? tmp_9_fu_482_p4 : p_Val2_s_fu_106);

assign select_ln628_2_fu_504_p3 = ((icmp_ln628_reg_792[0:0] == 1'b1) ? xor_ln628_1_fu_492_p2 : trunc_ln628_reg_798);

assign select_ln628_fu_304_p3 = ((icmp_ln628_fu_278_p2[0:0] == 1'b1) ? sub_ln628_2_fu_292_p2 : sub_ln628_3_fu_298_p2);

assign sext_ln1072_1_fu_363_p1 = add_ln1072_fu_353_p2;

assign sext_ln1072_fu_359_p1 = add_ln1072_fu_353_p2;

assign shl_ln368_1_fu_421_p2 = 8'd255 << zext_ln368_2_fu_413_p1;

assign shl_ln368_fu_632_p2 = tmp_11_fu_613_p1 << zext_ln368_1_fu_628_p1;

assign sub_ln1075_1_fu_272_p2 = (32'd64 - rem_fu_94);

assign sub_ln1075_fu_266_p2 = (zext_ln1075_fu_262_p1 - rem_fu_94);

assign sub_ln368_fu_564_p2 = (3'd0 - trunc_ln1068_1_reg_819);

assign sub_ln628_1_fu_371_p2 = ($signed(sext_ln1072_1_fu_363_p1) - $signed(trunc_ln1072_fu_367_p1));

assign sub_ln628_2_fu_292_p2 = (trunc_ln628_fu_284_p1 - trunc_ln628_1_fu_288_p1);

assign sub_ln628_3_fu_298_p2 = (trunc_ln628_1_fu_288_p1 - trunc_ln628_fu_284_p1);

assign sub_ln628_fu_529_p2 = (6'd0 - trunc_ln1068_reg_814);

assign tmp_10_fu_560_p1 = p_Result_s_fu_554_p2[7:0];

assign tmp_11_fu_613_p1 = p_Result_65_fu_607_p2[7:0];

integer ap_tvar_int_0;

always @ (p_Val2_s_fu_106) begin
    for (ap_tvar_int_0 = 64 - 1; ap_tvar_int_0 >= 0; ap_tvar_int_0 = ap_tvar_int_0 - 1) begin
        if (ap_tvar_int_0 > 63 - 0) begin
            tmp_9_fu_482_p4[ap_tvar_int_0] = 1'b0;
        end else begin
            tmp_9_fu_482_p4[ap_tvar_int_0] = p_Val2_s_fu_106[63 - ap_tvar_int_0];
        end
    end
end

integer ap_tvar_int_1;

always @ (shl_ln368_fu_632_p2) begin
    for (ap_tvar_int_1 = 8 - 1; ap_tvar_int_1 >= 0; ap_tvar_int_1 = ap_tvar_int_1 - 1) begin
        if (ap_tvar_int_1 > 7 - 0) begin
            tmp_fu_638_p4[ap_tvar_int_1] = 1'b0;
        end else begin
            tmp_fu_638_p4[ap_tvar_int_1] = shl_ln368_fu_632_p2[7 - ap_tvar_int_1];
        end
    end
end

assign trunc_ln1068_1_fu_349_p1 = rem_fu_94[2:0];

assign trunc_ln1068_fu_345_p1 = rem_fu_94[5:0];

assign trunc_ln1072_fu_367_p1 = rem_fu_94[5:0];

assign trunc_ln368_1_fu_387_p1 = add_ln1072_fu_353_p2[2:0];

assign trunc_ln368_fu_383_p1 = rem_fu_94[2:0];

assign trunc_ln628_1_fu_288_p1 = sub_ln1075_fu_266_p2[5:0];

assign trunc_ln628_2_fu_682_p1 = sext_ln1075[2:0];

assign trunc_ln628_fu_284_p1 = sub_ln1075_1_fu_272_p2[5:0];

assign xf_bits_per_clock_fu_223_p3 = ((bLast_width_fu_218_p2[0:0] == 1'b1) ? last_blk_width_load : 4'd8);

assign xor_ln368_1_fu_407_p2 = (select_ln368_fu_391_p3 ^ 3'd7);

assign xor_ln368_2_fu_655_p2 = (8'd255 ^ and_ln368_reg_841);

assign xor_ln368_fu_617_p2 = (trunc_ln368_reg_835 ^ 3'd7);

assign xor_ln628_1_fu_492_p2 = (trunc_ln628_reg_798 ^ 6'd63);

assign xor_ln628_2_fu_312_p2 = (select_ln628_fu_304_p3 ^ 6'd63);

assign xor_ln628_3_fu_685_p2 = (trunc_ln628_2_fu_682_p1 ^ 3'd7);

assign xor_ln628_fu_592_p2 = (sub_ln628_1_reg_824 ^ 6'd63);

assign zext_ln1055_fu_203_p1 = i_fu_98;

assign zext_ln1061_1_fu_234_p1 = xf_bits_per_clock_fu_223_p3;

assign zext_ln1061_fu_230_p1 = xf_bits_per_clock_fu_223_p3;

assign zext_ln1062_fu_245_p1 = ptr_width_minus_fu_238_p3;

assign zext_ln1075_fu_262_p1 = select_ln1075_fu_255_p3;

assign zext_ln368_1_fu_628_p1 = select_ln368_4_fu_622_p3;

assign zext_ln368_2_fu_413_p1 = select_ln368_3_fu_399_p3;

assign zext_ln368_3_fu_417_p1 = xor_ln368_1_fu_407_p2;

assign zext_ln368_fu_569_p1 = sub_ln368_fu_564_p2;

assign zext_ln628_1_fu_538_p1 = sub_ln628_fu_529_p2;

assign zext_ln628_2_fu_597_p1 = xor_ln628_fu_592_p2;

assign zext_ln628_3_fu_510_p1 = select_ln628_2_fu_504_p3;

assign zext_ln628_4_fu_318_p1 = xor_ln628_2_fu_312_p2;

assign zext_ln628_5_fu_691_p1 = xor_ln628_3_fu_685_p2;

assign zext_ln628_fu_534_p1 = sub_ln628_fu_529_p2;

endmodule //canny_accel_AxiStream2MatStream_2_Pipeline_MMIterInLoopRow
