-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity canny_accel_xFDuplicate_rows_2_1080_1920_3_1_2_2_2_2_2_2_5_1920_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    gradx_mat_data2_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    gradx_mat_data2_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    gradx_mat_data2_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    gradx_mat_data2_empty_n : IN STD_LOGIC;
    gradx_mat_data2_read : OUT STD_LOGIC;
    grady_mat_data5_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    grady_mat_data5_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    grady_mat_data5_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    grady_mat_data5_empty_n : IN STD_LOGIC;
    grady_mat_data5_read : OUT STD_LOGIC;
    gradx1_mat_data3_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    gradx1_mat_data3_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    gradx1_mat_data3_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    gradx1_mat_data3_full_n : IN STD_LOGIC;
    gradx1_mat_data3_write : OUT STD_LOGIC;
    gradx2_mat_data4_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    gradx2_mat_data4_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    gradx2_mat_data4_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    gradx2_mat_data4_full_n : IN STD_LOGIC;
    gradx2_mat_data4_write : OUT STD_LOGIC;
    grady1_mat_data6_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    grady1_mat_data6_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    grady1_mat_data6_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    grady1_mat_data6_full_n : IN STD_LOGIC;
    grady1_mat_data6_write : OUT STD_LOGIC;
    grady2_mat_data7_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    grady2_mat_data7_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    grady2_mat_data7_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    grady2_mat_data7_full_n : IN STD_LOGIC;
    grady2_mat_data7_write : OUT STD_LOGIC;
    img_height_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    img_height_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    img_height_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    img_height_empty_n : IN STD_LOGIC;
    img_height_read : OUT STD_LOGIC;
    img_width_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    img_width_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    img_width_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    img_width_empty_n : IN STD_LOGIC;
    img_width_read : OUT STD_LOGIC;
    img_height_c20_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    img_height_c20_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    img_height_c20_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    img_height_c20_full_n : IN STD_LOGIC;
    img_height_c20_write : OUT STD_LOGIC;
    img_width_c24_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    img_width_c24_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    img_width_c24_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    img_width_c24_full_n : IN STD_LOGIC;
    img_width_c24_write : OUT STD_LOGIC;
    ap_ext_blocking_n : OUT STD_LOGIC;
    ap_str_blocking_n : OUT STD_LOGIC;
    ap_int_blocking_n : OUT STD_LOGIC );
end;


architecture behav of canny_accel_xFDuplicate_rows_2_1080_1920_3_1_2_2_2_2_2_2_5_1920_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv13_1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";

attribute shreg_extract : string;
    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal img_height_blk_n : STD_LOGIC;
    signal img_width_blk_n : STD_LOGIC;
    signal img_height_c20_blk_n : STD_LOGIC;
    signal img_width_c24_blk_n : STD_LOGIC;
    signal img_width_read_reg_146 : STD_LOGIC_VECTOR (15 downto 0);
    signal img_height_read_reg_151 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_xFDuplicate_rows_Pipeline_Col_Loop_fu_94_ap_start : STD_LOGIC;
    signal grp_xFDuplicate_rows_Pipeline_Col_Loop_fu_94_ap_done : STD_LOGIC;
    signal grp_xFDuplicate_rows_Pipeline_Col_Loop_fu_94_ap_idle : STD_LOGIC;
    signal grp_xFDuplicate_rows_Pipeline_Col_Loop_fu_94_ap_ready : STD_LOGIC;
    signal grp_xFDuplicate_rows_Pipeline_Col_Loop_fu_94_grady_mat_data5_read : STD_LOGIC;
    signal grp_xFDuplicate_rows_Pipeline_Col_Loop_fu_94_gradx_mat_data2_read : STD_LOGIC;
    signal grp_xFDuplicate_rows_Pipeline_Col_Loop_fu_94_gradx1_mat_data3_din : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_xFDuplicate_rows_Pipeline_Col_Loop_fu_94_gradx1_mat_data3_write : STD_LOGIC;
    signal grp_xFDuplicate_rows_Pipeline_Col_Loop_fu_94_gradx2_mat_data4_din : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_xFDuplicate_rows_Pipeline_Col_Loop_fu_94_gradx2_mat_data4_write : STD_LOGIC;
    signal grp_xFDuplicate_rows_Pipeline_Col_Loop_fu_94_grady1_mat_data6_din : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_xFDuplicate_rows_Pipeline_Col_Loop_fu_94_grady1_mat_data6_write : STD_LOGIC;
    signal grp_xFDuplicate_rows_Pipeline_Col_Loop_fu_94_grady2_mat_data7_din : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_xFDuplicate_rows_Pipeline_Col_Loop_fu_94_grady2_mat_data7_write : STD_LOGIC;
    signal grp_xFDuplicate_rows_Pipeline_Col_Loop_fu_94_ap_ext_blocking_n : STD_LOGIC;
    signal grp_xFDuplicate_rows_Pipeline_Col_Loop_fu_94_ap_str_blocking_n : STD_LOGIC;
    signal grp_xFDuplicate_rows_Pipeline_Col_Loop_fu_94_ap_int_blocking_n : STD_LOGIC;
    signal grp_xFDuplicate_rows_Pipeline_Col_Loop_fu_94_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln1027_fu_123_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal row_V_fu_62 : STD_LOGIC_VECTOR (12 downto 0);
    signal row_V_7_fu_128_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal zext_ln1027_fu_119_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_int_blocking_cur_n : STD_LOGIC;
    signal ap_ext_blocking_sub_n : STD_LOGIC;
    signal ap_wait_0 : STD_LOGIC;
    signal ap_sub_ext_blocking_0 : STD_LOGIC;
    signal ap_str_blocking_sub_n : STD_LOGIC;
    signal ap_sub_str_blocking_0 : STD_LOGIC;
    signal ap_int_blocking_sub_n : STD_LOGIC;
    signal ap_sub_int_blocking_0 : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component canny_accel_xFDuplicate_rows_Pipeline_Col_Loop IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        grady_mat_data5_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        grady_mat_data5_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        grady_mat_data5_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        grady_mat_data5_empty_n : IN STD_LOGIC;
        grady_mat_data5_read : OUT STD_LOGIC;
        gradx_mat_data2_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        gradx_mat_data2_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        gradx_mat_data2_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        gradx_mat_data2_empty_n : IN STD_LOGIC;
        gradx_mat_data2_read : OUT STD_LOGIC;
        gradx1_mat_data3_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        gradx1_mat_data3_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        gradx1_mat_data3_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        gradx1_mat_data3_full_n : IN STD_LOGIC;
        gradx1_mat_data3_write : OUT STD_LOGIC;
        gradx2_mat_data4_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        gradx2_mat_data4_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        gradx2_mat_data4_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        gradx2_mat_data4_full_n : IN STD_LOGIC;
        gradx2_mat_data4_write : OUT STD_LOGIC;
        grady1_mat_data6_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        grady1_mat_data6_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        grady1_mat_data6_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        grady1_mat_data6_full_n : IN STD_LOGIC;
        grady1_mat_data6_write : OUT STD_LOGIC;
        grady2_mat_data7_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        grady2_mat_data7_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        grady2_mat_data7_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        grady2_mat_data7_full_n : IN STD_LOGIC;
        grady2_mat_data7_write : OUT STD_LOGIC;
        img_width_load : IN STD_LOGIC_VECTOR (15 downto 0);
        ap_ext_blocking_n : OUT STD_LOGIC;
        ap_str_blocking_n : OUT STD_LOGIC;
        ap_int_blocking_n : OUT STD_LOGIC );
    end component;



begin
    grp_xFDuplicate_rows_Pipeline_Col_Loop_fu_94 : component canny_accel_xFDuplicate_rows_Pipeline_Col_Loop
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_xFDuplicate_rows_Pipeline_Col_Loop_fu_94_ap_start,
        ap_done => grp_xFDuplicate_rows_Pipeline_Col_Loop_fu_94_ap_done,
        ap_idle => grp_xFDuplicate_rows_Pipeline_Col_Loop_fu_94_ap_idle,
        ap_ready => grp_xFDuplicate_rows_Pipeline_Col_Loop_fu_94_ap_ready,
        grady_mat_data5_dout => grady_mat_data5_dout,
        grady_mat_data5_num_data_valid => ap_const_lv2_0,
        grady_mat_data5_fifo_cap => ap_const_lv2_0,
        grady_mat_data5_empty_n => grady_mat_data5_empty_n,
        grady_mat_data5_read => grp_xFDuplicate_rows_Pipeline_Col_Loop_fu_94_grady_mat_data5_read,
        gradx_mat_data2_dout => gradx_mat_data2_dout,
        gradx_mat_data2_num_data_valid => ap_const_lv2_0,
        gradx_mat_data2_fifo_cap => ap_const_lv2_0,
        gradx_mat_data2_empty_n => gradx_mat_data2_empty_n,
        gradx_mat_data2_read => grp_xFDuplicate_rows_Pipeline_Col_Loop_fu_94_gradx_mat_data2_read,
        gradx1_mat_data3_din => grp_xFDuplicate_rows_Pipeline_Col_Loop_fu_94_gradx1_mat_data3_din,
        gradx1_mat_data3_num_data_valid => ap_const_lv2_0,
        gradx1_mat_data3_fifo_cap => ap_const_lv2_0,
        gradx1_mat_data3_full_n => gradx1_mat_data3_full_n,
        gradx1_mat_data3_write => grp_xFDuplicate_rows_Pipeline_Col_Loop_fu_94_gradx1_mat_data3_write,
        gradx2_mat_data4_din => grp_xFDuplicate_rows_Pipeline_Col_Loop_fu_94_gradx2_mat_data4_din,
        gradx2_mat_data4_num_data_valid => ap_const_lv2_0,
        gradx2_mat_data4_fifo_cap => ap_const_lv2_0,
        gradx2_mat_data4_full_n => gradx2_mat_data4_full_n,
        gradx2_mat_data4_write => grp_xFDuplicate_rows_Pipeline_Col_Loop_fu_94_gradx2_mat_data4_write,
        grady1_mat_data6_din => grp_xFDuplicate_rows_Pipeline_Col_Loop_fu_94_grady1_mat_data6_din,
        grady1_mat_data6_num_data_valid => ap_const_lv2_0,
        grady1_mat_data6_fifo_cap => ap_const_lv2_0,
        grady1_mat_data6_full_n => grady1_mat_data6_full_n,
        grady1_mat_data6_write => grp_xFDuplicate_rows_Pipeline_Col_Loop_fu_94_grady1_mat_data6_write,
        grady2_mat_data7_din => grp_xFDuplicate_rows_Pipeline_Col_Loop_fu_94_grady2_mat_data7_din,
        grady2_mat_data7_num_data_valid => ap_const_lv2_0,
        grady2_mat_data7_fifo_cap => ap_const_lv2_0,
        grady2_mat_data7_full_n => grady2_mat_data7_full_n,
        grady2_mat_data7_write => grp_xFDuplicate_rows_Pipeline_Col_Loop_fu_94_grady2_mat_data7_write,
        img_width_load => img_width_read_reg_146,
        ap_ext_blocking_n => grp_xFDuplicate_rows_Pipeline_Col_Loop_fu_94_ap_ext_blocking_n,
        ap_str_blocking_n => grp_xFDuplicate_rows_Pipeline_Col_Loop_fu_94_ap_str_blocking_n,
        ap_int_blocking_n => grp_xFDuplicate_rows_Pipeline_Col_Loop_fu_94_ap_int_blocking_n);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln1027_fu_123_p2 = ap_const_lv1_0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    grp_xFDuplicate_rows_Pipeline_Col_Loop_fu_94_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_xFDuplicate_rows_Pipeline_Col_Loop_fu_94_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln1027_fu_123_p2 = ap_const_lv1_1))) then 
                    grp_xFDuplicate_rows_Pipeline_Col_Loop_fu_94_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_xFDuplicate_rows_Pipeline_Col_Loop_fu_94_ap_ready = ap_const_logic_1)) then 
                    grp_xFDuplicate_rows_Pipeline_Col_Loop_fu_94_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((real_start = ap_const_logic_1) and (internal_ap_ready = ap_const_logic_0))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    row_V_fu_62_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((real_start = ap_const_logic_0) or (img_width_c24_full_n = ap_const_logic_0) or (img_height_c20_full_n = ap_const_logic_0) or (img_width_empty_n = ap_const_logic_0) or (img_height_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                row_V_fu_62 <= ap_const_lv13_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln1027_fu_123_p2 = ap_const_lv1_1))) then 
                row_V_fu_62 <= row_V_7_fu_128_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                img_height_read_reg_151 <= img_height_dout;
                img_width_read_reg_146 <= img_width_dout;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, img_height_empty_n, img_width_empty_n, img_height_c20_full_n, img_width_c24_full_n, grp_xFDuplicate_rows_Pipeline_Col_Loop_fu_94_ap_done, ap_CS_fsm_state2, icmp_ln1027_fu_123_p2, ap_CS_fsm_state3)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((real_start = ap_const_logic_0) or (img_width_c24_full_n = ap_const_logic_0) or (img_height_c20_full_n = ap_const_logic_0) or (img_width_empty_n = ap_const_logic_0) or (img_height_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln1027_fu_123_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (grp_xFDuplicate_rows_Pipeline_Col_Loop_fu_94_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);

    ap_ST_fsm_state1_blk_assign_proc : process(real_start, ap_done_reg, img_height_empty_n, img_width_empty_n, img_height_c20_full_n, img_width_c24_full_n)
    begin
        if (((real_start = ap_const_logic_0) or (img_width_c24_full_n = ap_const_logic_0) or (img_height_c20_full_n = ap_const_logic_0) or (img_width_empty_n = ap_const_logic_0) or (img_height_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;

    ap_ST_fsm_state3_blk_assign_proc : process(grp_xFDuplicate_rows_Pipeline_Col_Loop_fu_94_ap_done)
    begin
        if ((grp_xFDuplicate_rows_Pipeline_Col_Loop_fu_94_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state3_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state3_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state1_assign_proc : process(real_start, ap_done_reg, img_height_empty_n, img_width_empty_n, img_height_c20_full_n, img_width_c24_full_n)
    begin
                ap_block_state1 <= ((real_start = ap_const_logic_0) or (img_width_c24_full_n = ap_const_logic_0) or (img_height_c20_full_n = ap_const_logic_0) or (img_width_empty_n = ap_const_logic_0) or (img_height_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state2, icmp_ln1027_fu_123_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln1027_fu_123_p2 = ap_const_lv1_0))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_ext_blocking_n <= (ap_ext_blocking_sub_n and ap_const_logic_1);

    ap_ext_blocking_sub_n_assign_proc : process(ap_wait_0, ap_sub_ext_blocking_0)
    begin
        if (((ap_wait_0 and ap_sub_ext_blocking_0) = ap_const_logic_1)) then 
            ap_ext_blocking_sub_n <= ap_const_logic_0;
        else 
            ap_ext_blocking_sub_n <= ap_const_logic_1;
        end if; 
    end process;


    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_int_blocking_cur_n <= (img_width_c24_blk_n and img_width_blk_n and img_height_c20_blk_n and img_height_blk_n);
    ap_int_blocking_n <= (ap_int_blocking_sub_n and ap_int_blocking_cur_n);

    ap_int_blocking_sub_n_assign_proc : process(ap_wait_0, ap_sub_int_blocking_0)
    begin
        if (((ap_wait_0 and ap_sub_int_blocking_0) = ap_const_logic_1)) then 
            ap_int_blocking_sub_n <= ap_const_logic_0;
        else 
            ap_int_blocking_sub_n <= ap_const_logic_1;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;
    ap_str_blocking_n <= (ap_str_blocking_sub_n and ap_const_logic_1);

    ap_str_blocking_sub_n_assign_proc : process(ap_wait_0, ap_sub_str_blocking_0)
    begin
        if (((ap_wait_0 and ap_sub_str_blocking_0) = ap_const_logic_1)) then 
            ap_str_blocking_sub_n <= ap_const_logic_0;
        else 
            ap_str_blocking_sub_n <= ap_const_logic_1;
        end if; 
    end process;


    ap_sub_ext_blocking_0_assign_proc : process(grp_xFDuplicate_rows_Pipeline_Col_Loop_fu_94_ap_ext_blocking_n)
    begin
        if ((grp_xFDuplicate_rows_Pipeline_Col_Loop_fu_94_ap_ext_blocking_n = ap_const_logic_0)) then 
            ap_sub_ext_blocking_0 <= ap_const_logic_1;
        else 
            ap_sub_ext_blocking_0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sub_int_blocking_0_assign_proc : process(grp_xFDuplicate_rows_Pipeline_Col_Loop_fu_94_ap_int_blocking_n)
    begin
        if ((grp_xFDuplicate_rows_Pipeline_Col_Loop_fu_94_ap_int_blocking_n = ap_const_logic_0)) then 
            ap_sub_int_blocking_0 <= ap_const_logic_1;
        else 
            ap_sub_int_blocking_0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sub_str_blocking_0_assign_proc : process(grp_xFDuplicate_rows_Pipeline_Col_Loop_fu_94_ap_str_blocking_n)
    begin
        if ((grp_xFDuplicate_rows_Pipeline_Col_Loop_fu_94_ap_str_blocking_n = ap_const_logic_0)) then 
            ap_sub_str_blocking_0 <= ap_const_logic_1;
        else 
            ap_sub_str_blocking_0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_wait_0_assign_proc : process(ap_CS_fsm)
    begin
        if ((ap_ST_fsm_state3 = ap_CS_fsm)) then 
            ap_wait_0 <= ap_const_logic_1;
        else 
            ap_wait_0 <= ap_const_logic_0;
        end if; 
    end process;

    gradx1_mat_data3_din <= grp_xFDuplicate_rows_Pipeline_Col_Loop_fu_94_gradx1_mat_data3_din;

    gradx1_mat_data3_write_assign_proc : process(grp_xFDuplicate_rows_Pipeline_Col_Loop_fu_94_gradx1_mat_data3_write, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            gradx1_mat_data3_write <= grp_xFDuplicate_rows_Pipeline_Col_Loop_fu_94_gradx1_mat_data3_write;
        else 
            gradx1_mat_data3_write <= ap_const_logic_0;
        end if; 
    end process;

    gradx2_mat_data4_din <= grp_xFDuplicate_rows_Pipeline_Col_Loop_fu_94_gradx2_mat_data4_din;

    gradx2_mat_data4_write_assign_proc : process(grp_xFDuplicate_rows_Pipeline_Col_Loop_fu_94_gradx2_mat_data4_write, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            gradx2_mat_data4_write <= grp_xFDuplicate_rows_Pipeline_Col_Loop_fu_94_gradx2_mat_data4_write;
        else 
            gradx2_mat_data4_write <= ap_const_logic_0;
        end if; 
    end process;


    gradx_mat_data2_read_assign_proc : process(grp_xFDuplicate_rows_Pipeline_Col_Loop_fu_94_gradx_mat_data2_read, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            gradx_mat_data2_read <= grp_xFDuplicate_rows_Pipeline_Col_Loop_fu_94_gradx_mat_data2_read;
        else 
            gradx_mat_data2_read <= ap_const_logic_0;
        end if; 
    end process;

    grady1_mat_data6_din <= grp_xFDuplicate_rows_Pipeline_Col_Loop_fu_94_grady1_mat_data6_din;

    grady1_mat_data6_write_assign_proc : process(grp_xFDuplicate_rows_Pipeline_Col_Loop_fu_94_grady1_mat_data6_write, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grady1_mat_data6_write <= grp_xFDuplicate_rows_Pipeline_Col_Loop_fu_94_grady1_mat_data6_write;
        else 
            grady1_mat_data6_write <= ap_const_logic_0;
        end if; 
    end process;

    grady2_mat_data7_din <= grp_xFDuplicate_rows_Pipeline_Col_Loop_fu_94_grady2_mat_data7_din;

    grady2_mat_data7_write_assign_proc : process(grp_xFDuplicate_rows_Pipeline_Col_Loop_fu_94_grady2_mat_data7_write, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grady2_mat_data7_write <= grp_xFDuplicate_rows_Pipeline_Col_Loop_fu_94_grady2_mat_data7_write;
        else 
            grady2_mat_data7_write <= ap_const_logic_0;
        end if; 
    end process;


    grady_mat_data5_read_assign_proc : process(grp_xFDuplicate_rows_Pipeline_Col_Loop_fu_94_grady_mat_data5_read, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grady_mat_data5_read <= grp_xFDuplicate_rows_Pipeline_Col_Loop_fu_94_grady_mat_data5_read;
        else 
            grady_mat_data5_read <= ap_const_logic_0;
        end if; 
    end process;

    grp_xFDuplicate_rows_Pipeline_Col_Loop_fu_94_ap_start <= grp_xFDuplicate_rows_Pipeline_Col_Loop_fu_94_ap_start_reg;
    icmp_ln1027_fu_123_p2 <= "1" when (unsigned(zext_ln1027_fu_119_p1) < unsigned(img_height_read_reg_151)) else "0";

    img_height_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, img_height_empty_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            img_height_blk_n <= img_height_empty_n;
        else 
            img_height_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    img_height_c20_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, img_height_c20_full_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            img_height_c20_blk_n <= img_height_c20_full_n;
        else 
            img_height_c20_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    img_height_c20_din <= img_height_dout;

    img_height_c20_write_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, img_height_empty_n, img_width_empty_n, img_height_c20_full_n, img_width_c24_full_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (img_width_c24_full_n = ap_const_logic_0) or (img_height_c20_full_n = ap_const_logic_0) or (img_width_empty_n = ap_const_logic_0) or (img_height_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            img_height_c20_write <= ap_const_logic_1;
        else 
            img_height_c20_write <= ap_const_logic_0;
        end if; 
    end process;


    img_height_read_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, img_height_empty_n, img_width_empty_n, img_height_c20_full_n, img_width_c24_full_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (img_width_c24_full_n = ap_const_logic_0) or (img_height_c20_full_n = ap_const_logic_0) or (img_width_empty_n = ap_const_logic_0) or (img_height_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            img_height_read <= ap_const_logic_1;
        else 
            img_height_read <= ap_const_logic_0;
        end if; 
    end process;


    img_width_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, img_width_empty_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            img_width_blk_n <= img_width_empty_n;
        else 
            img_width_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    img_width_c24_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, img_width_c24_full_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            img_width_c24_blk_n <= img_width_c24_full_n;
        else 
            img_width_c24_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    img_width_c24_din <= img_width_dout;

    img_width_c24_write_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, img_height_empty_n, img_width_empty_n, img_height_c20_full_n, img_width_c24_full_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (img_width_c24_full_n = ap_const_logic_0) or (img_height_c20_full_n = ap_const_logic_0) or (img_width_empty_n = ap_const_logic_0) or (img_height_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            img_width_c24_write <= ap_const_logic_1;
        else 
            img_width_c24_write <= ap_const_logic_0;
        end if; 
    end process;


    img_width_read_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, img_height_empty_n, img_width_empty_n, img_height_c20_full_n, img_width_c24_full_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (img_width_c24_full_n = ap_const_logic_0) or (img_height_c20_full_n = ap_const_logic_0) or (img_width_empty_n = ap_const_logic_0) or (img_height_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            img_width_read <= ap_const_logic_1;
        else 
            img_width_read <= ap_const_logic_0;
        end if; 
    end process;


    internal_ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln1027_fu_123_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln1027_fu_123_p2 = ap_const_lv1_0))) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    row_V_7_fu_128_p2 <= std_logic_vector(unsigned(row_V_fu_62) + unsigned(ap_const_lv13_1));
    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((real_start = ap_const_logic_1) and (start_once_reg = ap_const_logic_0))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln1027_fu_119_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(row_V_fu_62),16));
end behav;
