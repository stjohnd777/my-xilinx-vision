// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module canny_accel_xFAngleKernel_Pipeline_colLoop (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        gradx2_mat_data4_dout,
        gradx2_mat_data4_num_data_valid,
        gradx2_mat_data4_fifo_cap,
        gradx2_mat_data4_empty_n,
        gradx2_mat_data4_read,
        grady2_mat_data7_dout,
        grady2_mat_data7_num_data_valid,
        grady2_mat_data7_fifo_cap,
        grady2_mat_data7_empty_n,
        grady2_mat_data7_read,
        phase_mat_data9_din,
        phase_mat_data9_num_data_valid,
        phase_mat_data9_fifo_cap,
        phase_mat_data9_full_n,
        phase_mat_data9_write,
        imgwidth_load,
        ap_ext_blocking_n,
        ap_str_blocking_n,
        ap_int_blocking_n
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [15:0] gradx2_mat_data4_dout;
input  [1:0] gradx2_mat_data4_num_data_valid;
input  [1:0] gradx2_mat_data4_fifo_cap;
input   gradx2_mat_data4_empty_n;
output   gradx2_mat_data4_read;
input  [15:0] grady2_mat_data7_dout;
input  [1:0] grady2_mat_data7_num_data_valid;
input  [1:0] grady2_mat_data7_fifo_cap;
input   grady2_mat_data7_empty_n;
output   grady2_mat_data7_read;
output  [7:0] phase_mat_data9_din;
input  [13:0] phase_mat_data9_num_data_valid;
input  [13:0] phase_mat_data9_fifo_cap;
input   phase_mat_data9_full_n;
output   phase_mat_data9_write;
input  [15:0] imgwidth_load;
output   ap_ext_blocking_n;
output   ap_str_blocking_n;
output   ap_int_blocking_n;

reg ap_idle;
reg gradx2_mat_data4_read;
reg grady2_mat_data7_read;
reg phase_mat_data9_write;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
reg    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
reg    ap_block_state6_pp0_stage0_iter5;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln464_fu_115_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    gradx2_mat_data4_blk_n;
wire    ap_block_pp0_stage0;
reg    grady2_mat_data7_blk_n;
reg    phase_mat_data9_blk_n;
reg    ap_block_pp0_stage0_11001;
reg  signed [15:0] val_src1_V_reg_294;
reg  signed [15:0] val_src1_V_reg_294_pp0_iter2_reg;
reg  signed [15:0] val_src1_V_reg_294_pp0_iter3_reg;
reg  signed [15:0] val_src2_V_reg_299;
reg  signed [15:0] val_src2_V_reg_299_pp0_iter2_reg;
reg  signed [15:0] val_src2_V_reg_299_pp0_iter3_reg;
reg   [0:0] tmp_7_reg_310;
reg   [0:0] tmp_7_reg_310_pp0_iter2_reg;
reg   [0:0] tmp_7_reg_310_pp0_iter3_reg;
wire   [15:0] trunc_ln501_fu_170_p1;
reg   [15:0] trunc_ln501_reg_315;
reg   [15:0] trunc_ln501_reg_315_pp0_iter2_reg;
reg   [15:0] trunc_ln501_reg_315_pp0_iter3_reg;
wire   [7:0] angle_V_fu_267_p3;
reg   [7:0] angle_V_reg_320;
reg   [15:0] j_V_fu_78;
wire   [15:0] add_ln1027_fu_121_p2;
wire    ap_loop_init;
reg   [15:0] ap_sig_allocacmp_j_V_load;
reg    ap_block_pp0_stage0_01001;
wire  signed [15:0] tmp_fu_132_p1;
wire  signed [15:0] sext_ln488_fu_140_p0;
wire  signed [16:0] sext_ln488_fu_140_p1;
wire   [0:0] tmp_fu_132_p3;
wire   [16:0] sub_ln488_fu_144_p2;
wire  signed [16:0] xa_fu_150_p3;
wire  signed [15:0] tmp_7_fu_162_p1;
wire  signed [16:0] sext_ln489_fu_174_p1;
wire   [16:0] sub_ln489_fu_177_p2;
wire   [16:0] select_ln489_fu_183_p3;
wire   [31:0] ya_fu_190_p3;
wire  signed [31:0] grp_fu_275_p2;
wire   [31:0] shl_ln_fu_203_p3;
(* use_dsp48 = "no" *) wire   [31:0] tg67x_fu_210_p2;
wire   [15:0] xor_ln505_fu_221_p2;
wire   [0:0] icmp_ln498_fu_198_p2;
wire   [0:0] icmp_ln502_fu_215_p2;
wire   [0:0] xor_ln498_fu_233_p2;
wire   [0:0] and_ln502_fu_239_p2;
wire   [0:0] tmp_8_fu_225_p3;
wire   [0:0] or_ln502_fu_253_p2;
wire   [7:0] select_ln502_fu_245_p3;
wire   [7:0] select_ln502_1_fu_259_p3;
wire   [13:0] grp_fu_275_p1;
reg    grp_fu_275_ce;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_int_blocking_cur_n;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_done_reg = 1'b0;
end

canny_accel_mul_mul_17s_14ns_32_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 17 ),
    .din1_WIDTH( 14 ),
    .dout_WIDTH( 32 ))
mul_mul_17s_14ns_32_4_1_U181(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(xa_fu_150_p3),
    .din1(grp_fu_275_p1),
    .ce(grp_fu_275_ce),
    .dout(grp_fu_275_p2)
);

canny_accel_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter4_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln464_fu_115_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            j_V_fu_78 <= add_ln1027_fu_121_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            j_V_fu_78 <= 16'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        angle_V_reg_320 <= angle_V_fu_267_p3;
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        tmp_7_reg_310_pp0_iter2_reg <= tmp_7_reg_310;
        tmp_7_reg_310_pp0_iter3_reg <= tmp_7_reg_310_pp0_iter2_reg;
        trunc_ln501_reg_315_pp0_iter2_reg <= trunc_ln501_reg_315;
        trunc_ln501_reg_315_pp0_iter3_reg <= trunc_ln501_reg_315_pp0_iter2_reg;
        val_src1_V_reg_294_pp0_iter2_reg <= val_src1_V_reg_294;
        val_src1_V_reg_294_pp0_iter3_reg <= val_src1_V_reg_294_pp0_iter2_reg;
        val_src2_V_reg_299_pp0_iter2_reg <= val_src2_V_reg_299;
        val_src2_V_reg_299_pp0_iter3_reg <= val_src2_V_reg_299_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        tmp_7_reg_310 <= tmp_7_fu_162_p1[32'd15];
        trunc_ln501_reg_315 <= trunc_ln501_fu_170_p1;
        val_src1_V_reg_294 <= gradx2_mat_data4_dout;
        val_src2_V_reg_299 <= grady2_mat_data7_dout;
    end
end

always @ (*) begin
    if (((icmp_ln464_fu_115_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter4_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_j_V_load = 16'd0;
    end else begin
        ap_sig_allocacmp_j_V_load = j_V_fu_78;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        gradx2_mat_data4_blk_n = gradx2_mat_data4_empty_n;
    end else begin
        gradx2_mat_data4_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        gradx2_mat_data4_read = 1'b1;
    end else begin
        gradx2_mat_data4_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grady2_mat_data7_blk_n = grady2_mat_data7_empty_n;
    end else begin
        grady2_mat_data7_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grady2_mat_data7_read = 1'b1;
    end else begin
        grady2_mat_data7_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_275_ce = 1'b1;
    end else begin
        grp_fu_275_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        phase_mat_data9_blk_n = phase_mat_data9_full_n;
    end else begin
        phase_mat_data9_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        phase_mat_data9_write = 1'b1;
    end else begin
        phase_mat_data9_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln1027_fu_121_p2 = (ap_sig_allocacmp_j_V_load + 16'd1);

assign and_ln502_fu_239_p2 = (xor_ln498_fu_233_p2 & icmp_ln502_fu_215_p2);

assign angle_V_fu_267_p3 = ((or_ln502_fu_253_p2[0:0] == 1'b1) ? select_ln502_fu_245_p3 : select_ln502_1_fu_259_p3);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((phase_mat_data9_full_n == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((grady2_mat_data7_empty_n == 1'b0) | (gradx2_mat_data4_empty_n == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((phase_mat_data9_full_n == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((grady2_mat_data7_empty_n == 1'b0) | (gradx2_mat_data4_empty_n == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((phase_mat_data9_full_n == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((grady2_mat_data7_empty_n == 1'b0) | (gradx2_mat_data4_empty_n == 1'b0))));
end

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = ((grady2_mat_data7_empty_n == 1'b0) | (gradx2_mat_data4_empty_n == 1'b0));
end

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state6_pp0_stage0_iter5 = (phase_mat_data9_full_n == 1'b0);
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_ext_blocking_n = (1'b1 & 1'b1);

assign ap_int_blocking_cur_n = (phase_mat_data9_blk_n & grady2_mat_data7_blk_n & gradx2_mat_data4_blk_n);

assign ap_int_blocking_n = (ap_int_blocking_cur_n & 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_str_blocking_n = (1'b1 & 1'b1);

assign grp_fu_275_p1 = 32'd13573;

assign icmp_ln464_fu_115_p2 = ((ap_sig_allocacmp_j_V_load == imgwidth_load) ? 1'b1 : 1'b0);

assign icmp_ln498_fu_198_p2 = (($signed(ya_fu_190_p3) < $signed(grp_fu_275_p2)) ? 1'b1 : 1'b0);

assign icmp_ln502_fu_215_p2 = (($signed(ya_fu_190_p3) > $signed(tg67x_fu_210_p2)) ? 1'b1 : 1'b0);

assign or_ln502_fu_253_p2 = (icmp_ln498_fu_198_p2 | and_ln502_fu_239_p2);

assign phase_mat_data9_din = angle_V_reg_320;

assign select_ln489_fu_183_p3 = ((tmp_7_reg_310_pp0_iter3_reg[0:0] == 1'b1) ? sub_ln489_fu_177_p2 : sext_ln489_fu_174_p1);

assign select_ln502_1_fu_259_p3 = ((tmp_8_fu_225_p3[0:0] == 1'b1) ? 8'd45 : 8'd135);

assign select_ln502_fu_245_p3 = ((and_ln502_fu_239_p2[0:0] == 1'b1) ? 8'd90 : 8'd0);

assign sext_ln488_fu_140_p0 = gradx2_mat_data4_dout;

assign sext_ln488_fu_140_p1 = sext_ln488_fu_140_p0;

assign sext_ln489_fu_174_p1 = val_src2_V_reg_299_pp0_iter3_reg;

assign shl_ln_fu_203_p3 = {{trunc_ln501_reg_315_pp0_iter3_reg}, {16'd0}};

assign sub_ln488_fu_144_p2 = ($signed(17'd0) - $signed(sext_ln488_fu_140_p1));

assign sub_ln489_fu_177_p2 = ($signed(17'd0) - $signed(sext_ln489_fu_174_p1));

assign tg67x_fu_210_p2 = ($signed(grp_fu_275_p2) + $signed(shl_ln_fu_203_p3));

assign tmp_7_fu_162_p1 = grady2_mat_data7_dout;

assign tmp_8_fu_225_p3 = xor_ln505_fu_221_p2[32'd15];

assign tmp_fu_132_p1 = gradx2_mat_data4_dout;

assign tmp_fu_132_p3 = tmp_fu_132_p1[32'd15];

assign trunc_ln501_fu_170_p1 = xa_fu_150_p3[15:0];

assign xa_fu_150_p3 = ((tmp_fu_132_p3[0:0] == 1'b1) ? sub_ln488_fu_144_p2 : sext_ln488_fu_140_p1);

assign xor_ln498_fu_233_p2 = (icmp_ln498_fu_198_p2 ^ 1'd1);

assign xor_ln505_fu_221_p2 = (val_src2_V_reg_299_pp0_iter3_reg ^ val_src1_V_reg_294_pp0_iter3_reg);

assign ya_fu_190_p3 = {{select_ln489_fu_183_p3}, {15'd0}};

endmodule //canny_accel_xFAngleKernel_Pipeline_colLoop
