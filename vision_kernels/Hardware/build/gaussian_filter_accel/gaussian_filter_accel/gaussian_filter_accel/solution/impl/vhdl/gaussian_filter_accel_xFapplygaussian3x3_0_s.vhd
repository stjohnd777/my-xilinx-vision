-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity gaussian_filter_accel_xFapplygaussian3x3_0_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    D1 : IN STD_LOGIC_VECTOR (7 downto 0);
    D2 : IN STD_LOGIC_VECTOR (7 downto 0);
    D3 : IN STD_LOGIC_VECTOR (7 downto 0);
    D4 : IN STD_LOGIC_VECTOR (7 downto 0);
    D5 : IN STD_LOGIC_VECTOR (7 downto 0);
    D6 : IN STD_LOGIC_VECTOR (7 downto 0);
    D7 : IN STD_LOGIC_VECTOR (7 downto 0);
    D8 : IN STD_LOGIC_VECTOR (7 downto 0);
    D9 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read1 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read2 : IN STD_LOGIC_VECTOR (7 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_ce : IN STD_LOGIC );
end;


architecture behav of gaussian_filter_accel_xFapplygaussian3x3_0_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv24_8000 : STD_LOGIC_VECTOR (23 downto 0) := "000000001000000000000000";

attribute shreg_extract : string;
    signal p_read_reg_247 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal p_read_reg_247_pp0_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal p_read_reg_247_pp0_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal p_read_reg_247_pp0_iter3_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal p_read_7_reg_253 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_read_7_reg_253_pp0_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal p_read_7_reg_253_pp0_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal D6_read_reg_259 : STD_LOGIC_VECTOR (7 downto 0);
    signal D5_read_reg_264 : STD_LOGIC_VECTOR (7 downto 0);
    signal D5_read_reg_264_pp0_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal D5_read_reg_264_pp0_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal D5_read_reg_264_pp0_iter3_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal D4_read_reg_269 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_226_p4 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln186_9_fu_102_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln186_8_fu_98_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal ret_V_7_fu_106_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln1495_fu_116_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln1495_3_fu_120_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln1495_fu_124_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_199_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_208_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal ret_V_5_fu_174_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal ret_V_5_fu_174_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_217_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal ret_V_5_fu_174_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_236_p4 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_199_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_199_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_199_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_208_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_208_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_208_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_217_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_217_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_217_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_226_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_226_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_226_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_226_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_236_p0 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_236_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_236_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_199_ce : STD_LOGIC;
    signal grp_fu_208_ce : STD_LOGIC;
    signal grp_fu_217_ce : STD_LOGIC;
    signal grp_fu_226_ce : STD_LOGIC;
    signal grp_fu_236_ce : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;
    signal D1_int_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal D2_int_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal D3_int_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal D4_int_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal D5_int_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal D6_int_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal D7_int_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal D8_int_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal D9_int_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal p_read1_int_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal p_read2_int_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_return_int_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_199_p00 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_199_p10 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_199_p20 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_208_p00 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_208_p10 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_208_p20 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_217_p00 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_217_p10 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_217_p20 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_226_p00 : STD_LOGIC_VECTOR (18 downto 0);
    signal grp_fu_226_p10 : STD_LOGIC_VECTOR (18 downto 0);
    signal grp_fu_226_p20 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_236_p00 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_236_p10 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_236_p20 : STD_LOGIC_VECTOR (23 downto 0);
    signal ret_V_5_fu_174_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal ret_V_5_fu_174_p10 : STD_LOGIC_VECTOR (15 downto 0);

    component gaussian_filter_accel_mul_8ns_8ns_16_1_0 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component gaussian_filter_accel_am_addmul_9ns_9ns_8ns_18_4_0 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (8 downto 0);
        din1 : IN STD_LOGIC_VECTOR (8 downto 0);
        din2 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;


    component gaussian_filter_accel_am_addmul_8ns_8ns_8ns_17_4_0 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (16 downto 0) );
    end component;


    component gaussian_filter_accel_ama_addmuladd_18ns_17ns_8ns_16ns_24_4_0 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (17 downto 0);
        din1 : IN STD_LOGIC_VECTOR (16 downto 0);
        din2 : IN STD_LOGIC_VECTOR (7 downto 0);
        din3 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component gaussian_filter_accel_ama_addmuladd_17ns_16ns_8ns_24ns_24_4_0 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (16 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (7 downto 0);
        din3 : IN STD_LOGIC_VECTOR (23 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;



begin
    mul_8ns_8ns_16_1_0_U89 : component gaussian_filter_accel_mul_8ns_8ns_16_1_0
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 16)
    port map (
        din0 => ret_V_5_fu_174_p0,
        din1 => ret_V_5_fu_174_p1,
        dout => ret_V_5_fu_174_p2);

    am_addmul_9ns_9ns_8ns_18_4_0_U90 : component gaussian_filter_accel_am_addmul_9ns_9ns_8ns_18_4_0
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 9,
        din1_WIDTH => 9,
        din2_WIDTH => 8,
        dout_WIDTH => 18)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_199_p0,
        din1 => grp_fu_199_p1,
        din2 => grp_fu_199_p2,
        ce => grp_fu_199_ce,
        dout => grp_fu_199_p3);

    am_addmul_8ns_8ns_8ns_17_4_0_U91 : component gaussian_filter_accel_am_addmul_8ns_8ns_8ns_17_4_0
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        dout_WIDTH => 17)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_208_p0,
        din1 => grp_fu_208_p1,
        din2 => grp_fu_208_p2,
        ce => grp_fu_208_ce,
        dout => grp_fu_208_p3);

    am_addmul_8ns_8ns_8ns_17_4_0_U92 : component gaussian_filter_accel_am_addmul_8ns_8ns_8ns_17_4_0
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        dout_WIDTH => 17)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_217_p0,
        din1 => grp_fu_217_p1,
        din2 => grp_fu_217_p2,
        ce => grp_fu_217_ce,
        dout => grp_fu_217_p3);

    ama_addmuladd_18ns_17ns_8ns_16ns_24_4_0_U93 : component gaussian_filter_accel_ama_addmuladd_18ns_17ns_8ns_16ns_24_4_0
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 18,
        din1_WIDTH => 17,
        din2_WIDTH => 8,
        din3_WIDTH => 16,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_226_p0,
        din1 => grp_fu_226_p1,
        din2 => grp_fu_226_p2,
        din3 => grp_fu_226_p3,
        ce => grp_fu_226_ce,
        dout => grp_fu_226_p4);

    ama_addmuladd_17ns_16ns_8ns_24ns_24_4_0_U94 : component gaussian_filter_accel_ama_addmuladd_17ns_16ns_8ns_24ns_24_4_0
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 17,
        din1_WIDTH => 16,
        din2_WIDTH => 8,
        din3_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_236_p0,
        din1 => grp_fu_236_p1,
        din2 => grp_fu_236_p2,
        din3 => grp_fu_226_p4,
        ce => grp_fu_236_ce,
        dout => grp_fu_236_p4);





    ap_ce_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            ap_ce_reg <= ap_ce;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_ce)) then
                D1_int_reg <= D1;
                D2_int_reg <= D2;
                D3_int_reg <= D3;
                D4_int_reg <= D4;
                D5_int_reg <= D5;
                D6_int_reg <= D6;
                D7_int_reg <= D7;
                D8_int_reg <= D8;
                D9_int_reg <= D9;
                p_read1_int_reg <= p_read1;
                p_read2_int_reg <= p_read2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then
                D4_read_reg_269 <= D4_int_reg;
                D5_read_reg_264 <= D5_int_reg;
                D5_read_reg_264_pp0_iter1_reg <= D5_read_reg_264;
                D5_read_reg_264_pp0_iter2_reg <= D5_read_reg_264_pp0_iter1_reg;
                D5_read_reg_264_pp0_iter3_reg <= D5_read_reg_264_pp0_iter2_reg;
                D6_read_reg_259 <= D6_int_reg;
                p_read_7_reg_253 <= p_read1_int_reg;
                p_read_7_reg_253_pp0_iter1_reg <= p_read_7_reg_253;
                p_read_7_reg_253_pp0_iter2_reg <= p_read_7_reg_253_pp0_iter1_reg;
                p_read_reg_247 <= p_read2_int_reg;
                p_read_reg_247_pp0_iter1_reg <= p_read_reg_247;
                p_read_reg_247_pp0_iter2_reg <= p_read_reg_247_pp0_iter1_reg;
                p_read_reg_247_pp0_iter3_reg <= p_read_reg_247_pp0_iter2_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_ce_reg)) then
                ap_return_int_reg <= grp_fu_236_p4(23 downto 16);
            end if;
        end if;
    end process;
    add_ln1495_fu_124_p2 <= std_logic_vector(unsigned(zext_ln1495_fu_116_p1) + unsigned(zext_ln1495_3_fu_120_p1));
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_return_assign_proc : process(grp_fu_236_p4, ap_ce_reg, ap_return_int_reg)
    begin
        if ((ap_const_logic_0 = ap_ce_reg)) then 
            ap_return <= ap_return_int_reg;
        elsif ((ap_const_logic_1 = ap_ce_reg)) then 
            ap_return <= grp_fu_236_p4(23 downto 16);
        else 
            ap_return <= "XXXXXXXX";
        end if; 
    end process;


    grp_fu_199_ce_assign_proc : process(ap_block_pp0_stage0_11001, ap_ce_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then 
            grp_fu_199_ce <= ap_const_logic_1;
        else 
            grp_fu_199_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_199_p0 <= grp_fu_199_p00(9 - 1 downto 0);
    grp_fu_199_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1495_fu_124_p2),10));
    grp_fu_199_p1 <= grp_fu_199_p10(9 - 1 downto 0);
    grp_fu_199_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_7_fu_106_p2),10));
    grp_fu_199_p2 <= grp_fu_199_p20(8 - 1 downto 0);
    grp_fu_199_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_read1_int_reg),18));

    grp_fu_208_ce_assign_proc : process(ap_block_pp0_stage0_11001, ap_ce_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then 
            grp_fu_208_ce <= ap_const_logic_1;
        else 
            grp_fu_208_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_208_p0 <= grp_fu_208_p00(8 - 1 downto 0);
    grp_fu_208_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(D8_int_reg),9));
    grp_fu_208_p1 <= grp_fu_208_p10(8 - 1 downto 0);
    grp_fu_208_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(D2_int_reg),9));
    grp_fu_208_p2 <= grp_fu_208_p20(8 - 1 downto 0);
    grp_fu_208_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_read2_int_reg),17));

    grp_fu_217_ce_assign_proc : process(ap_block_pp0_stage0_11001, ap_ce_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then 
            grp_fu_217_ce <= ap_const_logic_1;
        else 
            grp_fu_217_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_217_p0 <= grp_fu_217_p00(8 - 1 downto 0);
    grp_fu_217_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(D6_read_reg_259),9));
    grp_fu_217_p1 <= grp_fu_217_p10(8 - 1 downto 0);
    grp_fu_217_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(D4_read_reg_269),9));
    grp_fu_217_p2 <= grp_fu_217_p20(8 - 1 downto 0);
    grp_fu_217_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_read_7_reg_253),17));

    grp_fu_226_ce_assign_proc : process(ap_block_pp0_stage0_11001, ap_ce_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then 
            grp_fu_226_ce <= ap_const_logic_1;
        else 
            grp_fu_226_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_226_p0 <= grp_fu_226_p00(18 - 1 downto 0);
    grp_fu_226_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_199_p3),19));
    grp_fu_226_p1 <= grp_fu_226_p10(17 - 1 downto 0);
    grp_fu_226_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_208_p3),19));
    grp_fu_226_p2 <= grp_fu_226_p20(8 - 1 downto 0);
    grp_fu_226_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_read_7_reg_253_pp0_iter2_reg),24));
    grp_fu_226_p3 <= ap_const_lv24_8000(16 - 1 downto 0);

    grp_fu_236_ce_assign_proc : process(ap_block_pp0_stage0_11001, ap_ce_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then 
            grp_fu_236_ce <= ap_const_logic_1;
        else 
            grp_fu_236_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_236_p0 <= grp_fu_236_p00(17 - 1 downto 0);
    grp_fu_236_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_217_p3),18));
    grp_fu_236_p1 <= grp_fu_236_p10(16 - 1 downto 0);
    grp_fu_236_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_5_fu_174_p2),18));
    grp_fu_236_p2 <= grp_fu_236_p20(8 - 1 downto 0);
    grp_fu_236_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_read_reg_247_pp0_iter3_reg),24));
    ret_V_5_fu_174_p0 <= ret_V_5_fu_174_p00(8 - 1 downto 0);
    ret_V_5_fu_174_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(D5_read_reg_264_pp0_iter3_reg),16));
    ret_V_5_fu_174_p1 <= ret_V_5_fu_174_p10(8 - 1 downto 0);
    ret_V_5_fu_174_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_read_reg_247_pp0_iter3_reg),16));
    ret_V_7_fu_106_p2 <= std_logic_vector(unsigned(zext_ln186_9_fu_102_p1) + unsigned(zext_ln186_8_fu_98_p1));
    zext_ln1495_3_fu_120_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(D9_int_reg),9));
    zext_ln1495_fu_116_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(D7_int_reg),9));
    zext_ln186_8_fu_98_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(D1_int_reg),9));
    zext_ln186_9_fu_102_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(D3_int_reg),9));
end behav;
