// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module canny_accel_Mat2AxiStream (
        dst_mat_data2_dout,
        dst_mat_data2_empty_n,
        dst_mat_data2_read,
        ldata1_din,
        ldata1_full_n,
        ldata1_write,
        rows,
        cols,
        ap_clk,
        ap_rst,
        rows_ap_vld,
        ap_start,
        cols_ap_vld,
        ap_done,
        ap_ready,
        ap_idle,
        ap_continue
);


input  [63:0] dst_mat_data2_dout;
input   dst_mat_data2_empty_n;
output   dst_mat_data2_read;
output  [63:0] ldata1_din;
input   ldata1_full_n;
output   ldata1_write;
input  [15:0] rows;
input  [10:0] cols;
input   ap_clk;
input   ap_rst;
input   rows_ap_vld;
input   ap_start;
input   cols_ap_vld;
output   ap_done;
output   ap_ready;
output   ap_idle;
input   ap_continue;

wire    entry_proc_U0_ap_start;
wire    entry_proc_U0_ap_done;
wire    entry_proc_U0_ap_continue;
wire    entry_proc_U0_ap_idle;
wire    entry_proc_U0_ap_ready;
wire   [15:0] entry_proc_U0_rows_c_din;
wire    entry_proc_U0_rows_c_write;
wire    cols_npc_aligned_U0_ap_start;
wire    cols_npc_aligned_U0_ap_done;
wire    cols_npc_aligned_U0_ap_continue;
wire    cols_npc_aligned_U0_ap_idle;
wire    cols_npc_aligned_U0_ap_ready;
wire   [10:0] cols_npc_aligned_U0_cols_c_din;
wire    cols_npc_aligned_U0_cols_c_write;
wire   [6:0] cols_npc_aligned_U0_ap_return_0;
wire   [6:0] cols_npc_aligned_U0_ap_return_1;
wire    ap_channel_done_cols_bound_per_npc_dup_1;
wire    cols_bound_per_npc_dup_1_full_n;
reg    ap_sync_reg_channel_write_cols_bound_per_npc_dup_1;
wire    ap_sync_channel_write_cols_bound_per_npc_dup_1;
wire    ap_channel_done_cols_bound_per_npc_dup;
wire    cols_bound_per_npc_dup_full_n;
reg    ap_sync_reg_channel_write_cols_bound_per_npc_dup;
wire    ap_sync_channel_write_cols_bound_per_npc_dup;
wire    last_blk_pxl_width_U0_ap_start;
wire    last_blk_pxl_width_U0_ap_done;
wire    last_blk_pxl_width_U0_ap_continue;
wire    last_blk_pxl_width_U0_ap_idle;
wire    last_blk_pxl_width_U0_ap_ready;
wire   [6:0] last_blk_pxl_width_U0_return_r;
wire    last_blk_pxl_width_U0_cols_read;
wire    last_blk_width_channel_full_n;
wire    MatStream2AxiStream_2_U0_ap_start;
wire    MatStream2AxiStream_2_U0_ap_done;
wire    MatStream2AxiStream_2_U0_ap_continue;
wire    MatStream2AxiStream_2_U0_ap_idle;
wire    MatStream2AxiStream_2_U0_ap_ready;
wire    MatStream2AxiStream_2_U0_dst_mat_data2_read;
wire   [63:0] MatStream2AxiStream_2_U0_ldata1_din;
wire    MatStream2AxiStream_2_U0_ldata1_write;
wire    MatStream2AxiStream_2_U0_rows_read;
wire    rows_c_full_n;
wire   [15:0] rows_c_dout;
wire   [2:0] rows_c_num_data_valid;
wire   [2:0] rows_c_fifo_cap;
wire    rows_c_empty_n;
wire    cols_c_full_n;
wire   [10:0] cols_c_dout;
wire   [1:0] cols_c_num_data_valid;
wire   [1:0] cols_c_fifo_cap;
wire    cols_c_empty_n;
wire   [6:0] cols_bound_per_npc_dup_dout;
wire   [2:0] cols_bound_per_npc_dup_num_data_valid;
wire   [2:0] cols_bound_per_npc_dup_fifo_cap;
wire    cols_bound_per_npc_dup_empty_n;
wire   [6:0] cols_bound_per_npc_dup_1_dout;
wire   [1:0] cols_bound_per_npc_dup_1_num_data_valid;
wire   [1:0] cols_bound_per_npc_dup_1_fifo_cap;
wire    cols_bound_per_npc_dup_1_empty_n;
wire   [6:0] last_blk_width_channel_dout;
wire   [1:0] last_blk_width_channel_num_data_valid;
wire   [1:0] last_blk_width_channel_fifo_cap;
wire    last_blk_width_channel_empty_n;
wire    ap_sync_ready;
reg    ap_sync_reg_entry_proc_U0_ap_ready;
wire    ap_sync_entry_proc_U0_ap_ready;
reg    ap_sync_reg_cols_npc_aligned_U0_ap_ready;
wire    ap_sync_cols_npc_aligned_U0_ap_ready;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_sync_reg_channel_write_cols_bound_per_npc_dup_1 = 1'b0;
#0 ap_sync_reg_channel_write_cols_bound_per_npc_dup = 1'b0;
#0 ap_sync_reg_entry_proc_U0_ap_ready = 1'b0;
#0 ap_sync_reg_cols_npc_aligned_U0_ap_ready = 1'b0;
end

canny_accel_entry_proc entry_proc_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(entry_proc_U0_ap_start),
    .ap_done(entry_proc_U0_ap_done),
    .ap_continue(entry_proc_U0_ap_continue),
    .ap_idle(entry_proc_U0_ap_idle),
    .ap_ready(entry_proc_U0_ap_ready),
    .rows(rows),
    .rows_c_din(entry_proc_U0_rows_c_din),
    .rows_c_num_data_valid(rows_c_num_data_valid),
    .rows_c_fifo_cap(rows_c_fifo_cap),
    .rows_c_full_n(rows_c_full_n),
    .rows_c_write(entry_proc_U0_rows_c_write)
);

canny_accel_cols_npc_aligned cols_npc_aligned_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(cols_npc_aligned_U0_ap_start),
    .ap_done(cols_npc_aligned_U0_ap_done),
    .ap_continue(cols_npc_aligned_U0_ap_continue),
    .ap_idle(cols_npc_aligned_U0_ap_idle),
    .ap_ready(cols_npc_aligned_U0_ap_ready),
    .cols(cols),
    .cols_c_din(cols_npc_aligned_U0_cols_c_din),
    .cols_c_num_data_valid(cols_c_num_data_valid),
    .cols_c_fifo_cap(cols_c_fifo_cap),
    .cols_c_full_n(cols_c_full_n),
    .cols_c_write(cols_npc_aligned_U0_cols_c_write),
    .ap_return_0(cols_npc_aligned_U0_ap_return_0),
    .ap_return_1(cols_npc_aligned_U0_ap_return_1)
);

canny_accel_last_blk_pxl_width last_blk_pxl_width_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(last_blk_pxl_width_U0_ap_start),
    .ap_done(last_blk_pxl_width_U0_ap_done),
    .ap_continue(last_blk_pxl_width_U0_ap_continue),
    .ap_idle(last_blk_pxl_width_U0_ap_idle),
    .ap_ready(last_blk_pxl_width_U0_ap_ready),
    .return_r(last_blk_pxl_width_U0_return_r),
    .cols_dout(cols_c_dout),
    .cols_num_data_valid(cols_c_num_data_valid),
    .cols_fifo_cap(cols_c_fifo_cap),
    .cols_empty_n(cols_c_empty_n),
    .cols_read(last_blk_pxl_width_U0_cols_read),
    .cols_bound_per_npc(cols_bound_per_npc_dup_1_dout)
);

canny_accel_MatStream2AxiStream_2_s MatStream2AxiStream_2_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(MatStream2AxiStream_2_U0_ap_start),
    .ap_done(MatStream2AxiStream_2_U0_ap_done),
    .ap_continue(MatStream2AxiStream_2_U0_ap_continue),
    .ap_idle(MatStream2AxiStream_2_U0_ap_idle),
    .ap_ready(MatStream2AxiStream_2_U0_ap_ready),
    .dst_mat_data2_dout(dst_mat_data2_dout),
    .dst_mat_data2_num_data_valid(2'd0),
    .dst_mat_data2_fifo_cap(2'd0),
    .dst_mat_data2_empty_n(dst_mat_data2_empty_n),
    .dst_mat_data2_read(MatStream2AxiStream_2_U0_dst_mat_data2_read),
    .ldata1_din(MatStream2AxiStream_2_U0_ldata1_din),
    .ldata1_num_data_valid(2'd0),
    .ldata1_fifo_cap(2'd0),
    .ldata1_full_n(ldata1_full_n),
    .ldata1_write(MatStream2AxiStream_2_U0_ldata1_write),
    .rows_dout(rows_c_dout),
    .rows_num_data_valid(rows_c_num_data_valid),
    .rows_fifo_cap(rows_c_fifo_cap),
    .rows_empty_n(rows_c_empty_n),
    .rows_read(MatStream2AxiStream_2_U0_rows_read),
    .cols_bound_per_npc(cols_bound_per_npc_dup_dout),
    .last_blk_width(last_blk_width_channel_dout)
);

canny_accel_fifo_w16_d4_S_x rows_c_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(entry_proc_U0_rows_c_din),
    .if_full_n(rows_c_full_n),
    .if_write(entry_proc_U0_rows_c_write),
    .if_dout(rows_c_dout),
    .if_num_data_valid(rows_c_num_data_valid),
    .if_fifo_cap(rows_c_fifo_cap),
    .if_empty_n(rows_c_empty_n),
    .if_read(MatStream2AxiStream_2_U0_rows_read)
);

canny_accel_fifo_w11_d2_S cols_c_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(cols_npc_aligned_U0_cols_c_din),
    .if_full_n(cols_c_full_n),
    .if_write(cols_npc_aligned_U0_cols_c_write),
    .if_dout(cols_c_dout),
    .if_num_data_valid(cols_c_num_data_valid),
    .if_fifo_cap(cols_c_fifo_cap),
    .if_empty_n(cols_c_empty_n),
    .if_read(last_blk_pxl_width_U0_cols_read)
);

canny_accel_fifo_w7_d3_S cols_bound_per_npc_dup_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(cols_npc_aligned_U0_ap_return_0),
    .if_full_n(cols_bound_per_npc_dup_full_n),
    .if_write(ap_channel_done_cols_bound_per_npc_dup),
    .if_dout(cols_bound_per_npc_dup_dout),
    .if_num_data_valid(cols_bound_per_npc_dup_num_data_valid),
    .if_fifo_cap(cols_bound_per_npc_dup_fifo_cap),
    .if_empty_n(cols_bound_per_npc_dup_empty_n),
    .if_read(MatStream2AxiStream_2_U0_ap_ready)
);

canny_accel_fifo_w7_d2_S cols_bound_per_npc_dup_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(cols_npc_aligned_U0_ap_return_1),
    .if_full_n(cols_bound_per_npc_dup_1_full_n),
    .if_write(ap_channel_done_cols_bound_per_npc_dup_1),
    .if_dout(cols_bound_per_npc_dup_1_dout),
    .if_num_data_valid(cols_bound_per_npc_dup_1_num_data_valid),
    .if_fifo_cap(cols_bound_per_npc_dup_1_fifo_cap),
    .if_empty_n(cols_bound_per_npc_dup_1_empty_n),
    .if_read(last_blk_pxl_width_U0_ap_ready)
);

canny_accel_fifo_w7_d2_S last_blk_width_channel_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(last_blk_pxl_width_U0_return_r),
    .if_full_n(last_blk_width_channel_full_n),
    .if_write(last_blk_pxl_width_U0_ap_done),
    .if_dout(last_blk_width_channel_dout),
    .if_num_data_valid(last_blk_width_channel_num_data_valid),
    .if_fifo_cap(last_blk_width_channel_fifo_cap),
    .if_empty_n(last_blk_width_channel_empty_n),
    .if_read(MatStream2AxiStream_2_U0_ap_ready)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_channel_write_cols_bound_per_npc_dup <= 1'b0;
    end else begin
        if (((cols_npc_aligned_U0_ap_done & cols_npc_aligned_U0_ap_continue) == 1'b1)) begin
            ap_sync_reg_channel_write_cols_bound_per_npc_dup <= 1'b0;
        end else begin
            ap_sync_reg_channel_write_cols_bound_per_npc_dup <= ap_sync_channel_write_cols_bound_per_npc_dup;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_channel_write_cols_bound_per_npc_dup_1 <= 1'b0;
    end else begin
        if (((cols_npc_aligned_U0_ap_done & cols_npc_aligned_U0_ap_continue) == 1'b1)) begin
            ap_sync_reg_channel_write_cols_bound_per_npc_dup_1 <= 1'b0;
        end else begin
            ap_sync_reg_channel_write_cols_bound_per_npc_dup_1 <= ap_sync_channel_write_cols_bound_per_npc_dup_1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_cols_npc_aligned_U0_ap_ready <= 1'b0;
    end else begin
        if (((ap_sync_ready & ap_start) == 1'b1)) begin
            ap_sync_reg_cols_npc_aligned_U0_ap_ready <= 1'b0;
        end else begin
            ap_sync_reg_cols_npc_aligned_U0_ap_ready <= ap_sync_cols_npc_aligned_U0_ap_ready;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_entry_proc_U0_ap_ready <= 1'b0;
    end else begin
        if (((ap_sync_ready & ap_start) == 1'b1)) begin
            ap_sync_reg_entry_proc_U0_ap_ready <= 1'b0;
        end else begin
            ap_sync_reg_entry_proc_U0_ap_ready <= ap_sync_entry_proc_U0_ap_ready;
        end
    end
end

assign MatStream2AxiStream_2_U0_ap_continue = ap_continue;

assign MatStream2AxiStream_2_U0_ap_start = (last_blk_width_channel_empty_n & cols_bound_per_npc_dup_empty_n);

assign ap_channel_done_cols_bound_per_npc_dup = ((ap_sync_reg_channel_write_cols_bound_per_npc_dup ^ 1'b1) & cols_npc_aligned_U0_ap_done);

assign ap_channel_done_cols_bound_per_npc_dup_1 = ((ap_sync_reg_channel_write_cols_bound_per_npc_dup_1 ^ 1'b1) & cols_npc_aligned_U0_ap_done);

assign ap_done = MatStream2AxiStream_2_U0_ap_done;

assign ap_idle = (last_blk_pxl_width_U0_ap_idle & (last_blk_width_channel_empty_n ^ 1'b1) & (cols_bound_per_npc_dup_1_empty_n ^ 1'b1) & (cols_bound_per_npc_dup_empty_n ^ 1'b1) & entry_proc_U0_ap_idle & cols_npc_aligned_U0_ap_idle & MatStream2AxiStream_2_U0_ap_idle);

assign ap_ready = ap_sync_ready;

assign ap_sync_channel_write_cols_bound_per_npc_dup = ((cols_bound_per_npc_dup_full_n & ap_channel_done_cols_bound_per_npc_dup) | ap_sync_reg_channel_write_cols_bound_per_npc_dup);

assign ap_sync_channel_write_cols_bound_per_npc_dup_1 = ((cols_bound_per_npc_dup_1_full_n & ap_channel_done_cols_bound_per_npc_dup_1) | ap_sync_reg_channel_write_cols_bound_per_npc_dup_1);

assign ap_sync_cols_npc_aligned_U0_ap_ready = (cols_npc_aligned_U0_ap_ready | ap_sync_reg_cols_npc_aligned_U0_ap_ready);

assign ap_sync_entry_proc_U0_ap_ready = (entry_proc_U0_ap_ready | ap_sync_reg_entry_proc_U0_ap_ready);

assign ap_sync_ready = (ap_sync_entry_proc_U0_ap_ready & ap_sync_cols_npc_aligned_U0_ap_ready);

assign cols_npc_aligned_U0_ap_continue = (ap_sync_channel_write_cols_bound_per_npc_dup_1 & ap_sync_channel_write_cols_bound_per_npc_dup);

assign cols_npc_aligned_U0_ap_start = ((ap_sync_reg_cols_npc_aligned_U0_ap_ready ^ 1'b1) & ap_start);

assign dst_mat_data2_read = MatStream2AxiStream_2_U0_dst_mat_data2_read;

assign entry_proc_U0_ap_continue = 1'b1;

assign entry_proc_U0_ap_start = ((ap_sync_reg_entry_proc_U0_ap_ready ^ 1'b1) & ap_start);

assign last_blk_pxl_width_U0_ap_continue = last_blk_width_channel_full_n;

assign last_blk_pxl_width_U0_ap_start = cols_bound_per_npc_dup_1_empty_n;

assign ldata1_din = MatStream2AxiStream_2_U0_ldata1_din;

assign ldata1_write = MatStream2AxiStream_2_U0_ldata1_write;

endmodule //canny_accel_Mat2AxiStream
