-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity canny_accel_AxiStream2MatStream_2_Pipeline_MMIterInLoopRow is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ldata1_dout : IN STD_LOGIC_VECTOR (63 downto 0);
    ldata1_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    ldata1_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    ldata1_empty_n : IN STD_LOGIC;
    ldata1_read : OUT STD_LOGIC;
    in_mat_data1_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    in_mat_data1_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    in_mat_data1_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    in_mat_data1_full_n : IN STD_LOGIC;
    in_mat_data1_write : OUT STD_LOGIC;
    bound : IN STD_LOGIC_VECTOR (31 downto 0);
    sext_ln1075 : IN STD_LOGIC_VECTOR (4 downto 0);
    cols_bound_per_npc_load : IN STD_LOGIC_VECTOR (31 downto 0);
    sub : IN STD_LOGIC_VECTOR (31 downto 0);
    last_blk_width_load : IN STD_LOGIC_VECTOR (3 downto 0);
    sub3 : IN STD_LOGIC_VECTOR (6 downto 0);
    add_ln1075 : IN STD_LOGIC_VECTOR (6 downto 0) );
end;


architecture behav of canny_accel_AxiStream2MatStream_2_Pipeline_MMIterInLoopRow is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv7_38 : STD_LOGIC_VECTOR (6 downto 0) := "0111000";
    constant ap_const_lv7_47 : STD_LOGIC_VECTOR (6 downto 0) := "1000111";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv6_3F : STD_LOGIC_VECTOR (5 downto 0) := "111111";
    constant ap_const_lv64_FFFFFFFFFFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "1111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv5_1F : STD_LOGIC_VECTOR (4 downto 0) := "11111";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal icmp_ln1055_reg_779 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1066_reg_788 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_predicate_op107_read_state3 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal icmp_ln1085_reg_847 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1085_reg_847_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln1055_fu_207_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ldata1_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal in_mat_data1_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal bLast_width_fu_218_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bLast_width_reg_783 : STD_LOGIC_VECTOR (0 downto 0);
    signal bLast_width_reg_783_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1066_fu_249_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln628_fu_278_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln628_reg_792 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln628_fu_284_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln628_reg_798 : STD_LOGIC_VECTOR (5 downto 0);
    signal lshr_ln628_4_fu_322_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal lshr_ln628_4_reg_804 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln1067_fu_339_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1067_reg_809 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln1068_fu_345_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln1068_reg_814 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln1068_1_fu_349_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln1068_1_reg_819 : STD_LOGIC_VECTOR (2 downto 0);
    signal sub_ln628_1_fu_371_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal sub_ln628_1_reg_824 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln368_fu_377_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln368_reg_829 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln368_fu_383_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln368_reg_835 : STD_LOGIC_VECTOR (2 downto 0);
    signal and_ln368_fu_433_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal and_ln368_reg_841 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln1085_fu_450_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal localbuffer_V_6_fu_525_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_66_fu_671_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_reg_pp0_iter0_localbuffer_V_8_reg_165 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_reg_pp0_iter1_localbuffer_V_8_reg_165 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_reg_pp0_iter2_localbuffer_V_8_reg_165 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_reg_pp0_iter3_localbuffer_V_8_reg_165 : STD_LOGIC_VECTOR (7 downto 0);
    signal rem_fu_94 : STD_LOGIC_VECTOR (31 downto 0);
    signal rem_3_fu_328_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal rem_2_fu_439_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal i_fu_98 : STD_LOGIC_VECTOR (30 downto 0);
    signal add_ln1055_fu_212_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal j_fu_102 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_7_fu_461_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_s_fu_106 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal zext_ln1055_fu_203_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal xf_bits_per_clock_fu_223_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal ptr_width_minus_fu_238_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln1061_fu_230_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln1075_fu_255_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln1075_fu_262_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln1075_1_fu_272_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln1075_fu_266_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln628_1_fu_288_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal sub_ln628_2_fu_292_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal sub_ln628_3_fu_298_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln628_fu_304_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal xor_ln628_2_fu_312_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln628_4_fu_318_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1061_1_fu_234_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln1072_fu_353_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal sext_ln1072_1_fu_363_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln1072_fu_367_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal sext_ln1072_fu_359_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln368_1_fu_387_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln368_fu_391_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln368_3_fu_399_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal xor_ln368_1_fu_407_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln368_2_fu_413_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln368_3_fu_417_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln368_1_fu_421_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln368_1_fu_427_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln1062_fu_245_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln1087_fu_455_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_fu_482_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln628_1_fu_492_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln628_2_fu_504_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln628_1_fu_497_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln628_3_fu_510_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal lshr_ln628_3_fu_514_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Result_67_fu_520_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub_ln628_fu_529_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln628_fu_534_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln628_1_fu_538_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal lshr_ln628_fu_542_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal lshr_ln628_1_fu_548_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Result_s_fu_554_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub_ln368_fu_564_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln368_fu_569_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_10_fu_560_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln368_fu_573_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_64_fu_579_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln628_fu_592_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln628_2_fu_597_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal lshr_ln628_2_fu_601_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Result_65_fu_607_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln368_fu_617_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln368_4_fu_622_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_11_fu_613_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln368_1_fu_628_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln368_fu_632_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_fu_638_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal localbuffer_V_fu_585_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln368_2_fu_655_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln368_5_fu_648_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal and_ln368_1_fu_660_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal and_ln368_2_fu_666_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln628_2_fu_682_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal xor_ln628_3_fu_685_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln628_5_fu_691_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln628_5_fu_695_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln1060_fu_701_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_condition_599 : BOOLEAN;
    signal ap_condition_602 : BOOLEAN;
    signal ap_condition_605 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component canny_accel_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component canny_accel_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter1_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_phi_reg_pp0_iter3_localbuffer_V_8_reg_165_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then
                if (((icmp_ln1066_reg_788 = ap_const_lv1_0) and (icmp_ln1055_reg_779 = ap_const_lv1_1))) then 
                    ap_phi_reg_pp0_iter3_localbuffer_V_8_reg_165 <= localbuffer_V_6_fu_525_p1;
                elsif (((icmp_ln1066_reg_788 = ap_const_lv1_1) and (icmp_ln1055_reg_779 = ap_const_lv1_1))) then 
                    ap_phi_reg_pp0_iter3_localbuffer_V_8_reg_165 <= p_Result_66_fu_671_p2;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter3_localbuffer_V_8_reg_165 <= ap_phi_reg_pp0_iter2_localbuffer_V_8_reg_165;
                end if;
            end if; 
        end if;
    end process;

    i_fu_98_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_98 <= ap_const_lv31_0;
                elsif (((icmp_ln1055_fu_207_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    i_fu_98 <= add_ln1055_fu_212_p2;
                end if;
            end if; 
        end if;
    end process;

    j_fu_102_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    j_fu_102 <= ap_const_lv32_0;
                elsif (((icmp_ln1055_fu_207_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    j_fu_102 <= j_7_fu_461_p3;
                end if;
            end if; 
        end if;
    end process;

    p_Val2_s_fu_106_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                    p_Val2_s_fu_106 <= ap_const_lv64_0;
                elsif ((ap_const_boolean_1 = ap_condition_599)) then 
                    p_Val2_s_fu_106 <= ldata1_dout;
                end if;
            end if; 
        end if;
    end process;

    rem_fu_94_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    rem_fu_94 <= ap_const_lv32_0;
                elsif ((ap_const_boolean_1 = ap_condition_605)) then 
                    rem_fu_94 <= rem_2_fu_439_p2;
                elsif ((ap_const_boolean_1 = ap_condition_602)) then 
                    rem_fu_94 <= rem_3_fu_328_p2;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1055_fu_207_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln1066_fu_249_p2 = ap_const_lv1_1))) then
                and_ln368_reg_841 <= and_ln368_fu_433_p2;
                icmp_ln1067_reg_809 <= icmp_ln1067_fu_339_p2;
                icmp_ln368_reg_829 <= icmp_ln368_fu_377_p2;
                sub_ln628_1_reg_824 <= sub_ln628_1_fu_371_p2;
                trunc_ln1068_1_reg_819 <= trunc_ln1068_1_fu_349_p1;
                trunc_ln1068_reg_814 <= trunc_ln1068_fu_345_p1;
                trunc_ln368_reg_835 <= trunc_ln368_fu_383_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
                icmp_ln1055_reg_779 <= icmp_ln1055_fu_207_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_phi_reg_pp0_iter1_localbuffer_V_8_reg_165 <= ap_phi_reg_pp0_iter0_localbuffer_V_8_reg_165;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_phi_reg_pp0_iter2_localbuffer_V_8_reg_165 <= ap_phi_reg_pp0_iter1_localbuffer_V_8_reg_165;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1055_fu_207_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                bLast_width_reg_783 <= bLast_width_fu_218_p2;
                icmp_ln1066_reg_788 <= icmp_ln1066_fu_249_p2;
                icmp_ln1085_reg_847 <= icmp_ln1085_fu_450_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                bLast_width_reg_783_pp0_iter2_reg <= bLast_width_reg_783;
                icmp_ln1085_reg_847_pp0_iter2_reg <= icmp_ln1085_reg_847;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1055_fu_207_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln1066_fu_249_p2 = ap_const_lv1_0))) then
                icmp_ln628_reg_792 <= icmp_ln628_fu_278_p2;
                lshr_ln628_4_reg_804 <= lshr_ln628_4_fu_322_p2;
                trunc_ln628_reg_798 <= trunc_ln628_fu_284_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln1055_fu_212_p2 <= std_logic_vector(unsigned(i_fu_98) + unsigned(ap_const_lv31_1));
    add_ln1072_fu_353_p2 <= std_logic_vector(unsigned(zext_ln1061_1_fu_234_p1) + unsigned(ap_const_lv5_1F));
    add_ln1087_fu_455_p2 <= std_logic_vector(unsigned(j_fu_102) + unsigned(ap_const_lv32_1));
    and_ln368_1_fu_660_p2 <= (xor_ln368_2_fu_655_p2 and localbuffer_V_fu_585_p3);
    and_ln368_2_fu_666_p2 <= (select_ln368_5_fu_648_p3 and and_ln368_reg_841);
    and_ln368_fu_433_p2 <= (shl_ln368_1_fu_421_p2 and lshr_ln368_1_fu_427_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ldata1_empty_n, ap_predicate_op107_read_state3, in_mat_data1_full_n, icmp_ln1085_reg_847_pp0_iter2_reg)
    begin
                ap_block_pp0_stage0_01001 <= (((icmp_ln1085_reg_847_pp0_iter2_reg = ap_const_lv1_1) and (in_mat_data1_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((ap_predicate_op107_read_state3 = ap_const_boolean_1) and (ldata1_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ldata1_empty_n, ap_predicate_op107_read_state3, in_mat_data1_full_n, icmp_ln1085_reg_847_pp0_iter2_reg)
    begin
                ap_block_pp0_stage0_11001 <= (((icmp_ln1085_reg_847_pp0_iter2_reg = ap_const_lv1_1) and (in_mat_data1_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((ap_predicate_op107_read_state3 = ap_const_boolean_1) and (ldata1_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ldata1_empty_n, ap_predicate_op107_read_state3, in_mat_data1_full_n, icmp_ln1085_reg_847_pp0_iter2_reg)
    begin
                ap_block_pp0_stage0_subdone <= (((icmp_ln1085_reg_847_pp0_iter2_reg = ap_const_lv1_1) and (in_mat_data1_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((ap_predicate_op107_read_state3 = ap_const_boolean_1) and (ldata1_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)));
    end process;

        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_pp0_stage0_iter2_assign_proc : process(ldata1_empty_n, ap_predicate_op107_read_state3)
    begin
                ap_block_state3_pp0_stage0_iter2 <= ((ap_predicate_op107_read_state3 = ap_const_boolean_1) and (ldata1_empty_n = ap_const_logic_0));
    end process;


    ap_block_state4_pp0_stage0_iter3_assign_proc : process(in_mat_data1_full_n, icmp_ln1085_reg_847_pp0_iter2_reg)
    begin
                ap_block_state4_pp0_stage0_iter3 <= ((icmp_ln1085_reg_847_pp0_iter2_reg = ap_const_lv1_1) and (in_mat_data1_full_n = ap_const_logic_0));
    end process;


    ap_condition_599_assign_proc : process(ap_enable_reg_pp0_iter2, icmp_ln1055_reg_779, icmp_ln1066_reg_788)
    begin
                ap_condition_599 <= ((icmp_ln1066_reg_788 = ap_const_lv1_1) and (icmp_ln1055_reg_779 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1));
    end process;


    ap_condition_602_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln1055_fu_207_p2, icmp_ln1066_fu_249_p2)
    begin
                ap_condition_602 <= ((icmp_ln1055_fu_207_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln1066_fu_249_p2 = ap_const_lv1_0));
    end process;


    ap_condition_605_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln1055_fu_207_p2, icmp_ln1066_fu_249_p2)
    begin
                ap_condition_605 <= ((icmp_ln1055_fu_207_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln1066_fu_249_p2 = ap_const_lv1_1));
    end process;


    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, icmp_ln1055_fu_207_p2)
    begin
        if (((icmp_ln1055_fu_207_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter2_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter1_stage0;
    ap_phi_reg_pp0_iter0_localbuffer_V_8_reg_165 <= "XXXXXXXX";

    ap_predicate_op107_read_state3_assign_proc : process(icmp_ln1055_reg_779, icmp_ln1066_reg_788)
    begin
                ap_predicate_op107_read_state3 <= ((icmp_ln1066_reg_788 = ap_const_lv1_1) and (icmp_ln1055_reg_779 = ap_const_lv1_1));
    end process;


    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;

    bLast_width_fu_218_p2 <= "1" when (j_fu_102 = sub) else "0";
    icmp_ln1055_fu_207_p2 <= "1" when (signed(zext_ln1055_fu_203_p1) < signed(bound)) else "0";
    icmp_ln1066_fu_249_p2 <= "1" when (signed(zext_ln1061_fu_230_p1) > signed(rem_fu_94)) else "0";
    icmp_ln1067_fu_339_p2 <= "1" when (rem_fu_94 = ap_const_lv32_0) else "0";
    icmp_ln1085_fu_450_p2 <= "1" when (signed(j_fu_102) < signed(cols_bound_per_npc_load)) else "0";
    icmp_ln368_fu_377_p2 <= "1" when (unsigned(rem_fu_94) > unsigned(sext_ln1072_fu_359_p1)) else "0";
    icmp_ln628_fu_278_p2 <= "1" when (unsigned(sub_ln1075_1_fu_272_p2) > unsigned(sub_ln1075_fu_266_p2)) else "0";

    in_mat_data1_blk_n_assign_proc : process(ap_enable_reg_pp0_iter3, in_mat_data1_full_n, icmp_ln1085_reg_847_pp0_iter2_reg, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln1085_reg_847_pp0_iter2_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            in_mat_data1_blk_n <= in_mat_data1_full_n;
        else 
            in_mat_data1_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    in_mat_data1_din <= (select_ln1060_fu_701_p3 and ap_phi_reg_pp0_iter3_localbuffer_V_8_reg_165);

    in_mat_data1_write_assign_proc : process(ap_enable_reg_pp0_iter3, icmp_ln1085_reg_847_pp0_iter2_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln1085_reg_847_pp0_iter2_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            in_mat_data1_write <= ap_const_logic_1;
        else 
            in_mat_data1_write <= ap_const_logic_0;
        end if; 
    end process;

    j_7_fu_461_p3 <= 
        ap_const_lv32_0 when (bLast_width_fu_218_p2(0) = '1') else 
        add_ln1087_fu_455_p2;

    ldata1_blk_n_assign_proc : process(ap_enable_reg_pp0_iter2, ldata1_empty_n, ap_predicate_op107_read_state3, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_predicate_op107_read_state3 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            ldata1_blk_n <= ldata1_empty_n;
        else 
            ldata1_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    ldata1_read_assign_proc : process(ap_enable_reg_pp0_iter2, ap_predicate_op107_read_state3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_predicate_op107_read_state3 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            ldata1_read <= ap_const_logic_1;
        else 
            ldata1_read <= ap_const_logic_0;
        end if; 
    end process;

    localbuffer_V_6_fu_525_p1 <= p_Result_67_fu_520_p2(8 - 1 downto 0);
    localbuffer_V_fu_585_p3 <= 
        ap_const_lv8_0 when (icmp_ln1067_reg_809(0) = '1') else 
        p_Result_64_fu_579_p2;
    lshr_ln368_1_fu_427_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv8_FF),to_integer(unsigned('0' & zext_ln368_3_fu_417_p1(8-1 downto 0)))));
    lshr_ln368_fu_573_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv8_FF),to_integer(unsigned('0' & zext_ln368_fu_569_p1(8-1 downto 0)))));
    lshr_ln628_1_fu_548_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv64_FFFFFFFFFFFFFFFF),to_integer(unsigned('0' & zext_ln628_1_fu_538_p1(31-1 downto 0)))));
    lshr_ln628_2_fu_601_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv64_FFFFFFFFFFFFFFFF),to_integer(unsigned('0' & zext_ln628_2_fu_597_p1(31-1 downto 0)))));
    lshr_ln628_3_fu_514_p2 <= std_logic_vector(shift_right(unsigned(select_ln628_1_fu_497_p3),to_integer(unsigned('0' & zext_ln628_3_fu_510_p1(31-1 downto 0)))));
    lshr_ln628_4_fu_322_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv64_FFFFFFFFFFFFFFFF),to_integer(unsigned('0' & zext_ln628_4_fu_318_p1(31-1 downto 0)))));
    lshr_ln628_5_fu_695_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv8_FF),to_integer(unsigned('0' & zext_ln628_5_fu_691_p1(8-1 downto 0)))));
    lshr_ln628_fu_542_p2 <= std_logic_vector(shift_right(unsigned(p_Val2_s_fu_106),to_integer(unsigned('0' & zext_ln628_fu_534_p1(31-1 downto 0)))));
    p_Result_64_fu_579_p2 <= (tmp_10_fu_560_p1 and lshr_ln368_fu_573_p2);
    p_Result_65_fu_607_p2 <= (lshr_ln628_2_fu_601_p2 and ldata1_dout);
    p_Result_66_fu_671_p2 <= (and_ln368_2_fu_666_p2 or and_ln368_1_fu_660_p2);
    p_Result_67_fu_520_p2 <= (lshr_ln628_4_reg_804 and lshr_ln628_3_fu_514_p2);
    p_Result_s_fu_554_p2 <= (lshr_ln628_fu_542_p2 and lshr_ln628_1_fu_548_p2);
    ptr_width_minus_fu_238_p3 <= 
        sub3 when (bLast_width_fu_218_p2(0) = '1') else 
        ap_const_lv7_38;
    rem_2_fu_439_p2 <= std_logic_vector(unsigned(rem_fu_94) + unsigned(zext_ln1062_fu_245_p1));
    rem_3_fu_328_p2 <= std_logic_vector(unsigned(rem_fu_94) - unsigned(zext_ln1061_fu_230_p1));
    select_ln1060_fu_701_p3 <= 
        lshr_ln628_5_fu_695_p2 when (bLast_width_reg_783_pp0_iter2_reg(0) = '1') else 
        ap_const_lv8_FF;
    select_ln1075_fu_255_p3 <= 
        add_ln1075 when (bLast_width_fu_218_p2(0) = '1') else 
        ap_const_lv7_47;
    select_ln368_3_fu_399_p3 <= 
        trunc_ln368_1_fu_387_p1 when (icmp_ln368_fu_377_p2(0) = '1') else 
        trunc_ln368_fu_383_p1;
    select_ln368_4_fu_622_p3 <= 
        xor_ln368_fu_617_p2 when (icmp_ln368_reg_829(0) = '1') else 
        trunc_ln368_reg_835;
    select_ln368_5_fu_648_p3 <= 
        tmp_fu_638_p4 when (icmp_ln368_reg_829(0) = '1') else 
        shl_ln368_fu_632_p2;
    select_ln368_fu_391_p3 <= 
        trunc_ln368_fu_383_p1 when (icmp_ln368_fu_377_p2(0) = '1') else 
        trunc_ln368_1_fu_387_p1;
    select_ln628_1_fu_497_p3 <= 
        tmp_9_fu_482_p4 when (icmp_ln628_reg_792(0) = '1') else 
        p_Val2_s_fu_106;
    select_ln628_2_fu_504_p3 <= 
        xor_ln628_1_fu_492_p2 when (icmp_ln628_reg_792(0) = '1') else 
        trunc_ln628_reg_798;
    select_ln628_fu_304_p3 <= 
        sub_ln628_2_fu_292_p2 when (icmp_ln628_fu_278_p2(0) = '1') else 
        sub_ln628_3_fu_298_p2;
        sext_ln1072_1_fu_363_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln1072_fu_353_p2),6));

        sext_ln1072_fu_359_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln1072_fu_353_p2),32));

    shl_ln368_1_fu_421_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv8_FF),to_integer(unsigned('0' & zext_ln368_2_fu_413_p1(8-1 downto 0)))));
    shl_ln368_fu_632_p2 <= std_logic_vector(shift_left(unsigned(tmp_11_fu_613_p1),to_integer(unsigned('0' & zext_ln368_1_fu_628_p1(8-1 downto 0)))));
    sub_ln1075_1_fu_272_p2 <= std_logic_vector(unsigned(ap_const_lv32_40) - unsigned(rem_fu_94));
    sub_ln1075_fu_266_p2 <= std_logic_vector(unsigned(zext_ln1075_fu_262_p1) - unsigned(rem_fu_94));
    sub_ln368_fu_564_p2 <= std_logic_vector(unsigned(ap_const_lv3_0) - unsigned(trunc_ln1068_1_reg_819));
    sub_ln628_1_fu_371_p2 <= std_logic_vector(signed(sext_ln1072_1_fu_363_p1) - signed(trunc_ln1072_fu_367_p1));
    sub_ln628_2_fu_292_p2 <= std_logic_vector(unsigned(trunc_ln628_fu_284_p1) - unsigned(trunc_ln628_1_fu_288_p1));
    sub_ln628_3_fu_298_p2 <= std_logic_vector(unsigned(trunc_ln628_1_fu_288_p1) - unsigned(trunc_ln628_fu_284_p1));
    sub_ln628_fu_529_p2 <= std_logic_vector(unsigned(ap_const_lv6_0) - unsigned(trunc_ln1068_reg_814));
    tmp_10_fu_560_p1 <= p_Result_s_fu_554_p2(8 - 1 downto 0);
    tmp_11_fu_613_p1 <= p_Result_65_fu_607_p2(8 - 1 downto 0);
    
    tmp_9_fu_482_p4_proc : process(p_Val2_s_fu_106)
    variable vlo_cpy : STD_LOGIC_VECTOR(64+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(64+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(64 - 1 downto 0);
    variable tmp_9_fu_482_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(64 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(64 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(64 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(6 - 1 downto 0) := ap_const_lv32_3F(6 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(6 - 1 downto 0) := ap_const_lv32_0(6 - 1 downto 0);
        v0_cpy := p_Val2_s_fu_106;
        if (vlo_cpy(6 - 1 downto 0) > vhi_cpy(6 - 1 downto 0)) then
            vhi_cpy(6-1 downto 0) := std_logic_vector(64-1-unsigned(ap_const_lv32_0(6-1 downto 0)));
            vlo_cpy(6-1 downto 0) := std_logic_vector(64-1-unsigned(ap_const_lv32_3F(6-1 downto 0)));
            for tmp_9_fu_482_p4_i in 0 to 64-1 loop
                v0_cpy(tmp_9_fu_482_p4_i) := p_Val2_s_fu_106(64-1-tmp_9_fu_482_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(6-1 downto 0)))));

        section := (others=>'0');
        section(6-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(6-1 downto 0)) - unsigned(vlo_cpy(6-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(64-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_9_fu_482_p4 <= resvalue(64-1 downto 0);
    end process;

    
    tmp_fu_638_p4_proc : process(shl_ln368_fu_632_p2)
    variable vlo_cpy : STD_LOGIC_VECTOR(8+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(8+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(8 - 1 downto 0);
    variable tmp_fu_638_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(8 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(8 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(8 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(3 - 1 downto 0) := ap_const_lv32_7(3 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(3 - 1 downto 0) := ap_const_lv32_0(3 - 1 downto 0);
        v0_cpy := shl_ln368_fu_632_p2;
        if (vlo_cpy(3 - 1 downto 0) > vhi_cpy(3 - 1 downto 0)) then
            vhi_cpy(3-1 downto 0) := std_logic_vector(8-1-unsigned(ap_const_lv32_0(3-1 downto 0)));
            vlo_cpy(3-1 downto 0) := std_logic_vector(8-1-unsigned(ap_const_lv32_7(3-1 downto 0)));
            for tmp_fu_638_p4_i in 0 to 8-1 loop
                v0_cpy(tmp_fu_638_p4_i) := shl_ln368_fu_632_p2(8-1-tmp_fu_638_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(3-1 downto 0)))));

        section := (others=>'0');
        section(3-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(3-1 downto 0)) - unsigned(vlo_cpy(3-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(8-1 downto 0)))));
        res_mask := res_mask(8-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_fu_638_p4 <= resvalue(8-1 downto 0);
    end process;

    trunc_ln1068_1_fu_349_p1 <= rem_fu_94(3 - 1 downto 0);
    trunc_ln1068_fu_345_p1 <= rem_fu_94(6 - 1 downto 0);
    trunc_ln1072_fu_367_p1 <= rem_fu_94(6 - 1 downto 0);
    trunc_ln368_1_fu_387_p1 <= add_ln1072_fu_353_p2(3 - 1 downto 0);
    trunc_ln368_fu_383_p1 <= rem_fu_94(3 - 1 downto 0);
    trunc_ln628_1_fu_288_p1 <= sub_ln1075_fu_266_p2(6 - 1 downto 0);
    trunc_ln628_2_fu_682_p1 <= sext_ln1075(3 - 1 downto 0);
    trunc_ln628_fu_284_p1 <= sub_ln1075_1_fu_272_p2(6 - 1 downto 0);
    xf_bits_per_clock_fu_223_p3 <= 
        last_blk_width_load when (bLast_width_fu_218_p2(0) = '1') else 
        ap_const_lv4_8;
    xor_ln368_1_fu_407_p2 <= (select_ln368_fu_391_p3 xor ap_const_lv3_7);
    xor_ln368_2_fu_655_p2 <= (ap_const_lv8_FF xor and_ln368_reg_841);
    xor_ln368_fu_617_p2 <= (trunc_ln368_reg_835 xor ap_const_lv3_7);
    xor_ln628_1_fu_492_p2 <= (trunc_ln628_reg_798 xor ap_const_lv6_3F);
    xor_ln628_2_fu_312_p2 <= (select_ln628_fu_304_p3 xor ap_const_lv6_3F);
    xor_ln628_3_fu_685_p2 <= (trunc_ln628_2_fu_682_p1 xor ap_const_lv3_7);
    xor_ln628_fu_592_p2 <= (sub_ln628_1_reg_824 xor ap_const_lv6_3F);
    zext_ln1055_fu_203_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_fu_98),32));
    zext_ln1061_1_fu_234_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xf_bits_per_clock_fu_223_p3),5));
    zext_ln1061_fu_230_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xf_bits_per_clock_fu_223_p3),32));
    zext_ln1062_fu_245_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ptr_width_minus_fu_238_p3),32));
    zext_ln1075_fu_262_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln1075_fu_255_p3),32));
    zext_ln368_1_fu_628_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln368_4_fu_622_p3),8));
    zext_ln368_2_fu_413_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln368_3_fu_399_p3),8));
    zext_ln368_3_fu_417_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln368_1_fu_407_p2),8));
    zext_ln368_fu_569_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln368_fu_564_p2),8));
    zext_ln628_1_fu_538_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln628_fu_529_p2),64));
    zext_ln628_2_fu_597_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln628_fu_592_p2),64));
    zext_ln628_3_fu_510_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln628_2_fu_504_p3),64));
    zext_ln628_4_fu_318_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln628_2_fu_312_p2),64));
    zext_ln628_5_fu_691_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln628_3_fu_685_p2),8));
    zext_ln628_fu_534_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln628_fu_529_p2),64));
end behav;
