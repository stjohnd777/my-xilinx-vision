// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module canny_accel_xFSuppression3x3_Pipeline_bufColLoop (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        magnitude_mat_data8_dout,
        magnitude_mat_data8_num_data_valid,
        magnitude_mat_data8_fifo_cap,
        magnitude_mat_data8_empty_n,
        magnitude_mat_data8_read,
        phase_mat_data9_dout,
        phase_mat_data9_num_data_valid,
        phase_mat_data9_fifo_cap,
        phase_mat_data9_empty_n,
        phase_mat_data9_read,
        imgwidth_load,
        angle_V_address0,
        angle_V_ce0,
        angle_V_we0,
        angle_V_d0,
        buf_V_1_address0,
        buf_V_1_ce0,
        buf_V_1_we0,
        buf_V_1_d0,
        buf_V_address0,
        buf_V_ce0,
        buf_V_we0,
        buf_V_d0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [15:0] magnitude_mat_data8_dout;
input  [1:0] magnitude_mat_data8_num_data_valid;
input  [1:0] magnitude_mat_data8_fifo_cap;
input   magnitude_mat_data8_empty_n;
output   magnitude_mat_data8_read;
input  [7:0] phase_mat_data9_dout;
input  [13:0] phase_mat_data9_num_data_valid;
input  [13:0] phase_mat_data9_fifo_cap;
input   phase_mat_data9_empty_n;
output   phase_mat_data9_read;
input  [15:0] imgwidth_load;
output  [10:0] angle_V_address0;
output   angle_V_ce0;
output   angle_V_we0;
output  [7:0] angle_V_d0;
output  [10:0] buf_V_1_address0;
output   buf_V_1_ce0;
output   buf_V_1_we0;
output  [15:0] buf_V_1_d0;
output  [10:0] buf_V_address0;
output   buf_V_ce0;
output   buf_V_we0;
output  [15:0] buf_V_d0;

reg ap_idle;
reg magnitude_mat_data8_read;
reg phase_mat_data9_read;
reg angle_V_ce0;
reg angle_V_we0;
reg buf_V_1_ce0;
reg buf_V_1_we0;
reg buf_V_ce0;
reg buf_V_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
reg    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln1027_fu_124_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    magnitude_mat_data8_blk_n;
wire    ap_block_pp0_stage0;
reg    phase_mat_data9_blk_n;
wire   [63:0] zext_ln541_fu_136_p1;
reg   [63:0] zext_ln541_reg_156;
reg    ap_block_pp0_stage0_11001;
reg   [12:0] col_V_fu_48;
wire   [12:0] col_V_4_fu_130_p2;
wire    ap_loop_init;
reg   [12:0] ap_sig_allocacmp_col_V_3;
wire   [15:0] zext_ln1027_fu_120_p1;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
end

canny_accel_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln1027_fu_124_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            col_V_fu_48 <= col_V_4_fu_130_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            col_V_fu_48 <= 13'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1027_fu_124_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        zext_ln541_reg_156[12 : 0] <= zext_ln541_fu_136_p1[12 : 0];
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        angle_V_ce0 = 1'b1;
    end else begin
        angle_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        angle_V_we0 = 1'b1;
    end else begin
        angle_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln1027_fu_124_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_col_V_3 = 13'd0;
    end else begin
        ap_sig_allocacmp_col_V_3 = col_V_fu_48;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        buf_V_1_ce0 = 1'b1;
    end else begin
        buf_V_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        buf_V_1_we0 = 1'b1;
    end else begin
        buf_V_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        buf_V_ce0 = 1'b1;
    end else begin
        buf_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln1027_fu_124_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        buf_V_we0 = 1'b1;
    end else begin
        buf_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        magnitude_mat_data8_blk_n = magnitude_mat_data8_empty_n;
    end else begin
        magnitude_mat_data8_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        magnitude_mat_data8_read = 1'b1;
    end else begin
        magnitude_mat_data8_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        phase_mat_data9_blk_n = phase_mat_data9_empty_n;
    end else begin
        phase_mat_data9_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        phase_mat_data9_read = 1'b1;
    end else begin
        phase_mat_data9_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign angle_V_address0 = zext_ln541_reg_156;

assign angle_V_d0 = phase_mat_data9_dout;

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & ((phase_mat_data9_empty_n == 1'b0) | (magnitude_mat_data8_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter1 == 1'b1) & ((phase_mat_data9_empty_n == 1'b0) | (magnitude_mat_data8_empty_n == 1'b0)));
end

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = ((phase_mat_data9_empty_n == 1'b0) | (magnitude_mat_data8_empty_n == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign buf_V_1_address0 = zext_ln541_reg_156;

assign buf_V_1_d0 = magnitude_mat_data8_dout;

assign buf_V_address0 = zext_ln541_fu_136_p1;

assign buf_V_d0 = 16'd0;

assign col_V_4_fu_130_p2 = (ap_sig_allocacmp_col_V_3 + 13'd1);

assign icmp_ln1027_fu_124_p2 = ((zext_ln1027_fu_120_p1 < imgwidth_load) ? 1'b1 : 1'b0);

assign zext_ln1027_fu_120_p1 = ap_sig_allocacmp_col_V_3;

assign zext_ln541_fu_136_p1 = ap_sig_allocacmp_col_V_3;

always @ (posedge ap_clk) begin
    zext_ln541_reg_156[63:13] <= 51'b000000000000000000000000000000000000000000000000000;
end

endmodule //canny_accel_xFSuppression3x3_Pipeline_bufColLoop
